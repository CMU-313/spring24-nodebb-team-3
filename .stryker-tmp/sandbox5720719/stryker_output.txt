[32m06:42:03 (4852) INFO ProjectReader[39m Found 20 of 10082 file(s) to be mutated.
[32m06:42:04 (4852) INFO Instrumenter[39m Instrumented 20 source file(s) with 3892 mutant(s)
[32m06:42:09 (4852) INFO ConcurrencyTokenProvider[39m Creating 7 test runner process(es).
[32m06:42:13 (4852) INFO BroadcastReporter[39m Detected that current console does not support the "progress" reporter, downgrading to "progress-append-only" reporter
[32m06:42:14 (4852) INFO DryRunExecutor[39m Starting initial test run (mocha test runner with "perTest" coverage analysis). This may take a while.
[32m06:44:18 (4852) INFO DryRunExecutor[39m Initial test run succeeded. Ran 2916 tests in 2 minutes 3 seconds (net 119609 ms, overhead 4212 ms).
Mutation testing 0% (elapsed: <1m, remaining: ~28m) 414/3892 tested (0 survived, 0 timed out)
Mutation testing 13% (elapsed: <1m, remaining: ~2m) 643/3892 tested (0 survived, 1 timed out)
Mutation testing 16% (elapsed: <1m, remaining: ~2m) 703/3892 tested (0 survived, 1 timed out)
Mutation testing 20% (elapsed: <1m, remaining: ~2m) 739/3892 tested (0 survived, 1 timed out)
Mutation testing 23% (elapsed: <1m, remaining: ~2m) 808/3892 tested (0 survived, 1 timed out)
Mutation testing 29% (elapsed: ~1m, remaining: ~2m) 1302/3892 tested (0 survived, 1 timed out)
Mutation testing 39% (elapsed: ~1m, remaining: ~1m) 1652/3892 tested (0 survived, 1 timed out)
Mutation testing 50% (elapsed: ~1m, remaining: ~1m) 2007/3892 tested (0 survived, 1 timed out)
Mutation testing 52% (elapsed: ~1m, remaining: ~1m) 2385/3892 tested (0 survived, 1 timed out)
Mutation testing 57% (elapsed: ~1m, remaining: ~1m) 2689/3892 tested (0 survived, 1 timed out)
Mutation testing 62% (elapsed: ~1m, remaining: ~1m) 2919/3892 tested (0 survived, 1 timed out)
Mutation testing 68% (elapsed: ~2m, remaining: <1m) 3091/3892 tested (0 survived, 1 timed out)
Mutation testing 68% (elapsed: ~2m, remaining: ~1m) 3390/3892 tested (3 survived, 1 timed out)
Mutation testing 69% (elapsed: ~2m, remaining: ~1m) 3649/3892 tested (3 survived, 1 timed out)
Mutation testing 76% (elapsed: ~2m, remaining: <1m) 3819/3892 tested (3 survived, 1 timed out)
Mutation testing 78% (elapsed: ~2m, remaining: <1m) 3825/3892 tested (3 survived, 1 timed out)
Mutation testing 80% (elapsed: ~2m, remaining: <1m) 3831/3892 tested (3 survived, 1 timed out)
Mutation testing 82% (elapsed: ~3m, remaining: <1m) 3837/3892 tested (3 survived, 1 timed out)
Mutation testing 83% (elapsed: ~3m, remaining: <1m) 3840/3892 tested (3 survived, 1 timed out)
Mutation testing 85% (elapsed: ~3m, remaining: <1m) 3846/3892 tested (3 survived, 1 timed out)
Mutation testing 88% (elapsed: ~3m, remaining: <1m) 3855/3892 tested (3 survived, 1 timed out)
Mutation testing 90% (elapsed: ~3m, remaining: <1m) 3862/3892 tested (3 survived, 1 timed out)
Mutation testing 92% (elapsed: ~3m, remaining: <1m) 3868/3892 tested (3 survived, 1 timed out)
Mutation testing 94% (elapsed: ~4m, remaining: <1m) 3875/3892 tested (3 survived, 1 timed out)
Mutation testing 97% (elapsed: ~4m, remaining: <1m) 3884/3892 tested (3 survived, 1 timed out)
Mutation testing 99% (elapsed: ~4m, remaining: n/a) 3891/3892 tested (3 survived, 1 timed out)

All tests
  api.js
    âœ˜ API should pass OpenAPI v3 validation (covered 0)
  authentication.js
    âœ˜ authentication should allow login with email for uid 1 (covered 0)
    âœ˜ authentication second user should fail to login with email since email is not confirmed (covered 0)
    âœ˜ authentication should fail to create user if username is too short (covered 0)
    âœ˜ authentication should fail to create user if userslug is too short (covered 0)
    âœ˜ authentication should register and login a user (covered 0)
    âœ˜ authentication should logout a user (covered 0)
    âœ˜ authentication should login a user (covered 0)
    âœ˜ authentication should regenerate the session identifier on successful login (covered 0)
    âœ˜ authentication should revoke all sessions (covered 0)
    ~ authentication should fail to login if ip address is invalid (covered 31)
    âœ˜ authentication should fail to login if user does not exist (covered 0)
    âœ˜ authentication should fail to login if username is empty (covered 0)
    âœ˜ authentication should fail to login if password is empty (covered 0)
    âœ˜ authentication should fail to login if username and password are empty (covered 0)
    âœ˜ authentication should fail to login if user does not have password field in db (covered 0)
    âœ˜ authentication should fail to login if password is longer than 4096 (covered 0)
    âœ˜ authentication should fail to login if local login is disabled (covered 0)
    âœ˜ authentication should fail to register if registraton is disabled (covered 0)
    âœ˜ authentication should return error if invitation is not valid (covered 0)
    âœ˜ authentication should fail to register if username is falsy or too short (covered 0)
    âœ˜ authentication should fail to register if username is too long (covered 0)
    âœ˜ authentication should fail to register if account type is invalid (covered 0)
    âœ˜ authentication should queue user if ip is used before (covered 0)
    âœ˜ authentication should be able to login with email (covered 0)
    âœ˜ authentication should fail to login if login type is username and an email is sent (covered 0)
    âœ˜ authentication should send 200 if not logged in (covered 0)
    âœ˜ authentication should lockout account on 3 failed login attempts (covered 0)
    âœ˜ authentication should clear all reset tokens upon successful login (covered 0)
    âœ˜ authentication banned user authentication should prevent banned user from logging in (covered 0)
    âœ˜ authentication banned user authentication should allow banned user to log in if the "banned-users" group has "local-login" privilege (covered 0)
    âœ˜ authentication banned user authentication should allow banned user to log in if the user herself has "local-login" privilege (covered 0)
    âœ˜ authentication api tokens should fail with invalid token (covered 0)
    âœ˜ authentication api tokens should use a token tied to an uid (covered 0)
    âœ˜ authentication api tokens should fail if _uid is not passed in with master token (covered 0)
    âœ˜ authentication api tokens should use master api token and _uid (covered 0)
  batch.js
    âœ˜ batch should process sorted set with callbacks (covered 0)
    âœ˜ batch should process sorted set with async/await (covered 0)
    âœ˜ batch should process array with callbacks (covered 0)
    âœ˜ batch should process array with async/await (covered 0)
  blacklist.js
    âœ˜ blacklist should validate blacklist (covered 0)
    âœ˜ blacklist should error if not admin (covered 0)
    âœ˜ blacklist should save blacklist (covered 0)
    âœ˜ blacklist should pass ip test against blacklist (covered 0)
    âœ˜ blacklist should fail ip test against blacklist (covered 0)
    âœ˜ blacklist should pass ip test and not crash with ipv6 address (covered 0)
  categories.js
    âœ˜ Categories should create a new category (covered 0)
    ~ Categories should retrieve a newly created category by its ID (covered 21)
    âœ˜ Categories should return null if category does not exist (covered 0)
    âœ˜ Categories should get all categories (covered 0)
    ~ Categories should load a category route (covered 21)
    ~ Categories should get active users (covered 774)
    ~ Categories should return nested children categories (covered 21)
    ~ Categories Categories.getRecentTopicReplies should not throw (covered 21)
    ~ Categories .getCategoryTopics should return a list of topics (covered 21)
    ~ Categories .getCategoryTopics should return a list of topics by a specific user (covered 868)
    ~ Categories Categories.moveRecentReplies should move posts from one category to another (covered 863)
    ~ Categories api/socket methods should get recent replies in category (covered 89)
    âœ˜ Categories api/socket methods should get categories (covered 0)
    âœ˜ Categories api/socket methods should get watched categories (covered 0)
    ~ Categories api/socket methods should load more topics (covered 386)
    ~ Categories api/socket methods should not show deleted topic titles (covered 377)
    âœ˜ Categories api/socket methods should load topic count (covered 0)
    âœ˜ Categories api/socket methods should load category by privilege (covered 0)
    âœ˜ Categories api/socket methods should get move categories (covered 0)
    ~ Categories api/socket methods should ignore category (covered 121)
    ~ Categories api/socket methods should watch category (covered 121)
    âœ˜ Categories api/socket methods should error if watch state does not exist (covered 0)
    âœ˜ Categories api/socket methods should check if user is moderator (covered 0)
    âœ˜ Categories api/socket methods should get category data (covered 0)
    âœ˜ Categories admin api/socket methods should return error with invalid data (covered 0)
    âœ˜ Categories admin api/socket methods should error if you try to set parent as self (covered 0)
    âœ˜ Categories admin api/socket methods should error if you try to set child as parent (covered 0)
    âœ˜ Categories admin api/socket methods should update category data (covered 0)
    âœ˜ Categories admin api/socket methods should properly order categories (covered 0)
    âœ˜ Categories admin api/socket methods should not remove category from parent if parent is set again to same category (covered 0)
    ~ Categories admin api/socket methods should purge category (covered 926)
    âœ˜ Categories admin api/socket methods should get all category names (covered 0)
    âœ˜ Categories admin api/socket methods should give privilege (covered 0)
    âœ˜ Categories admin api/socket methods should remove privilege (covered 0)
    âœ˜ Categories admin api/socket methods should get privilege settings (covered 0)
    âœ˜ Categories admin api/socket methods should copy privileges to children (covered 0)
    âœ˜ Categories admin api/socket methods should create category with settings from (covered 0)
    âœ˜ Categories admin api/socket methods should copy settings from (covered 0)
    âœ˜ Categories admin api/socket methods should copy privileges from another category (covered 0)
    âœ˜ Categories admin api/socket methods should copy privileges from another category for a single group (covered 0)
    âœ˜ Categories tag whitelist should error if data is invalid (covered 0)
    âœ˜ Categories tag whitelist should return true if category whitelist is empty (covered 0)
    âœ˜ Categories tag whitelist should add tags to category whitelist (covered 0)
    âœ˜ Categories tag whitelist should return false if category whitelist does not have tag (covered 0)
    âœ˜ Categories tag whitelist should return true if category whitelist has tag (covered 0)
    ~ Categories tag whitelist should post a topic with only allowed tags (covered 834)
    âœ˜ Categories privileges should return empty array if uids is empty array (covered 0)
    âœ˜ Categories privileges should filter uids by privilege (covered 0)
    âœ˜ Categories privileges should load category user privileges (covered 0)
    âœ˜ Categories privileges should load global user privileges (covered 0)
    âœ˜ Categories privileges should load category group privileges (covered 0)
    âœ˜ Categories privileges should load global group privileges (covered 0)
    âœ˜ Categories privileges should return false if cid is falsy (covered 0)
    âœ˜ Categories privileges Categories.getModeratorUids should retrieve all users with moderator bit in category privilege (covered 0)
    âœ˜ Categories privileges Categories.getModeratorUids should not fail when there are multiple groups (covered 0)
    ~ Categories getTopicIds should get topic ids with filter (covered 781)
  controllers-admin.js
    ~ Admin Controllers should 403 if user is not admin (covered 239)
    ~ Admin Controllers should load admin dashboard (covered 341)
    âœ˜ Admin Controllers should load admin analytics (covered 0)
    âœ˜ Admin Controllers should load groups page (covered 0)
    âœ˜ Admin Controllers should load groups detail page (covered 0)
    âœ˜ Admin Controllers should load global privileges page (covered 0)
    âœ˜ Admin Controllers should load admin privileges page (covered 0)
    âœ˜ Admin Controllers should load privileges page for category 1 (covered 0)
    âœ˜ Admin Controllers should load manage digests (covered 0)
    âœ˜ Admin Controllers should load manage uploads (covered 0)
    âœ˜ Admin Controllers should load general settings page (covered 0)
    âœ˜ Admin Controllers should load email settings page (covered 0)
    âœ˜ Admin Controllers should load user settings page (covered 0)
    ~ Admin Controllers should load info page for a user (covered 8)
    âœ˜ Admin Controllers should 404 for edit/email page if user does not exist (covered 0)
    âœ˜ Admin Controllers should load /admin/settings/homepage (covered 0)
    âœ˜ Admin Controllers should load /admin/advanced/database (covered 0)
    âœ˜ Admin Controllers should load /admin/extend/plugins (covered 0)
    âœ˜ Admin Controllers should load /admin/manage/users (covered 0)
    âœ˜ Admin Controllers should load /admin/manage/users?filters=banned (covered 0)
    âœ˜ Admin Controllers should load /admin/manage/users?filters=banned&filters=verified (covered 0)
    âœ˜ Admin Controllers should load /admin/manage/users?query=admin (covered 0)
    âœ˜ Admin Controllers should return empty results if query is too short (covered 0)
    âœ˜ Admin Controllers should load /admin/manage/registration (covered 0)
    âœ˜ Admin Controllers should 404 if users is not privileged (covered 0)
    âœ˜ Admin Controllers should load /api/registration-queue (covered 0)
    âœ˜ Admin Controllers should load /admin/manage/admins-mods (covered 0)
    âœ˜ Admin Controllers should load /admin/users/csv (covered 0)
    âœ˜ Admin Controllers should return 403 if no referer (covered 0)
    âœ˜ Admin Controllers should return 403 if referer is not /api/admin/groups/administrators/csv (covered 0)
    âœ˜ Admin Controllers should load /api/admin/groups/administrators/csv (covered 0)
    âœ˜ Admin Controllers should load /admin/advanced/hooks (covered 0)
    âœ˜ Admin Controllers should load /admin/advanced/cache (covered 0)
    âœ˜ Admin Controllers should load /api/admin/advanced/cache/dump and 404 with no query param (covered 0)
    âœ˜ Admin Controllers should load /api/admin/advanced/cache/dump (covered 0)
    âœ˜ Admin Controllers should load /admin/advanced/errors (covered 0)
    âœ˜ Admin Controllers should load /admin/advanced/errors/export (covered 0)
    âœ˜ Admin Controllers should load /admin/advanced/logs (covered 0)
    âœ˜ Admin Controllers should load /admin/settings/navigation (covered 0)
    âœ˜ Admin Controllers should load /admin/development/info (covered 0)
    âœ˜ Admin Controllers should load /admin/development/logger (covered 0)
    âœ˜ Admin Controllers should load /admin/advanced/events (covered 0)
    âœ˜ Admin Controllers should load /admin/manage/categories (covered 0)
    âœ˜ Admin Controllers should load /admin/manage/categories/1 (covered 0)
    âœ˜ Admin Controllers should load /admin/manage/catgories?cid=<cid> (covered 0)
    âœ˜ Admin Controllers should load /admin/manage/categories/1/analytics (covered 0)
    âœ˜ Admin Controllers should load /admin/extend/rewards (covered 0)
    âœ˜ Admin Controllers should load /admin/extend/widgets (covered 0)
    âœ˜ Admin Controllers should load /admin/settings/languages (covered 0)
    âœ˜ Admin Controllers should load /admin/settings/social (covered 0)
    ~ Admin Controllers should load /admin/manage/tags (covered 14)
    âœ˜ Admin Controllers /post-queue should 404 for regular user (covered 0)
    âœ˜ Admin Controllers should load /post-queue (covered 0)
    âœ˜ Admin Controllers /ip-blacklist should 404 for regular user (covered 0)
    âœ˜ Admin Controllers should load /ip-blacklist (covered 0)
    âœ˜ Admin Controllers should load /admin/appearance/themes (covered 0)
    âœ˜ Admin Controllers should load /admin/appearance/customise (covered 0)
    ~ Admin Controllers should load /recent in maintenance mode (covered 535)
    ~ Admin Controllers should escape special characters in config (covered 340)
    âœ˜ Admin Controllers mods page should error with no privileges (covered 0)
    âœ˜ Admin Controllers mods page should load flags page data (covered 0)
    âœ˜ Admin Controllers mods page should return a 404 if flag does not exist (covered 0)
    ~ Admin Controllers mods page should error when you attempt to flag a privileged user's post (covered 96)
    ~ Admin Controllers mods page should error with not enough reputation to flag (covered 162)
    ~ Admin Controllers mods page should return flag details (covered 169)
    âœ˜ Admin Controllers admin page privileges should list all admin privileges (covered 0)
    âœ˜ Admin Controllers admin page privileges should list user admin privileges (covered 0)
    âœ˜ Admin Controllers admin page privileges should check if group has admin group privilege (covered 0)
    âœ˜ Admin Controllers admin page privileges should not have admin:privileges (covered 0)
    ~ Admin Controllers admin page privileges routeMap parsing should allow normal user access to admin pages (covered 14)
    âœ˜ Admin Controllers admin page privileges routePrefixMap parsing should allow normal user access to admin pages (covered 0)
  coverPhoto.js
    âœ˜ coverPhoto should get default group cover (covered 0)
    âœ˜ coverPhoto should get default default profile cover (covered 0)
  database.js
    âœ˜ Test database should work (covered 0)
    âœ˜ Test database info should return info about database (covered 0)
    âœ˜ Test database info should not error and return info if client is falsy (covered 0)
    âœ˜ Test database checkCompatibility should not throw (covered 0)
    âœ˜ Test database checkCompatibility should return error with a too low version (covered 0)
    âœ˜ Test database Key methods should set a key without error (covered 0)
    âœ˜ Test database Key methods should get a key without error (covered 0)
    âœ˜ Test database Key methods should return null if key does not exist (covered 0)
    âœ˜ Test database Key methods should return true if key exist (covered 0)
    âœ˜ Test database Key methods should return false if key does not exist (covered 0)
    âœ˜ Test database Key methods should work for an array of keys (covered 0)
    âœ˜ Test database Key methods should delete a key without error (covered 0)
    âœ˜ Test database Key methods should return false if key was deleted (covered 0)
    âœ˜ Test database Key methods should delete all keys passed in (covered 0)
    âœ˜ Test database Key methods should delete all sorted set elements (covered 0)
    âœ˜ Test database Key methods scan should scan keys for pattern (covered 0)
    âœ˜ Test database Key methods increment should initialize key to 1 (covered 0)
    âœ˜ Test database Key methods increment should increment key to 2 (covered 0)
    âœ˜ Test database Key methods increment should set then increment a key (covered 0)
    âœ˜ Test database Key methods increment should return the correct value (covered 0)
    âœ˜ Test database Key methods rename should rename key to new name (covered 0)
    âœ˜ Test database Key methods rename should rename multiple keys (covered 0)
    âœ˜ Test database Key methods rename should not error if old key does not exist (covered 0)
    âœ˜ Test database Key methods type should return null if key does not exist (covered 0)
    âœ˜ Test database Key methods type should return hash as type (covered 0)
    âœ˜ Test database Key methods type should return zset as type (covered 0)
    âœ˜ Test database Key methods type should return set as type (covered 0)
    âœ˜ Test database Key methods type should return list as type (covered 0)
    âœ˜ Test database Key methods type should return string as type (covered 0)
    âœ˜ Test database Key methods type should expire a key using seconds (covered 0)
    âœ˜ Test database Key methods type should expire a key using milliseconds (covered 0)
    âœ˜ Test database List methods listAppend() should append to a list (covered 0)
    âœ˜ Test database List methods listAppend() should not add anyhing if key is falsy (covered 0)
    âœ˜ Test database List methods listAppend() should append each element to list (covered 0)
    âœ˜ Test database List methods listPrepend() should prepend to a list (covered 0)
    âœ˜ Test database List methods listPrepend() should prepend 2 more elements to a list (covered 0)
    âœ˜ Test database List methods listPrepend() should not add anyhing if key is falsy (covered 0)
    âœ˜ Test database List methods listPrepend() should prepend each element to list (covered 0)
    âœ˜ Test database List methods getListRange() should return an empty list (covered 0)
    âœ˜ Test database List methods getListRange() should return a list with one element (covered 0)
    âœ˜ Test database List methods getListRange() should return a list with 2 elements 3, 7 (covered 0)
    âœ˜ Test database List methods getListRange() should not get anything if key is falsy (covered 0)
    âœ˜ Test database List methods listRemoveLast() should remove the last element of list and return it (covered 0)
    âœ˜ Test database List methods listRemoveLast() should not remove anyhing if key is falsy (covered 0)
    âœ˜ Test database List methods listRemoveAll() should remove all the matching elements of list (covered 0)
    âœ˜ Test database List methods listRemoveAll() should not remove anyhing if key is falsy (covered 0)
    âœ˜ Test database List methods listRemoveAll() should remove multiple elements from list (covered 0)
    âœ˜ Test database List methods listTrim() should trim list to a certain range (covered 0)
    âœ˜ Test database List methods listTrim() should not add anyhing if key is falsy (covered 0)
    âœ˜ Test database List methods listLength should get the length of a list (covered 0)
    âœ˜ Test database List methods listLength should return 0 if list does not have any elements (covered 0)
    âœ˜ Test database Set methods setAdd() should add to a set (covered 0)
    âœ˜ Test database Set methods setAdd() should add an array to a set (covered 0)
    âœ˜ Test database Set methods setAdd() should not do anything if values array is empty (covered 0)
    âœ˜ Test database Set methods getSetMembers() should return an empty set (covered 0)
    âœ˜ Test database Set methods getSetMembers() should return a set with all elements (covered 0)
    âœ˜ Test database Set methods setsAdd() should add to multiple sets (covered 0)
    âœ˜ Test database Set methods setsAdd() should not error if keys is empty array (covered 0)
    âœ˜ Test database Set methods getSetsMembers() should return members of two sets (covered 0)
    âœ˜ Test database Set methods isSetMember() should return false if element is not member of set (covered 0)
    âœ˜ Test database Set methods isSetMember() should return true if element is a member of set (covered 0)
    âœ˜ Test database Set methods isSetMembers() should return an array of booleans (covered 0)
    âœ˜ Test database Set methods isMemberOfSets() should return an array of booleans (covered 0)
    âœ˜ Test database Set methods setCount() should return the element count of set (covered 0)
    âœ˜ Test database Set methods setCount() should return 0 if set does not exist (covered 0)
    âœ˜ Test database Set methods setsCount() should return the element count of sets (covered 0)
    âœ˜ Test database Set methods setRemove() should remove a element from set (covered 0)
    âœ˜ Test database Set methods setRemove() should remove multiple elements from set (covered 0)
    âœ˜ Test database Set methods setRemove() should remove multiple values from multiple keys (covered 0)
    âœ˜ Test database Set methods setsRemove() should remove a element from multiple sets (covered 0)
    âœ˜ Test database Set methods setRemoveRandom() should remove a random element from set (covered 0)
    âœ˜ Test database Hash methods setObject() should create a object (covered 0)
    âœ˜ Test database Hash methods setObject() should set two objects to same data (covered 0)
    âœ˜ Test database Hash methods setObject() should do nothing if key is falsy (covered 0)
    âœ˜ Test database Hash methods setObject() should do nothing if data is falsy (covered 0)
    âœ˜ Test database Hash methods setObject() should not error if a key is empty string (covered 0)
    âœ˜ Test database Hash methods setObject() should work for field names with "." in them (covered 0)
    âœ˜ Test database Hash methods setObject() should set multiple keys to different objects (covered 0)
    âœ˜ Test database Hash methods setObject() should not error if object is empty (covered 0)
    âœ˜ Test database Hash methods setObject() should update existing object on second call (covered 0)
    âœ˜ Test database Hash methods setObjectField() should create a new object with field (covered 0)
    âœ˜ Test database Hash methods setObjectField() should add a new field to an object (covered 0)
    âœ˜ Test database Hash methods setObjectField() should set two objects fields to same data (covered 0)
    âœ˜ Test database Hash methods setObjectField() should work for field names with "." in them (covered 0)
    âœ˜ Test database Hash methods setObjectField() should work for field names with "." in them when they are cached (covered 0)
    âœ˜ Test database Hash methods getObject() should return falsy if object does not exist (covered 0)
    âœ˜ Test database Hash methods getObject() should retrieve an object (covered 0)
    âœ˜ Test database Hash methods getObject() should return null if key is falsy (covered 0)
    âœ˜ Test database Hash methods getObject() should return fields if given (covered 0)
    âœ˜ Test database Hash methods getObjects() should return 3 objects with correct data (covered 0)
    âœ˜ Test database Hash methods getObjects() should return fields if given (covered 0)
    âœ˜ Test database Hash methods getObjectField() should return falsy if object does not exist (covered 0)
    âœ˜ Test database Hash methods getObjectField() should return falsy if field does not exist (covered 0)
    âœ˜ Test database Hash methods getObjectField() should get an objects field (covered 0)
    âœ˜ Test database Hash methods getObjectField() should return null if key is falsy (covered 0)
    âœ˜ Test database Hash methods getObjectField() should return null and not error (covered 0)
    âœ˜ Test database Hash methods getObjectFields() should return an object with falsy values (covered 0)
    âœ˜ Test database Hash methods getObjectFields() should return an object with correct fields (covered 0)
    âœ˜ Test database Hash methods getObjectFields() should return null if key is falsy (covered 0)
    âœ˜ Test database Hash methods getObjectsFields() should return an array of objects with correct values (covered 0)
    âœ˜ Test database Hash methods getObjectsFields() should return undefined for all fields if object does not exist (covered 0)
    âœ˜ Test database Hash methods getObjectsFields() should return all fields if fields is empty array (covered 0)
    âœ˜ Test database Hash methods getObjectsFields() should return objects if fields is not an array (covered 0)
    âœ˜ Test database Hash methods getObjectKeys() should return an empty array for a object that does not exist (covered 0)
    âœ˜ Test database Hash methods getObjectKeys() should return an array of keys for the object's fields (covered 0)
    âœ˜ Test database Hash methods getObjectValues() should return an empty array for a object that does not exist (covered 0)
    âœ˜ Test database Hash methods getObjectValues() should return an array of values for the object's fields (covered 0)
    âœ˜ Test database Hash methods isObjectField() should return false if object does not exist (covered 0)
    âœ˜ Test database Hash methods isObjectField() should return false if field does not exist (covered 0)
    âœ˜ Test database Hash methods isObjectField() should return true if field exists (covered 0)
    âœ˜ Test database Hash methods isObjectField() should not error if field is falsy (covered 0)
    âœ˜ Test database Hash methods isObjectFields() should return an array of false if object does not exist (covered 0)
    âœ˜ Test database Hash methods isObjectFields() should return false if field does not exist (covered 0)
    âœ˜ Test database Hash methods isObjectFields() should not error if one field is falsy (covered 0)
    âœ˜ Test database Hash methods deleteObjectField() should delete an objects field (covered 0)
    âœ˜ Test database Hash methods deleteObjectField() should delete multiple fields of the object (covered 0)
    âœ˜ Test database Hash methods deleteObjectField() should delete multiple fields of multiple objects (covered 0)
    âœ˜ Test database Hash methods deleteObjectField() should not error if fields is empty array (covered 0)
    âœ˜ Test database Hash methods deleteObjectField() should not error if key is undefined (covered 0)
    âœ˜ Test database Hash methods deleteObjectField() should not error if key is null (covered 0)
    âœ˜ Test database Hash methods deleteObjectField() should not error if field is undefined (covered 0)
    âœ˜ Test database Hash methods deleteObjectField() should not error if one of the fields is undefined (covered 0)
    âœ˜ Test database Hash methods deleteObjectField() should not error if field is null (covered 0)
    âœ˜ Test database Hash methods incrObjectField() should set an objects field to 1 if object does not exist (covered 0)
    âœ˜ Test database Hash methods incrObjectField() should increment an object fields by 1 and return it (covered 0)
    âœ˜ Test database Hash methods decrObjectField() should set an objects field to -1 if object does not exist (covered 0)
    âœ˜ Test database Hash methods decrObjectField() should decrement an object fields by 1 and return it (covered 0)
    âœ˜ Test database Hash methods decrObjectField() should decrement multiple objects field by 1 and return an array of new values (covered 0)
    âœ˜ Test database Hash methods incrObjectFieldBy() should set an objects field to 5 if object does not exist (covered 0)
    âœ˜ Test database Hash methods incrObjectFieldBy() should increment an object fields by passed in value and return it (covered 0)
    âœ˜ Test database Hash methods incrObjectFieldBy() should return null if value is NaN (covered 0)
    âœ˜ Test database Hash methods incrObjectFieldByBulk should increment multiple object fields (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetScan should find matches in sorted set containing substring (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetScan should find matches in sorted set with scores (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetScan should find matches in sorted set with a limit (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetScan should work for special characters (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetScan should find everything starting with string (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetScan should find everything ending with string (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetAdd() should add an element to a sorted set (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetAdd() should add two elements to a sorted set (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetAdd() should gracefully handle adding the same element twice (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetAdd() should error if score is null (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetAdd() should error if any score is undefined (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetAdd() should add null value as `null` string (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsAdd() should add an element to two sorted sets (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsAdd() should add an element to two sorted sets with different scores (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsAdd() should error if keys.length is different than scores.length (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsAdd() should error if score is null (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsAdd() should error if scores has null (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetAddMulti() should add elements into multiple sorted sets with different scores (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetAddMulti() should not error if data is undefined (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetAddMulti() should error if score is null (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRange() should return the lowest scored element (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRange() should return elements sorted by score lowest to highest (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRange() should return empty array if set does not exist (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRange() should handle negative start/stop (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRange() should return empty array if keys is empty array (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRange() should return duplicates if two sets have same elements (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRange() should return correct number of elements (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRange() should work with big arrays (length > 100)  (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRevRange() should return the highest scored element (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRevRange() should return elements sorted by score highest to lowest (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRangeWithScores() should return array of elements sorted by score lowest to highest with scores (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRevRangeWithScores() should return array of elements sorted by score highest to lowest with scores (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRangeByScore() should get count elements with score between min max sorted by score lowest to highest (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRangeByScore() should return empty array if set does not exist (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRangeByScore() should return empty array if count is 0 (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRangeByScore() should return elements from 1 to end (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRangeByScore() should return elements from 3 to last (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRevRangeByScore() should get count elements with score between max min sorted by score highest to lowest (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRangeByScoreWithScores() should get count elements with score between min max sorted by score lowest to highest with scores (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRevRangeByScoreWithScores() should get count elements with score between max min sorted by score highest to lowest (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRevRangeByScoreWithScores() should work with an array of keys (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetCount() should return 0 for a sorted set that does not exist (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetCount() should return number of elements between scores min max inclusive (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetCount() should return number of elements between scores -inf +inf inclusive (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetCard() should return 0 for a sorted set that does not exist (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetCard() should return number of elements in a sorted set (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsCard() should return the number of elements in sorted sets (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsCard() should return empty array if keys is falsy (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsCard() should return empty array if keys is empty array (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsCardSum() should return the total number of elements in sorted sets (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsCardSum() should return 0 if keys is falsy (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsCardSum() should return 0 if keys is empty array (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsCardSum() should return the total number of elements in sorted set (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRank() should return falsy if sorted set does not exist (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRank() should return falsy if element isnt in sorted set (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRank() should return the rank of the element in the sorted set sorted by lowest to highest score (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRank() should return the rank sorted by the score and then the value (a) (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRank() should return the rank sorted by the score and then the value (b) (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRank() should return the rank sorted by the score and then the value (c) (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRevRank() should return falsy if sorted set doesnot exist (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRevRank() should return falsy if element isnt in sorted set (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRevRank() should return the rank of the element in the sorted set sorted by highest to lowest score (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsRanks() should return the ranks of values in sorted sets (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRanks() should return the ranks of values in a sorted set (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRanks() should return the ranks of values in a sorted set in reverse (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetScore() should return falsy if sorted set does not exist (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetScore() should return falsy if element is not in sorted set (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetScore() should return the score of an element (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetScore() should not error if key is undefined (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetScore() should not error if value is undefined (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsScore() should return the scores of value in sorted sets (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsScore() should return scores even if some keys are undefined (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsScore() should return empty array if keys is empty array (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetScores() should return 0 if score is 0 (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetScores() should return the scores of value in sorted sets (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetScores() should return scores even if some values are undefined (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetScores() should return empty array if values is an empty array (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetScores() should return scores properly (covered 0)
    âœ˜ Test database Sorted Set methods isSortedSetMember() should return false if sorted set does not exist (covered 0)
    âœ˜ Test database Sorted Set methods isSortedSetMember() should return false if element is not in sorted set (covered 0)
    âœ˜ Test database Sorted Set methods isSortedSetMember() should return true if element is in sorted set (covered 0)
    âœ˜ Test database Sorted Set methods isSortedSetMember() should return true if element is in sorted set with score 0 (covered 0)
    âœ˜ Test database Sorted Set methods isSortedSetMembers() should return an array of booleans indicating membership (covered 0)
    âœ˜ Test database Sorted Set methods isSortedSetMembers() should return true if element is in sorted set with score 0 (covered 0)
    âœ˜ Test database Sorted Set methods isMemberOfSortedSets should return true for members false for non members (covered 0)
    âœ˜ Test database Sorted Set methods isMemberOfSortedSets should return empty array if keys is empty array (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetsMembers should return members of a sorted set (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetsMembers should return members of multiple sorted sets (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetUnionCard should return the number of elements in the union (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetUnion() should return an array of values from both sorted sets sorted by scores lowest to highest (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetUnion() should return an array of values and scores from both sorted sets sorted by scores lowest to highest (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRevUnion() should return an array of values from both sorted sets sorted by scores highest to lowest (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetIncrBy() should create a sorted set with a field set to 1 (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetIncrBy() should increment a field of a sorted set by 5 (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetIncrBy() should increment fields of sorted sets with a single call (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetIncrBy() should increment the same field (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRemove() should remove an element from a sorted set (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRemove() should not think the sorted set exists if the last element is removed (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRemove() should remove multiple values from multiple keys (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRemove() should remove value from multiple keys (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRemove() should not remove anything if values is empty array (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRemove() should do a bulk remove (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRemove() should not remove wrong elements in bulk remove (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsRemove() should remove element from multiple sorted sets (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsRemoveRangeByScore() should remove elements with scores between min max inclusive (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetsRemoveRangeByScore() should remove elements with if strin score is passed in (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetIntersect should return the intersection of two sets (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetIntersect should return the intersection of two sets with scores (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetIntersect should return the reverse intersection of two sets (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetIntersect should return the intersection of two sets with scores aggregate MIN (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetIntersect should return the intersection of two sets with scores aggregate MAX (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetIntersect should return the intersection with scores modified by weights (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetIntersect should return empty array if sets do not exist (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetIntersect should return empty array if one set does not exist (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetIntersect should return correct results if sorting by different zset (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetIntersect should return correct results when intersecting big zsets (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetIntersectCard should return # of elements in intersection (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetIntersectCard should return 0 if intersection is empty (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRangeByLex should return an array of all values (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRangeByLex should return an array with an inclusive range by default (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRangeByLex should return an array with an inclusive range (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRangeByLex should return an array with an exclusive range (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRangeByLex should return an array limited to the first two values (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRangeByLex should return correct result (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRevRangeByLex should return an array of all values reversed (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRevRangeByLex should return an array with an inclusive range by default reversed (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRevRangeByLex should return an array with an inclusive range reversed (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRevRangeByLex should return an array with an exclusive range reversed (covered 0)
    âœ˜ Test database Sorted Set methods getSortedSetRevRangeByLex should return an array limited to the first two values reversed (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetLexCount should return the count of all values (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetLexCount should return the count with an inclusive range by default (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetLexCount should return the count with an inclusive range (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetLexCount should return the count with an exclusive range (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRemoveRangeByLex should remove an inclusive range by default (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRemoveRangeByLex should remove an inclusive range (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRemoveRangeByLex should remove an exclusive range (covered 0)
    âœ˜ Test database Sorted Set methods sortedSetRemoveRangeByLex should remove all values (covered 0)
  emailer.js
    âœ˜ emailer plugin hook should work (covered 0)
    âœ˜ emailer should build custom template on config change (covered 0)
    âœ˜ emailer should send via SMTP (covered 0)
    âœ˜ emailer emailer.send() should not send email to a banned user (covered 0)
    âœ˜ emailer emailer.send() should return true if the template is "banned" (covered 0)
    ~ emailer emailer.send() should return true if system settings allow sending to banned users (covered 774)
  feeds.js
    ~ feeds should 404 (covered 31)
    ~ feeds should 404 if topic does not exist (covered 112)
    ~ feeds should 404 if category id is not a number (covered 31)
    ~ feeds should redirect if we do not have read privilege (covered 131)
    ~ feeds should 404 if user is not found (covered 31)
    ~ feeds private feeds and tokens should load feed if its not private (covered 456)
    ~ feeds private feeds and tokens should not allow access if uid or token is missing (covered 31)
    ~ feeds private feeds and tokens should not allow access if token is wrong (covered 31)
    ~ feeds private feeds and tokens should allow access if token is correct (covered 31)
    ~ feeds private feeds and tokens should not allow access if token is correct but has no privilege (covered 31)
  file.js
    âœ˜ file should walk directory (covered 0)
    âœ˜ file should convert mime type to extension (covered 0)
    âœ˜ file copyFile should copy a file (covered 0)
    âœ˜ file copyFile should override an existing file (covered 0)
    âœ˜ file copyFile should error if source file does not exist (covered 0)
    âœ˜ file copyFile should error if existing file is read only (covered 0)
    âœ˜ file saveFileToLocal should work (covered 0)
    âœ˜ file saveFileToLocal should error if source does not exist (covered 0)
    ~ file saveFileToLocal should error if folder is relative (covered 774)
  flags.js
    ~ Flags .create() should create a flag and return its data (covered 155)
    âœ˜ Flags .create() should add the flag to the byCid zset for category 1 if it is of type post (covered 0)
    âœ˜ Flags .create() should add the flag to the byPid zset for pid 1 if it is of type post (covered 0)
    âœ˜ Flags .exists() should return Boolean True if a flag matching the flag hash already exists (covered 0)
    âœ˜ Flags .exists() should return Boolean False if a flag matching the flag hash does not already exists (covered 0)
    âœ˜ Flags .targetExists() should return Boolean True if the targeted element exists (covered 0)
    âœ˜ Flags .targetExists() should return Boolean False if the targeted element does not exist (covered 0)
    ~ Flags .get() should retrieve and display a flag's data (covered 94)
    ~ Flags .get() should show user history for admins (covered 94)
    ~ Flags .get() should show user history for global moderators (covered 94)
    ~ Flags .get() should NOT show user history for regular moderators (covered 94)
    ~ Flags .list() should show a list of flags (with one item) (covered 94)
    âœ˜ Flags .list() (with filters) should return a filtered list of flags if said filters are passed in (covered 0)
    âœ˜ Flags .list() (with filters) should return no flags if a filter with no matching flags is used (covered 0)
    âœ˜ Flags .list() (with filters) should return a flag when filtered by cid 1 (covered 0)
    âœ˜ Flags .list() (with filters) shouldn't return a flag when filtered by cid 2 (covered 0)
    âœ˜ Flags .list() (with filters) should return a flag when filtered by both cid 1 and 2 (covered 0)
    âœ˜ Flags .list() (with filters) should return one flag if filtered by both cid 1 and 2 and open state (covered 0)
    ~ Flags .list() (with filters) should return no flag if filtered by both cid 1 and 2 and non-open state (covered 470)
    âœ˜ Flags .list() (with sort) should return sorted flags latest first if no sort is passed in (covered 0)
    âœ˜ Flags .list() (with sort) should return sorted flags oldest first if "oldest" sort is passed in (covered 0)
    âœ˜ Flags .list() (with sort) should return flags with more reports first if "reports" sort is passed in (covered 0)
    âœ˜ Flags .update() should alter a flag's various attributes and persist them to the database (covered 0)
    âœ˜ Flags .update() should persist to the flag's history (covered 0)
    ~ Flags .update() should allow assignment if user is an admin and do nothing otherwise (covered 61)
    ~ Flags .update() should allow assignment if user is a global mod and do nothing otherwise (covered 61)
    ~ Flags .update() should allow assignment if user is a mod of the category, do nothing otherwise (covered 61)
    âœ˜ Flags .update() should do nothing when you attempt to set a bogus state (covered 0)
    ~ Flags .update() resolve/reject should rescind notification if flag is resolved (covered 868)
    ~ Flags .update() resolve/reject should rescind notification if flag is rejected (covered 868)
    ~ Flags .update() resolve/reject should do nothing if flag is resolved but ACP action is not "rescind" (covered 868)
    ~ Flags .update() resolve/reject should do nothing if flag is rejected but ACP action is not "rescind" (covered 868)
    ~ Flags .getTarget() should return a post's data if queried with type "post" (covered 96)
    âœ˜ Flags .getTarget() should return a user's data if queried with type "user" (covered 0)
    âœ˜ Flags .getTarget() should return a plain object with no properties if the target no longer exists (covered 0)
    ~ Flags .validate() should error out if type is post and post is deleted (covered 249)
    ~ Flags .validate() should not pass validation if flag threshold is set and user rep does not meet it (covered 162)
    ~ Flags .validate() should not error if user blocked target (covered 868)
    ~ Flags .validate() should send back error if reporter does not exist (covered 96)
    âœ˜ Flags .appendNote() should add a note to a flag (covered 0)
    âœ˜ Flags .appendNote() should be a JSON string (covered 0)
    âœ˜ Flags .appendNote() should insert a note in the past if a datetime is passed in (covered 0)
    âœ˜ Flags .getNotes() return should match a predefined spec (covered 0)
    âœ˜ Flags .getNotes() should retrieve a list of notes, from newest to oldest (covered 0)
    âœ˜ Flags .appendHistory() should add a new entry into a flag's history (covered 0)
    ~ Flags .getHistory() should retrieve a flag's history (covered 774)
    ~ Flags (v3 API) .create() should create a flag with no errors (covered 164)
    ~ Flags (v3 API) .create() should escape flag reason (covered 476)
    ~ Flags (v3 API) .create() should not allow flagging post in private category (covered 864)
    ~ Flags (v3 API) .update() should update a flag's properties (covered 61)
    ~ Flags (v3 API) .appendNote() should append a note to the flag (covered 61)
    ~ Flags (v3 API) .deleteNote() should delete a note from a flag (covered 61)
    ~ Flags (v3 API) access control should not allow access to privileged flag endpoints to guests (covered 857)
    ~ Flags (v3 API) access control should not allow access to privileged flag endpoints to regular users (covered 857)
    ~ Flags (v3 API) access control should allow access to privileged endpoints to administrators (covered 857)
    ~ Flags (v3 API) access control should allow access to privileged endpoints to global moderators (covered 857)
    ~ Flags (v3 API) access control should allow access to privileged endpoints to moderators if the flag target is a post in a cid they moderate (covered 857)
    ~ Flags (v3 API) access control should NOT allow access to privileged endpoints to moderators if the flag target is a post in a cid they DO NOT moderate (covered 857)
  groups.js
    âœ˜ Groups .list() should list the groups present (covered 0)
    âœ˜ Groups .get() with no options, should show group information (covered 0)
    âœ˜ Groups .get() should return null if group does not exist (covered 0)
    âœ˜ Groups .search() should return empty array if query is falsy (covered 0)
    âœ˜ Groups .search() should return the groups when search query is empty (covered 0)
    âœ˜ Groups .search() should return the "Test" group when searched for (covered 0)
    âœ˜ Groups .search() should return the "Test" group when searched for and sort by member count (covered 0)
    âœ˜ Groups .search() should return the "Test" group when searched for and sort by creation time (covered 0)
    âœ˜ Groups .search() should return all users if no query (covered 0)
    âœ˜ Groups .search() should search group members (covered 0)
    âœ˜ Groups .search() should not return hidden groups (covered 0)
    âœ˜ Groups .isMember() should return boolean true when a user is in a group (covered 0)
    âœ˜ Groups .isMember() should return boolean false when a user is not in a group (covered 0)
    âœ˜ Groups .isMember() should return true for uid 0 and guests group (covered 0)
    âœ˜ Groups .isMemberOfGroupList should report that a user is part of a groupList, if they are (covered 0)
    âœ˜ Groups .isMemberOfGroupList should report that a user is not part of a groupList, if they are not (covered 0)
    âœ˜ Groups .exists() should verify that the test group exists (covered 0)
    âœ˜ Groups .exists() should verify that a fake group does not exist (covered 0)
    âœ˜ Groups .exists() should check if group exists using an array (covered 0)
    âœ˜ Groups .create() should create another group (covered 0)
    âœ˜ Groups .create() should create a hidden group if hidden is 1 (covered 0)
    âœ˜ Groups .create() should create a visible group if hidden is 0 (covered 0)
    âœ˜ Groups .create() should create a visible group if hidden is not passed in (covered 0)
    âœ˜ Groups .create() should fail to create group with duplicate group name (covered 0)
    âœ˜ Groups .create() should fail to create group if slug is empty (covered 0)
    âœ˜ Groups .create() should fail if group name is invalid (covered 0)
    âœ˜ Groups .create() should not create a system group (covered 0)
    âœ˜ Groups .create() should return falsy for userTitleEnabled (covered 0)
    âœ˜ Groups .hide() should mark the group as hidden (covered 0)
    âœ˜ Groups .update() should change an aspect of a group (covered 0)
    âœ˜ Groups .update() should rename a group and not break navigation routes (covered 0)
    âœ˜ Groups .update() should fail if system groups is being renamed (covered 0)
    âœ˜ Groups .update() should fail to rename if group name is invalid (covered 0)
    âœ˜ Groups .update() should fail to rename if group name is too short (covered 0)
    âœ˜ Groups .update() should fail to rename if group name is too long (covered 0)
    âœ˜ Groups .update() should fail to rename group to an existing group (covered 0)
    âœ˜ Groups .destroy() should destroy a group (covered 0)
    âœ˜ Groups .destroy() should also remove the members set (covered 0)
    âœ˜ Groups .destroy() should remove group from privilege groups (covered 0)
    âœ˜ Groups .join() should add a user to a group (covered 0)
    âœ˜ Groups .join() should fail to add user to admin group (covered 0)
    âœ˜ Groups .join() should fail to add user to group if group name is invalid (covered 0)
    âœ˜ Groups .join() should fail to add user to group if uid is invalid (covered 0)
    âœ˜ Groups .join() should add user to Global Moderators group (covered 0)
    âœ˜ Groups .join() should add user to multiple groups (covered 0)
    âœ˜ Groups .join() should set group title when user joins the group (covered 0)
    âœ˜ Groups .join() should fail to add user to system group (covered 0)
    âœ˜ Groups .join() should allow admins to join private groups (covered 0)
    âœ˜ Groups .leave() should remove a user from a group (covered 0)
    âœ˜ Groups .leaveAllGroups() should remove a user from all groups (covered 0)
    âœ˜ Groups .show() should make a group visible (covered 0)
    âœ˜ Groups .hide() should make a group hidden (covered 0)
    âœ˜ Groups socket methods should error if data is null (covered 0)
    âœ˜ Groups socket methods should not error if data is valid (covered 0)
    âœ˜ Groups socket methods should return error if not logged in (covered 0)
    âœ˜ Groups socket methods should return error if group name is special (covered 0)
    âœ˜ Groups socket methods should error if group does not exist (covered 0)
    âœ˜ Groups socket methods should join test group (covered 0)
    âœ˜ Groups socket methods should error if not logged in (covered 0)
    âœ˜ Groups socket methods should leave test group (covered 0)
    âœ˜ Groups socket methods should fail to join if group is private and join requests are disabled (covered 0)
    âœ˜ Groups socket methods should fail to leave if group is private and leave is disabled (covered 0)
    âœ˜ Groups socket methods should join if user is admin (covered 0)
    âœ˜ Groups socket methods should request membership for regular user (covered 0)
    âœ˜ Groups socket methods should reject membership of user (covered 0)
    âœ˜ Groups socket methods should error if not owner or admin (covered 0)
    âœ˜ Groups socket methods should accept membership of user (covered 0)
    âœ˜ Groups socket methods should reject/accept all memberships requests (covered 0)
    âœ˜ Groups socket methods should issue invite to user (covered 0)
    âœ˜ Groups socket methods should fail with invalid data (covered 0)
    âœ˜ Groups socket methods should issue mass invite to users (covered 0)
    âœ˜ Groups socket methods should rescind invite (covered 0)
    âœ˜ Groups socket methods should error if user is not invited (covered 0)
    âœ˜ Groups socket methods should accept invite (covered 0)
    âœ˜ Groups socket methods should reject invite (covered 0)
    âœ˜ Groups socket methods should grant ownership to user (covered 0)
    âœ˜ Groups socket methods should rescind ownership from user (covered 0)
    âœ˜ Groups socket methods should fail to kick user with invalid data (covered 0)
    âœ˜ Groups socket methods should kick user from group (covered 0)
    âœ˜ Groups socket methods should fail to create group with invalid data (covered 0)
    âœ˜ Groups socket methods should fail to create group if group creation is disabled (covered 0)
    âœ˜ Groups socket methods should fail to create group if name is privilege group (covered 0)
    âœ˜ Groups socket methods should create/update group (covered 0)
    âœ˜ Groups socket methods should fail to create a group with name guests (covered 0)
    âœ˜ Groups socket methods should fail to rename guests group (covered 0)
    âœ˜ Groups socket methods should delete group (covered 0)
    âœ˜ Groups socket methods should fail to delete group if name is special (covered 0)
    âœ˜ Groups socket methods should fail to load more groups with invalid data (covered 0)
    âœ˜ Groups socket methods should load more groups (covered 0)
    âœ˜ Groups socket methods should fail to load more members with invalid data (covered 0)
    âœ˜ Groups socket methods should load more members (covered 0)
    âœ˜ Groups api methods should fail to create group with invalid data (covered 0)
    âœ˜ Groups api methods should fail to create group if group name is privilege group (covered 0)
    âœ˜ Groups api methods should create a group (covered 0)
    âœ˜ Groups api methods should fail to join with invalid data (covered 0)
    âœ˜ Groups api methods should add user to group (covered 0)
    âœ˜ Groups api methods should not error if user is already member (covered 0)
    âœ˜ Groups api methods it should fail with invalid data (covered 0)
    âœ˜ Groups api methods it should fail if admin tries to remove self (covered 0)
    âœ˜ Groups api methods should not error if user is not member (covered 0)
    âœ˜ Groups api methods should fail if trying to remove someone else from group (covered 0)
    âœ˜ Groups api methods should remove user from group (covered 0)
    âœ˜ Groups api methods should fail with invalid data (covered 0)
    âœ˜ Groups api methods should update group (covered 0)
    âœ˜ Groups groups cover should fail if user is not logged in or not owner (covered 0)
    âœ˜ Groups groups cover should upload group cover image from file (covered 0)
    âœ˜ Groups groups cover should upload group cover image from data (covered 0)
    âœ˜ Groups groups cover should fail to upload group cover with invalid image (covered 0)
    âœ˜ Groups groups cover should update group cover position (covered 0)
    âœ˜ Groups groups cover should fail to update cover position if group name is missing (covered 0)
    âœ˜ Groups groups cover should fail to remove cover if not logged in (covered 0)
    âœ˜ Groups groups cover should fail to remove cover if not owner (covered 0)
    âœ˜ Groups groups cover should remove cover (covered 0)
  i18n.js
    âœ˜ i18n should contain folders named after the language code (covered 0)
    âœ˜ i18n  (covered 0)
  image.js
    âœ˜ image should normalise image (covered 0)
    âœ˜ image should resize an image (covered 0)
  locale-detect.js
    âœ˜ Language detection should detect the language for a guest (covered 0)
    âœ˜ Language detection should do nothing when disabled (covered 0)
  messaging.js
    âœ˜ Messaging Library .canMessage() should allow messages to be sent to an unrestricted user (covered 0)
    âœ˜ Messaging Library .canMessage() should NOT allow messages to be sent to a restricted user (covered 0)
    âœ˜ Messaging Library .canMessage() should always allow admins through (covered 0)
    âœ˜ Messaging Library .canMessage() should allow messages to be sent to a restricted user if restricted user follows sender (covered 0)
    âœ˜ Messaging Library rooms should fail to create a new chat room with invalid data (covered 0)
    âœ˜ Messaging Library rooms should return rate limit error on second try (covered 0)
    âœ˜ Messaging Library rooms should create a new chat room (covered 0)
    âœ˜ Messaging Library rooms should send a user-join system message when a chat room is created (covered 0)
    âœ˜ Messaging Library rooms should fail to add user to room with invalid data (covered 0)
    âœ˜ Messaging Library rooms should add a user to room (covered 0)
    âœ˜ Messaging Library rooms should get users in room (covered 0)
    âœ˜ Messaging Library rooms should throw error if user is not in room (covered 0)
    âœ˜ Messaging Library rooms should fail to add users to room if max is reached (covered 0)
    âœ˜ Messaging Library rooms should fail to add users to room if user does not exist (covered 0)
    âœ˜ Messaging Library rooms should fail to add self to room (covered 0)
    âœ˜ Messaging Library rooms should fail to leave room with invalid data (covered 0)
    âœ˜ Messaging Library rooms should leave the chat room (covered 0)
    âœ˜ Messaging Library rooms should send a user-leave system message when a user leaves the chat room (covered 0)
    âœ˜ Messaging Library rooms should not send a user-leave system message when a user tries to leave a room they are not in (covered 0)
    âœ˜ Messaging Library rooms should change owner when owner leaves room (covered 0)
    âœ˜ Messaging Library rooms should change owner if owner is deleted (covered 0)
    âœ˜ Messaging Library rooms should fail to remove user from room (covered 0)
    âœ˜ Messaging Library rooms should fail to remove user from room if user does not exist (covered 0)
    âœ˜ Messaging Library rooms should remove user from room (covered 0)
    âœ˜ Messaging Library rooms should fail to send a message to room with invalid data (covered 0)
    âœ˜ Messaging Library rooms should fail to send chat if content is empty (covered 0)
    âœ˜ Messaging Library rooms should send a message to a room (covered 0)
    âœ˜ Messaging Library rooms should fail to send second message due to rate limit (covered 0)
    âœ˜ Messaging Library rooms should return invalid-data error (covered 0)
    âœ˜ Messaging Library rooms should return not allowed error if mid is not in room (covered 0)
    âœ˜ Messaging Library rooms should notify offline users of message (covered 0)
    âœ˜ Messaging Library rooms should fail to get messages from room with invalid data (covered 0)
    âœ˜ Messaging Library rooms should get messages from room (covered 0)
    âœ˜ Messaging Library rooms should fail to mark read with invalid data (covered 0)
    âœ˜ Messaging Library rooms should not error if user is not in room (covered 0)
    âœ˜ Messaging Library rooms should mark room read (covered 0)
    âœ˜ Messaging Library rooms should mark all rooms read (covered 0)
    âœ˜ Messaging Library rooms should fail to rename room with invalid data (covered 0)
    âœ˜ Messaging Library rooms should rename room (covered 0)
    âœ˜ Messaging Library rooms should send a room-rename system message when a room is renamed (covered 0)
    âœ˜ Messaging Library rooms should fail to load room with invalid-data (covered 0)
    âœ˜ Messaging Library rooms should fail to load room if user is not in (covered 0)
    âœ˜ Messaging Library rooms should load chat room (covered 0)
    âœ˜ Messaging Library rooms should return true if user is dnd (covered 0)
    âœ˜ Messaging Library rooms should fail to load recent chats with invalid data (covered 0)
    âœ˜ Messaging Library rooms should load recent chats of user (covered 0)
    âœ˜ Messaging Library rooms should escape teaser (covered 0)
    âœ˜ Messaging Library rooms should fail to check if user has private chat with invalid data (covered 0)
    âœ˜ Messaging Library rooms should check if user has private chat with another uid (covered 0)
    âœ˜ Messaging Library edit/delete should fail to edit message with invalid data (covered 0)
    âœ˜ Messaging Library edit/delete should fail to edit message if new content is empty string (covered 0)
    âœ˜ Messaging Library edit/delete should fail to edit message if not own message (covered 0)
    âœ˜ Messaging Library edit/delete should fail to edit message if message not in room (covered 0)
    âœ˜ Messaging Library edit/delete should edit message (covered 0)
    âœ˜ Messaging Library edit/delete should fail to delete message with invalid data (covered 0)
    âœ˜ Messaging Library edit/delete should fail to delete message if not owner (covered 0)
    âœ˜ Messaging Library edit/delete should mark the message as deleted (covered 0)
    âœ˜ Messaging Library edit/delete should show deleted message to original users (covered 0)
    âœ˜ Messaging Library edit/delete should not show deleted message to other users (covered 0)
    âœ˜ Messaging Library edit/delete should error out if a message is deleted again (covered 0)
    âœ˜ Messaging Library edit/delete should restore the message (covered 0)
    âœ˜ Messaging Library edit/delete should error out if a message is restored again (covered 0)
    âœ˜ Messaging Library edit/delete disabled via ACP should error out for regular users (covered 0)
    âœ˜ Messaging Library edit/delete disabled via ACP should succeed for administrators (covered 0)
    âœ˜ Messaging Library edit/delete disabled via ACP should succeed for global moderators (covered 0)
    ~ Messaging Library controller should 404 if chat is disabled (covered 31)
    âœ˜ Messaging Library controller should 500 for guest with no privilege error (covered 0)
    ~ Messaging Library controller should 404 for non-existent user (covered 103)
    âœ˜ Messaging Library logged in chat controller should return chats page data (covered 0)
    âœ˜ Messaging Library logged in chat controller should return room data (covered 0)
    âœ˜ Messaging Library logged in chat controller should redirect to chats page (covered 0)
    âœ˜ Messaging Library logged in chat controller should return 404 if user is not in room (covered 0)
  meta.js
    âœ˜ meta should log targets (covered 0)
    âœ˜ meta settings it should set setting (covered 0)
    âœ˜ meta settings it should get setting (covered 0)
    âœ˜ meta settings should not set setting if not empty (covered 0)
    âœ˜ meta settings should set setting if empty (covered 0)
    âœ˜ meta settings should set one and get one (covered 0)
    âœ˜ meta settings should return null if setting field does not exist (covered 0)
    âœ˜ meta settings should set setting with sorted list (covered 0)
    âœ˜ meta settings should get setting with sorted list (covered 0)
    âœ˜ meta settings should not set setting with sorted list if not empty (covered 0)
    âœ˜ meta settings should set setting with sorted list if empty (covered 0)
    âœ˜ meta settings should set one and get one sorted list (covered 0)
    âœ˜ meta config should get config fields (covered 0)
    âœ˜ meta config should get the correct type and default value (covered 0)
    âœ˜ meta config should get the correct type and correct value (covered 0)
    âœ˜ meta config should get the correct value (covered 0)
    âœ˜ meta config should use default value if value is null (covered 0)
    âœ˜ meta config should fail if field is invalid (covered 0)
    âœ˜ meta config should fail if data is invalid (covered 0)
    âœ˜ meta config should set multiple config values (covered 0)
    âœ˜ meta config should set config value (covered 0)
    âœ˜ meta config should get back string if field is not in defaults (covered 0)
    âœ˜ meta config should set boolean config value (covered 0)
    âœ˜ meta config should set string config value (covered 0)
    âœ˜ meta config should set multiple values (covered 0)
    âœ˜ meta config should not set config if not empty (covered 0)
    âœ˜ meta config should remove config field (covered 0)
    âœ˜ meta session TTL should return 14 days in seconds (covered 0)
    âœ˜ meta session TTL should return 7 days in seconds (covered 0)
    âœ˜ meta session TTL should return 2 days in seconds (covered 0)
    âœ˜ meta dependencies should return ENOENT if module is not found (covered 0)
    âœ˜ meta dependencies should not error if module is a nodebb-plugin-* (covered 0)
    âœ˜ meta dependencies should not error if module is nodebb-theme-* (covered 0)
    âœ˜ meta dependencies should parse json package data (covered 0)
    âœ˜ meta dependencies should return null data with invalid json (covered 0)
    âœ˜ meta dependencies should return false if moduleData is falsy (covered 0)
    âœ˜ meta dependencies should return false if moduleData doesnt not satisfy package.json (covered 0)
    âœ˜ meta dependencies should return true if _resolved is from github (covered 0)
    âœ˜ meta debugFork should detect debugging (covered 0)
    âœ˜ meta Access-Control-Allow-Origin Access-Control-Allow-Origin header should be empty (covered 0)
    âœ˜ meta Access-Control-Allow-Origin should set proper Access-Control-Allow-Origin header (covered 0)
    âœ˜ meta Access-Control-Allow-Origin Access-Control-Allow-Origin header should be empty if origin does not match (covered 0)
    âœ˜ meta Access-Control-Allow-Origin should not error with invalid regexp (covered 0)
  middleware.js
    âœ˜ Middlewares expose should expose res.locals.isAdmin = false (covered 0)
    âœ˜ Middlewares expose should expose res.locals.isAdmin = true (covered 0)
    âœ˜ Middlewares expose should expose privileges in res.locals.privileges and isSelf=true (covered 0)
    âœ˜ Middlewares expose should expose privileges in res.locals.privileges and isSelf=false (covered 0)
    âœ˜ Middlewares expose should expose privilege set (covered 0)
    ~ Middlewares cache-control header should be absent on non-existent routes, for guests (covered 31)
    ~ Middlewares cache-control header should be set to "private" on non-existent routes, for logged in users (covered 85)
    ~ Middlewares cache-control header should be absent on regular routes, for guests (covered 31)
    âœ˜ Middlewares cache-control header should be absent on api routes, for guests (covered 0)
    ~ Middlewares cache-control header should be set to "private" on regular routes, for logged-in users (covered 85)
    âœ˜ Middlewares cache-control header should be set to "private" on api routes, for logged-in users (covered 0)
    âœ˜ Middlewares cache-control header should be set to "private" on apiv3 routes, for logged-in users (covered 0)
  notifications.js
    âœ˜ Notifications should fail to create notification without a nid (covered 0)
    âœ˜ Notifications should create a notification (covered 0)
    âœ˜ Notifications should return null if pid is same and importance is lower (covered 0)
    âœ˜ Notifications should get empty array (covered 0)
    âœ˜ Notifications should get notifications (covered 0)
    âœ˜ Notifications should do nothing (covered 0)
    âœ˜ Notifications should push a notification to uid (covered 0)
    âœ˜ Notifications should push a notification to a group (covered 0)
    âœ˜ Notifications should push a notification to groups (covered 0)
    âœ˜ Notifications should not mark anything with invalid uid or nid (covered 0)
    âœ˜ Notifications should mark a notification read (covered 0)
    âœ˜ Notifications should error if notification does not exist (covered 0)
    âœ˜ Notifications should mark a notification unread (covered 0)
    âœ˜ Notifications should mark all notifications read (covered 0)
    âœ˜ Notifications should not do anything (covered 0)
    ~ Notifications should link to the first unread post in a watched topic (covered 872)
    âœ˜ Notifications should get notification by nid (covered 0)
    âœ˜ Notifications should get user's notifications (covered 0)
    âœ˜ Notifications should error if not logged in (covered 0)
    âœ˜ Notifications should delete all user notifications (covered 0)
    âœ˜ Notifications should return empty with falsy uid (covered 0)
    âœ˜ Notifications should get all notifications and filter (covered 0)
    âœ˜ Notifications should not get anything if notifications does not exist (covered 0)
    âœ˜ Notifications should get daily notifications (covered 0)
    âœ˜ Notifications should return empty array for invalid interval (covered 0)
    âœ˜ Notifications should return 0 for falsy uid (covered 0)
    âœ˜ Notifications should not do anything if uid is falsy (covered 0)
    ~ Notifications should send notification to followers of user when he posts (covered 774)
    âœ˜ Notifications should send welcome notification (covered 0)
    âœ˜ Notifications should prune notifications (covered 0)
  package-install.js
    âœ˜ Package install lib updatePackageFile() should remove non-`nodebb-` modules not specified in `install/package.json` (covered 0)
    âœ˜ Package install lib updatePackageFile() should merge new root level properties from `install/package.json` into `package.json` (covered 0)
    âœ˜ Package install lib updatePackageFile() should add new dependencies (covered 0)
    âœ˜ Package install lib updatePackageFile() should update version on dependencies (covered 0)
    âœ˜ Package install lib updatePackageFile() should deep merge nested objects (covered 0)
    âœ˜ Package install lib updatePackageFile() should remove extraneous devDependencies (covered 0)
    âœ˜ Package install lib updatePackageFile() should handle if there is no package.json (covered 0)
  pagination.js
    âœ˜ Pagination should create empty pagination for 1 page (covered 0)
    âœ˜ Pagination should create pagination for 10 pages (covered 0)
    âœ˜ Pagination should create pagination for 3 pages with query params (covered 0)
  password.js
    ~ Password .hash() should return a password hash when called (covered 774)
  posts.js
    ~ Post's should update category teaser properly (covered 944)
    ~ Post's should change owner of post and topic properly (covered 878)
    âœ˜ Post's should fail to change owner if new owner does not exist (covered 0)
    âœ˜ Post's should fail to change owner if user is not authorized (covered 0)
    âœ˜ Post's should return falsy if post does not exist (covered 0)
    ~ Post's should get recent poster uids (covered 387)
    âœ˜ Post's should error if user does not exist (covered 0)
    ~ Post's voting should increase reputation by more since upvote from original poster (covered 869)
    ~ Post's voting should fail to upvote post if group does not have upvote permission (covered 61)
    ~ Post's voting should upvote a post (covered 78)
    ~ Post's voting should add the pid to the :votes sorted set for that user (covered 61)
    âœ˜ Post's voting should get voters (covered 0)
    âœ˜ Post's voting should get upvoters (covered 0)
    ~ Post's voting should unvote a post (covered 61)
    ~ Post's voting should downvote a post (covered 63)
    ~ Post's voting should prevent downvoting more than total daily limit (covered 387)
    ~ Post's voting should prevent downvoting target user more than total daily limit (covered 387)
    âœ˜ Post's bookmarking should bookmark a post (covered 0)
    âœ˜ Post's bookmarking should unbookmark a post (covered 0)
    âœ˜ Post's post tools should error if data is invalid (covered 0)
    ~ Post's post tools should load post tools (covered 874)
    âœ˜ Post's delete/restore/purge should error with invalid data (covered 0)
    ~ Post's delete/restore/purge should delete a post (covered 171)
    ~ Post's delete/restore/purge should not see post content if global mod does not have posts:view_deleted privilege (covered 721)
    ~ Post's delete/restore/purge should restore a post (covered 160)
    ~ Post's delete/restore/purge should delete topic if last main post is deleted (covered 954)
    ~ Post's delete/restore/purge should purge posts and purge topic (covered 1087)
    âœ˜ Post's edit should error if user is not logged in (covered 0)
    âœ˜ Post's edit should error if data is invalid or missing (covered 0)
    âœ˜ Post's edit should error if title is too short (covered 0)
    âœ˜ Post's edit should error if title is too long (covered 0)
    ~ Post's edit should error with too few tags (covered 116)
    ~ Post's edit should error with too many tags (covered 120)
    âœ˜ Post's edit should error if content is too short (covered 0)
    âœ˜ Post's edit should error if content is too long (covered 0)
    ~ Post's edit should edit post (covered 353)
    ~ Post's edit should disallow post editing for new users if post was made past the threshold for editing (covered 61)
    ~ Post's edit should edit a deleted post (covered 423)
    ~ Post's edit should edit a reply post (covered 137)
    âœ˜ Post's edit should return diffs (covered 0)
    ~ Post's edit should load diffs and reconstruct post (covered 87)
    ~ Post's edit should not allow guests to view diffs (covered 57)
    ~ Post's edit should allow registered-users group to view diffs (covered 61)
    ~ Post's edit should not delete first diff of a post (covered 87)
    ~ Post's edit should delete a post diff (covered 137)
    ~ Post's edit should load (oldest) diff and reconstruct post correctly after a diff deletion (covered 863)
    ~ Post's move should error if uid is not logged in (covered 10)
    âœ˜ Post's move should error if data is invalid (covered 0)
    ~ Post's move should error if user does not have move privilege (covered 61)
    ~ Post's move should move a post (covered 287)
    ~ Post's move should fail to move post if not moderator of target category (covered 777)
    âœ˜ Post's getPostSummaryByPids should return empty array for empty pids (covered 0)
    ~ Post's getPostSummaryByPids should get post summaries (covered 84)
    âœ˜ Post's parse should not crash and return falsy if post data is falsy (covered 0)
    âœ˜ Post's parse should store post content in cache (covered 0)
    âœ˜ Post's parse should parse signature and remove links and images (covered 0)
    ~ Post's parse should turn relative links in post body to absolute urls (covered 390)
    âœ˜ Post's socket methods should error with invalid data (covered 0)
    âœ˜ Post's socket methods should error with invalid tid (covered 0)
    ~ Post's socket methods should fail to get raw post because of privilege (covered 61)
    ~ Post's socket methods should fail to get raw post because post is deleted (covered 61)
    ~ Post's socket methods should get raw post content (covered 61)
    ~ Post's socket methods should get post (covered 57)
    ~ Post's socket methods should get post category (covered 61)
    âœ˜ Post's socket methods should get pid index (covered 0)
    ~ Post's socket methods should get pid index in reverse (covered 390)
    âœ˜ Post's filterPidsByCid should return pids as is if cid is falsy (covered 0)
    âœ˜ Post's filterPidsByCid should filter pids by single cid (covered 0)
    âœ˜ Post's filterPidsByCid should filter pids by multiple cids (covered 0)
    ~ Post's post queue should add topic to post queue (covered 71)
    ~ Post's post queue should add reply to post queue (covered 90)
    ~ Post's post queue should load queued posts (covered 62)
    âœ˜ Post's post queue should error if data is invalid (covered 0)
    ~ Post's post queue should edit post in queue (covered 62)
    ~ Post's post queue should edit topic title in queue (covered 62)
    ~ Post's post queue should edit topic category in queue (covered 62)
    ~ Post's post queue should prevent regular users from approving posts (covered 61)
    âœ˜ Post's post queue should prevent regular users from approving non existing posts (covered 0)
    ~ Post's post queue should accept queued posts and submit (covered 862)
    âœ˜ Post's post queue should not crash if id does not exist (covered 0)
    ~ Post's post queue should bypass post queue if user is in exempt group (covered 777)
    ~ Post's post queue should update queued post's topic if target topic is merged (covered 947)
    ~ Post's Topic Backlinks .syncBacklinks() should error on invalid data (covered 6)
    ~ Post's Topic Backlinks .syncBacklinks() should do nothing if the post does not contain a link to a topic (covered 23)
    ~ Post's Topic Backlinks .syncBacklinks() should create a backlink if it detects a topic link in a post (covered 204)
    ~ Post's Topic Backlinks .syncBacklinks() should remove the backlink (but keep the event) if the post no longer contains a link to a topic (covered 171)
    ~ Post's Topic Backlinks integration tests should create a topic event in the referenced topic (covered 893)
    ~ Post's Topic Backlinks integration tests should not create a topic event if referenced topic is the same as current topic (covered 482)
    ~ Post's Topic Backlinks integration tests should not show backlink events if the feature is disabled (covered 868)
    âœ˜ Posts' subfolder tests (covered 0)
  pubsub.js
    âœ˜ pubsub should use the plain event emitter (covered 0)
    âœ˜ pubsub should use same event emitter (covered 0)
    âœ˜ pubsub should use singleHostCluster (covered 0)
  rewards.js
    âœ˜ rewards rewards create it should save a reward (covered 0)
    âœ˜ rewards rewards create should check condition (covered 0)
  search-admin.js
    âœ˜ admin search filterDirectories should resolve all paths to relative paths (covered 0)
    âœ˜ admin search filterDirectories should exclude .js files (covered 0)
    âœ˜ admin search filterDirectories should exclude partials (covered 0)
    âœ˜ admin search filterDirectories should exclude files in the admin directory (covered 0)
    âœ˜ admin search sanitize should strip out scripts (covered 0)
    âœ˜ admin search sanitize should remove all tags (covered 0)
    âœ˜ admin search simplify should remove all mustaches (covered 0)
    âœ˜ admin search simplify should collapse all whitespace (covered 0)
  settings.js
    âœ˜ settings v3 should create a new settings object (covered 0)
    âœ˜ settings v3 should get the saved settings  (covered 0)
    âœ˜ settings v3 should create a new settings instance for same key (covered 0)
    âœ˜ settings v3 should pass change between settings object over pubsub (covered 0)
    âœ˜ settings v3 should set a nested value (covered 0)
    âœ˜ settings v3 should reset the settings to default (covered 0)
    âœ˜ settings v3 should get value from default value (covered 0)
  template-helpers.js
    âœ˜ helpers should return false if item doesn't exist (covered 0)
    âœ˜ helpers should return false if route is /users and user does not have view:users privilege (covered 0)
    âœ˜ helpers should return false if route is /tags and user does not have view:tags privilege (covered 0)
    âœ˜ helpers should return false if route is /groups and user does not have view:groups privilege (covered 0)
    âœ˜ helpers should stringify object (covered 0)
    âœ˜ helpers should escape html (covered 0)
    âœ˜ helpers should return empty string if category is falsy (covered 0)
    âœ˜ helpers should generate category background (covered 0)
    âœ˜ helpers should return empty string if category has no children (covered 0)
    âœ˜ helpers should generate html for children (covered 0)
    âœ˜ helpers should generate topic class (covered 0)
    âœ˜ helpers should show leave button if isMember and group is not administrators (covered 0)
    âœ˜ helpers should show pending button if isPending and group is not administrators (covered 0)
    âœ˜ helpers should show reject invite button if isInvited (covered 0)
    âœ˜ helpers should show join button if join requests are not disabled and group is not administrators (covered 0)
    âœ˜ helpers should show nothing if group is administrators  (covered 0)
    âœ˜ helpers should spawn privilege states (covered 0)
    âœ˜ helpers should render thumb as topic image (covered 0)
    âœ˜ helpers should render user picture as topic image (covered 0)
    âœ˜ helpers should render digest avatar (covered 0)
    âœ˜ helpers shoud render user agent/browser icons (covered 0)
  topics.js
    ~ Topic's should check if user is moderator (covered 61)
    âœ˜ Topic's .post should fail to create topic with invalid data (covered 0)
    ~ Topic's .post should create a new topic with proper parameters (covered 774)
    ~ Topic's .post should get post count (covered 61)
    ~ Topic's .post should load topic (covered 100)
    ~ Topic's .post should fail to create new topic with invalid user id (covered 111)
    ~ Topic's .post should fail to create new topic with empty title (covered 34)
    ~ Topic's .post should fail to create new topic with empty content (covered 100)
    ~ Topic's .post should fail to create new topic with non-existant category id (covered 107)
    ~ Topic's .post should return false for falsy uid (covered 7)
    âœ˜ Topic's .post should fail to post a topic as guest with invalid csrf_token (covered 0)
    ~ Topic's .post should fail to post a topic as guest if no privileges (covered 110)
    ~ Topic's .post should post a topic as guest if guest group has privileges (covered 813)
    ~ Topic's .post should post a topic/reply as guest with handle if guest group has privileges (covered 889)
    ~ Topic's .reply should create a new reply with proper parameters (covered 387)
    ~ Topic's .reply should handle direct replies (covered 481)
    âœ˜ Topic's .reply should error if pid is not a number (covered 0)
    ~ Topic's .reply should fail to create new reply with invalid user id (covered 123)
    ~ Topic's .reply should fail to create new reply with empty content (covered 157)
    ~ Topic's .reply should fail to create new reply with invalid topic id (covered 38)
    ~ Topic's .reply should fail to create new reply with invalid toPid (covered 162)
    ~ Topic's .reply should delete nested relies properly (covered 980)
    ~ Topic's Get methods should not receive errors (covered 93)
    ~ Topic's Get methods should get a single field (covered 59)
    ~ Topic's Get methods should get topic title by pid (covered 68)
    ~ Topic's Get methods should get topic data by pid (covered 871)
    ~ Topic's Get methods .getTopicWithPosts should get a topic with posts and other data (covered 446)
    ~ Topic's Get methods .getTopicWithPosts should return first 3 posts including main post (covered 442)
    ~ Topic's Get methods .getTopicWithPosts should return 3 posts from 1 to 3 excluding main post (covered 439)
    ~ Topic's Get methods .getTopicWithPosts should return main post and last 2 posts (covered 445)
    ~ Topic's Get methods .getTopicWithPosts should return last 3 posts and not main post (covered 441)
    ~ Topic's Get methods .getTopicWithPosts should return posts 29 to 27 posts and not main post (covered 441)
    ~ Topic's Get methods .getTopicWithPosts should return 3 posts in reverse (covered 441)
    ~ Topic's Get methods .getTopicWithPosts should get all posts with main post at the start (covered 436)
    ~ Topic's Get methods .getTopicWithPosts should get all posts in reverse with main post at the start followed by reply 30 (covered 439)
    ~ Topic's Get methods .getTopicWithPosts should return empty array if first param is falsy (covered 6)
    ~ Topic's Get methods .getTopicWithPosts should only return main post (covered 256)
    ~ Topic's Get methods .getTopicWithPosts should only return first reply (covered 270)
    ~ Topic's Get methods .getTopicWithPosts should return main post and first reply (covered 275)
    ~ Topic's Get methods .getTopicWithPosts should return posts in correct order (covered 310)
    ~ Topic's Get methods .getTopicWithPosts should return posts in correct order in reverse direction (covered 310)
    ~ Topic's Get methods .getTopicWithPosts should return all posts in correct order (covered 269)
    ~ Topic's Title escaping should properly escape topic title (covered 774)
    ~ Topic's tools/delete/restore/purge should load topic tools (covered 100)
    ~ Topic's tools/delete/restore/purge should delete the topic (covered 259)
    ~ Topic's tools/delete/restore/purge should restore the topic (covered 276)
    ~ Topic's tools/delete/restore/purge should lock topic (covered 185)
    ~ Topic's tools/delete/restore/purge should unlock topic (covered 185)
    ~ Topic's tools/delete/restore/purge should pin topic (covered 223)
    ~ Topic's tools/delete/restore/purge should unpin topic (covered 233)
    ~ Topic's tools/delete/restore/purge should move all topics (covered 273)
    ~ Topic's tools/delete/restore/purge should move a topic (covered 273)
    ~ Topic's tools/delete/restore/purge should properly update sets when post is moved (covered 978)
    ~ Topic's tools/delete/restore/purge should fail to purge topic if user does not have privilege (covered 793)
    ~ Topic's tools/delete/restore/purge should purge the topic (covered 314)
    ~ Topic's tools/delete/restore/purge should not allow user to restore their topic if it was deleted by an admin (covered 969)
    âœ˜ Topic's order pinned topics should error with invalid data (covered 0)
    ~ Topic's order pinned topics should error with unprivileged user (covered 81)
    ~ Topic's order pinned topics should not do anything if topics are not pinned (covered 86)
    ~ Topic's order pinned topics should order pinned topics (covered 814)
    ~ Topic's .ignore should not appear in the unread list (covered 616)
    ~ Topic's .ignore should not appear as unread in the recent list (covered 460)
    ~ Topic's .ignore should appear as unread again when marked as reading (covered 626)
    ~ Topic's .ignore should appear as unread again when marked as following (covered 1103)
    âœ˜ Topic's .fork should fail with invalid data (covered 0)
    âœ˜ Topic's .fork should have 12 replies (covered 0)
    ~ Topic's .fork should not update the user's bookmark (covered 496)
    ~ Topic's .fork should update the user's bookmark  (covered 516)
    ~ Topic's .fork should properly update topic vote count after forking (covered 1122)
    ~ Topic's controller should load topic (covered 506)
    ~ Topic's controller should load topic api data (covered 475)
    ~ Topic's controller should 404 if post index is invalid (covered 31)
    ~ Topic's controller should 404 if topic does not exist (covered 112)
    ~ Topic's controller should 401 if not allowed to read as guest (covered 100)
    ~ Topic's controller should redirect to correct topic if slug is missing (covered 338)
    ~ Topic's controller should redirect if post index is out of range (covered 100)
    ~ Topic's controller should 404 if page is out of bounds (covered 131)
    ~ Topic's controller should mark topic read (covered 730)
    âœ˜ Topic's controller should 404 if tid is not a number (covered 0)
    ~ Topic's controller should 403 if cant read (covered 61)
    ~ Topic's controller should load topic teaser (covered 109)
    ~ Topic's controller should 404 if tid does not exist (covered 81)
    ~ Topic's controller should load pagination (covered 774)
    âœ˜ Topic's infinitescroll should error with invalid data (covered 0)
    ~ Topic's infinitescroll should infinite load topic posts (covered 1023)
    ~ Topic's suggested topics should return suggested topics (covered 905)
    ~ Topic's unread should fail with invalid data (covered 57)
    ~ Topic's unread should fail if topic does not exist (covered 67)
    ~ Topic's unread should mark topic unread (covered 245)
    ~ Topic's unread should mark topic read (covered 353)
    ~ Topic's unread should mark topic notifications read (covered 417)
    ~ Topic's unread should mark all read (covered 372)
    ~ Topic's unread should mark category topics read (covered 373)
    ~ Topic's unread should fail if user is not admin (covered 59)
    ~ Topic's unread should mark topic unread for everyone (covered 249)
    ~ Topic's unread should not do anything if tids is empty array (covered 155)
    ~ Topic's unread should not return topics in category you cant read (covered 931)
    ~ Topic's unread should not return topics in category you ignored/not watching (covered 931)
    ~ Topic's unread should not return topic as unread if new post is from blocked user (covered 1071)
    ~ Topic's unread should not return topic as unread if topic is deleted (covered 1005)
    ~ Topic's tags should return empty array if query is falsy (covered 27)
    ~ Topic's tags should autocomplete tags (covered 52)
    ~ Topic's tags should search tags (covered 59)
    ~ Topic's tags should search and load tags (covered 83)
    âœ˜ Topic's tags should return error if data is invalid (covered 0)
    ~ Topic's tags should load more tags (covered 18)
    âœ˜ Topic's tags should error if data is invalid (covered 0)
    ~ Topic's tags should error if tag is invalid (covered 6)
    ~ Topic's tags should error if tag is too short (covered 13)
    ~ Topic's tags should create empty tag (covered 27)
    ~ Topic's tags should do nothing if tag exists (covered 22)
    ~ Topic's tags should rename tags (covered 936)
    ~ Topic's tags should return related topics (covered 384)
    âœ˜ Topic's tags should return error with invalid data (covered 0)
    ~ Topic's tags should do nothing if arrays is empty (covered 7)
    ~ Topic's tags should delete tags (covered 57)
    ~ Topic's tags should delete tag (covered 31)
    ~ Topic's tags should delete category tag as well (covered 864)
    ~ Topic's tags should add and remove tags from topics properly (covered 894)
    ~ Topic's tags should respect minTags (covered 50)
    ~ Topic's tags should respect maxTags (covered 54)
    ~ Topic's tags should respect minTags per category (covered 50)
    ~ Topic's tags should respect maxTags per category (covered 54)
    ~ Topic's tags should create and delete category tags properly (covered 964)
    ~ Topic's tags should update counts correctly if topic is moved between categories (covered 1010)
    ~ Topic's tags should not allow regular user to use system tags (covered 73)
    ~ Topic's tags should allow admin user to use system tags (covered 830)
    ~ Topic's tags should not error if regular user edits topic after admin adds system tags (covered 957)
    ~ Topic's follow/unfollow should error if not logged in (covered 12)
    ~ Topic's follow/unfollow should filter ignoring uids (covered 32)
    ~ Topic's follow/unfollow should error with topic that does not exist (covered 17)
    ~ Topic's follow/unfollow should follow topic (covered 45)
    ~ Topic's topics search should error with invalid data (covered 7)
    ~ Topic's topics search should return results (covered 783)
    ~ Topic's teasers should return empty array if first param is empty (covered 8)
    ~ Topic's teasers should get teasers with 2 params (covered 72)
    ~ Topic's teasers should get teasers with first posts (covered 89)
    ~ Topic's teasers should get teasers even if one topic is falsy (covered 90)
    ~ Topic's teasers should get teasers with last posts (covered 484)
    ~ Topic's teasers should get teasers by tids (covered 168)
    ~ Topic's teasers should return empty array  (covered 8)
    ~ Topic's teasers should get teaser by tid (covered 173)
    ~ Topic's teasers should not return teaser if user is blocked (covered 536)
    ~ Topic's tag privilege should fail to post if user does not have tag privilege (covered 125)
    ~ Topic's tag privilege should fail to edit if user does not have tag privilege (covered 779)
    ~ Topic's tag privilege should be able to edit topic and add tags if allowed (covered 1030)
    ~ Topic's topic merge should error if data is not an array (covered 10)
    âœ˜ Topic's topic merge should error if user does not have privileges (covered 0)
    ~ Topic's topic merge should merge 2 topics (covered 695)
    ~ Topic's topic merge should return properly for merged topic (covered 558)
    ~ Topic's topic merge should merge 2 topics with options mainTid (covered 1341)
    ~ Topic's topic merge should merge 2 topics with options newTopicTitle (covered 1350)
    ~ Topic's sorted topics should get sorted topics in category (covered 632)
    ~ Topic's sorted topics should get topics recent replied first (covered 582)
    ~ Topic's sorted topics should get topics recent replied last (covered 585)
    ~ Topic's scheduled topics should create a scheduled topic as pinned, deleted, included in "topics:scheduled" zset and with a timestamp in future (covered 801)
    âœ˜ Topic's scheduled topics should update poster's lastposttime with "action time" (covered 0)
    ~ Topic's scheduled topics should not load topic for an unprivileged user (covered 131)
    ~ Topic's scheduled topics should load topic for a privileged user (covered 692)
    ~ Topic's scheduled topics should not be amongst topics of the category for an unprivileged user (covered 21)
    ~ Topic's scheduled topics should be amongst topics of the category for a privileged user (covered 385)
    ~ Topic's scheduled topics should load topic for guests if privilege is given (covered 506)
    ~ Topic's scheduled topics should be amongst topics of the category for guests if privilege is given (covered 353)
    ~ Topic's scheduled topics should not allow deletion of a scheduled topic (covered 110)
    ~ Topic's scheduled topics should not allow to unpin a scheduled topic (covered 110)
    ~ Topic's scheduled topics should not allow to restore a scheduled topic (covered 110)
    âœ˜ Topic's scheduled topics should not allow unprivileged to reply (covered 0)
    ~ Topic's scheduled topics should allow guests to reply if privilege is given (covered 387)
    ~ Topic's scheduled topics should have replies with greater timestamp than the scheduled topics itself (covered 488)
    ~ Topic's scheduled topics should have post edits with greater timestamp than the original (covered 129)
    ~ Topic's scheduled topics should able to reschedule (covered 254)
    ~ Topic's scheduled topics should able to publish a scheduled topic (covered 249)
    âœ˜ Topic's scheduled topics should update poster's lastposttime after a ST published (covered 0)
    ~ Topic's scheduled topics should not be able to schedule a "published" topic (covered 188)
    ~ Topic's scheduled topics should allow to purge a scheduled topic (covered 970)
    âœ˜ Topic's scheduled topics should remove from topics:scheduled on purge (covered 0)
    âœ˜ Topics' subfolder tests (covered 0)
  translator.js
    âœ˜ Translator shim .translate() should translate correctly (covered 0)
    âœ˜ Translator shim .translate() should accept a language parameter and adjust accordingly (covered 0)
    âœ˜ Translator shim .translate() should translate empty string properly (covered 0)
    âœ˜ Translator shim .translate() should not allow path traversal (covered 0)
    âœ˜ new Translator(language) should throw if not passed a language (covered 0)
    âœ˜ new Translator(language) .translate() should handle basic translations (covered 0)
    âœ˜ new Translator(language) .translate() should handle language keys in regular text (covered 0)
    âœ˜ new Translator(language) .translate() should handle language keys in regular text with another language specified (covered 0)
    âœ˜ new Translator(language) .translate() should handle language keys with parameters (covered 0)
    âœ˜ new Translator(language) .translate() should handle language keys inside language keys (covered 0)
    âœ˜ new Translator(language) .translate() should handle language keys inside language keys with multiple parameters (covered 0)
    âœ˜ new Translator(language) .translate() should handle language keys inside language keys with all parameters as language keys (covered 0)
    âœ˜ new Translator(language) .translate() should properly handle parameters that contain square brackets (covered 0)
    âœ˜ new Translator(language) .translate() should properly handle parameters that contain parentheses (covered 0)
    âœ˜ new Translator(language) .translate() should escape language key parameters with HTML in them (covered 0)
    âœ˜ new Translator(language) .translate() should not unescape html in parameters (covered 0)
    âœ˜ new Translator(language) .translate() should translate escaped translation arguments properly (covered 0)
    âœ˜ new Translator(language) .translate() should properly escape and ignore % and \, in arguments (covered 0)
    âœ˜ new Translator(language) .translate() should not escape regular % (covered 0)
    âœ˜ new Translator(language) .translate() should not translate [[derp] some text (covered 0)
    âœ˜ new Translator(language) .translate() should not translate [[derp]] some text (covered 0)
    âœ˜ new Translator(language) .translate() should not translate [[derp:xyz] some text (covered 0)
    âœ˜ new Translator(language) .translate() should translate keys with slashes properly (covered 0)
    âœ˜ new Translator(language) .translate() should use key for unknown keys without arguments (covered 0)
    âœ˜ new Translator(language) .translate() should use backup for unknown keys with arguments (covered 0)
    âœ˜ new Translator(language) .translate() should ignore unclosed tokens (covered 0)
    âœ˜ Translator.create() should return an instance of Translator (covered 0)
    âœ˜ Translator.create() should return the same object for the same language (covered 0)
    âœ˜ Translator.create() should default to defaultLang (covered 0)
    âœ˜ Translator modules should work before registered (covered 0)
    âœ˜ Translator modules should work after registered (covered 0)
    âœ˜ Translator modules registerModule be passed the language (covered 0)
    âœ˜ Translator static methods .removePatterns should remove translator patterns from text (covered 0)
    âœ˜ Translator static methods .escape should escape translation patterns within text (covered 0)
    âœ˜ Translator static methods .unescape should unescape escaped translation patterns within text (covered 0)
    âœ˜ Translator static methods .compile should create a translator pattern from a key and list of arguments (covered 0)
    âœ˜ Translator static methods .compile should escape `%` and `,` in arguments (covered 0)
    âœ˜ Translator static methods add translation should add custom translations (covered 0)
    âœ˜ Translator static methods translate nested keys should handle nested translations (covered 0)
    ~ Translator static methods translate nested keys should try the defaults if it didn't reach a string in a nested translation (covered 774)
  uploads.js
    âœ˜ Upload Controllers regular user uploads rate limits should fail if the user exceeds the upload rate limit threshold (covered 0)
    âœ˜ Upload Controllers regular user uploads should upload an image to a post (covered 0)
    âœ˜ Upload Controllers regular user uploads should upload an image to a post and then delete the upload (covered 0)
    âœ˜ Upload Controllers regular user uploads should not allow deleting if path is not correct (covered 0)
    âœ˜ Upload Controllers regular user uploads should resize and upload an image to a post (covered 0)
    âœ˜ Upload Controllers regular user uploads should upload a file to a post (covered 0)
    âœ˜ Upload Controllers regular user uploads should fail to upload image to post if image dimensions are too big (covered 0)
    âœ˜ Upload Controllers regular user uploads should fail to upload image to post if image is broken (covered 0)
    âœ˜ Upload Controllers regular user uploads should fail if file is not an image (covered 0)
    âœ˜ Upload Controllers regular user uploads should fail if file is missing (covered 0)
    âœ˜ Upload Controllers regular user uploads should not allow non image uploads (covered 0)
    âœ˜ Upload Controllers regular user uploads should not allow svg uploads (covered 0)
    âœ˜ Upload Controllers regular user uploads should delete users uploads if account is deleted (covered 0)
    âœ˜ Upload Controllers admin uploads should upload site logo (covered 0)
    âœ˜ Upload Controllers admin uploads should fail to upload invalid file type (covered 0)
    âœ˜ Upload Controllers admin uploads should fail to upload category image with invalid json params (covered 0)
    âœ˜ Upload Controllers admin uploads should upload category image (covered 0)
    âœ˜ Upload Controllers admin uploads should upload default avatar (covered 0)
    âœ˜ Upload Controllers admin uploads should upload og image (covered 0)
    âœ˜ Upload Controllers admin uploads should upload favicon (covered 0)
    âœ˜ Upload Controllers admin uploads should upload touch icon (covered 0)
    âœ˜ Upload Controllers admin uploads should upload regular file (covered 0)
    âœ˜ Upload Controllers admin uploads should fail to upload regular file in wrong directory (covered 0)
    âœ˜ Upload Controllers admin uploads ACP uploads screen should create a folder (covered 0)
    âœ˜ Upload Controllers admin uploads ACP uploads screen should fail to create a folder if it already exists (covered 0)
    âœ˜ Upload Controllers admin uploads ACP uploads screen should fail to create a folder as a non-admin (covered 0)
    âœ˜ Upload Controllers admin uploads ACP uploads screen should fail to create a folder in wrong directory (covered 0)
    âœ˜ Upload Controllers admin uploads ACP uploads screen should use basename of given folderName to create new folder (covered 0)
    âœ˜ Upload Controllers admin uploads ACP uploads screen should fail to delete a file as a non-admin (covered 0)
    âœ˜ Upload Controllers library methods .getOrphans() should return files with no post associated with them (covered 0)
    âœ˜ Upload Controllers library methods .cleanOrphans() should not touch orphans if not configured to do so (covered 0)
    âœ˜ Upload Controllers library methods .cleanOrphans() should not touch orphans if they are newer than the configured expiry (covered 0)
    âœ˜ Upload Controllers library methods .cleanOrphans() should delete orphans older than the configured number of days (covered 0)
  user.js
    âœ“ should correctly compare a password and a hash (killed 3519)
    âœ˜ should correctly handle comparison with no sha wrapping of the input (backwards compatibility) (covered 0)
    âœ˜ should continue to function even with passwords > 73 characters (covered 0)
    âœ˜ should process a million-character long password quickly (covered 0)
    âœ˜ should grab all mounted routes and ensure a schema exists (covered 0)
    âœ˜ GET /ping: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /ping: should have examples when parameters are present (covered 0)
    âœ˜ GET /ping: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ“ GET /ping: should not error out when called (killed 1)
    âœ˜ GET /ping: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /ping: response body should match schema definition (covered 0)
    âœ˜ GET /ping: should successfully re-login if needed (covered 0)
    âœ˜ GET /ping: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /ping: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /ping: should have examples when parameters are present (covered 0)
    âœ˜ POST /ping: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ POST /ping: should not error out when called (covered 0)
    âœ“ POST /ping: response status code should match one of the schema defined responses (killed 3)
    âœ˜ POST /ping: response body should match schema definition (covered 0)
    âœ˜ POST /ping: should successfully re-login if needed (covered 0)
    âœ˜ POST /ping: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /utilities/login: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /utilities/login: should have examples when parameters are present (covered 0)
    âœ˜ POST /utilities/login: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ POST /utilities/login: should not error out when called (covered 0)
    âœ˜ POST /utilities/login: response status code should match one of the schema defined responses (covered 0)
    âœ˜ POST /utilities/login: response body should match schema definition (covered 0)
    âœ˜ POST /utilities/login: should successfully re-login if needed (covered 0)
    âœ˜ POST /utilities/login: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /users/: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /users/: should have examples when parameters are present (covered 0)
    âœ˜ POST /users/: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ POST /users/: should not error out when called (covered 0)
    âœ˜ POST /users/: response status code should match one of the schema defined responses (covered 0)
    âœ˜ POST /users/: response body should match schema definition (covered 0)
    âœ˜ POST /users/: should successfully re-login if needed (covered 0)
    âœ˜ POST /users/: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /users/: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /users/: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /users/: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /users/: should not error out when called (covered 0)
    âœ˜ DELETE /users/: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /users/: response body should match schema definition (covered 0)
    âœ˜ DELETE /users/: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /users/: should back out of a registration interstitial if needed (covered 0)
    âœ˜ HEAD /users/{uid}: should have each path parameter defined in its context (covered 0)
    âœ˜ HEAD /users/{uid}: should have examples when parameters are present (covered 0)
    âœ˜ HEAD /users/{uid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ HEAD /users/{uid}: should not error out when called (covered 0)
    âœ˜ HEAD /users/{uid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ HEAD /users/{uid}: response body should match schema definition (covered 0)
    âœ˜ HEAD /users/{uid}: should successfully re-login if needed (covered 0)
    âœ˜ HEAD /users/{uid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /users/{uid}: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /users/{uid}: should have examples when parameters are present (covered 0)
    âœ˜ GET /users/{uid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ GET /users/{uid}: should not error out when called (covered 0)
    âœ˜ GET /users/{uid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /users/{uid}: response body should match schema definition (covered 0)
    âœ˜ GET /users/{uid}: should successfully re-login if needed (covered 0)
    âœ˜ GET /users/{uid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /users/{uid}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /users/{uid}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /users/{uid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /users/{uid}: should not error out when called (covered 0)
    âœ˜ DELETE /users/{uid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /users/{uid}: response body should match schema definition (covered 0)
    âœ˜ DELETE /users/{uid}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /users/{uid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /users/{uid}: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /users/{uid}: should have examples when parameters are present (covered 0)
    âœ˜ PUT /users/{uid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /users/{uid}: should not error out when called (covered 0)
    âœ˜ PUT /users/{uid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /users/{uid}: response body should match schema definition (covered 0)
    âœ˜ PUT /users/{uid}: should successfully re-login if needed (covered 0)
    âœ˜ PUT /users/{uid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /users/{uid}/picture: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /users/{uid}/picture: should have examples when parameters are present (covered 0)
    âœ˜ PUT /users/{uid}/picture: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /users/{uid}/picture: should not error out when called (covered 0)
    âœ˜ PUT /users/{uid}/picture: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /users/{uid}/picture: response body should match schema definition (covered 0)
    âœ˜ PUT /users/{uid}/picture: should successfully re-login if needed (covered 0)
    âœ˜ PUT /users/{uid}/picture: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /users/{uid}/content: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /users/{uid}/content: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /users/{uid}/content: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /users/{uid}/content: should not error out when called (covered 0)
    âœ˜ DELETE /users/{uid}/content: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /users/{uid}/content: response body should match schema definition (covered 0)
    âœ˜ DELETE /users/{uid}/content: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /users/{uid}/content: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /users/{uid}/account: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /users/{uid}/account: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /users/{uid}/account: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /users/{uid}/account: should not error out when called (covered 0)
    âœ˜ DELETE /users/{uid}/account: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /users/{uid}/account: response body should match schema definition (covered 0)
    âœ˜ DELETE /users/{uid}/account: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /users/{uid}/account: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /users/{uid}/settings: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /users/{uid}/settings: should have examples when parameters are present (covered 0)
    âœ˜ PUT /users/{uid}/settings: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /users/{uid}/settings: should not error out when called (covered 0)
    âœ˜ PUT /users/{uid}/settings: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /users/{uid}/settings: response body should match schema definition (covered 0)
    âœ˜ PUT /users/{uid}/settings: should successfully re-login if needed (covered 0)
    âœ˜ PUT /users/{uid}/settings: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /users/{uid}/password: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /users/{uid}/password: should have examples when parameters are present (covered 0)
    âœ˜ PUT /users/{uid}/password: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /users/{uid}/password: should not error out when called (covered 0)
    âœ˜ PUT /users/{uid}/password: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /users/{uid}/password: response body should match schema definition (covered 0)
    âœ˜ PUT /users/{uid}/password: should successfully re-login if needed (covered 0)
    âœ˜ PUT /users/{uid}/password: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /users/{uid}/follow: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /users/{uid}/follow: should have examples when parameters are present (covered 0)
    âœ˜ PUT /users/{uid}/follow: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /users/{uid}/follow: should not error out when called (covered 0)
    âœ˜ PUT /users/{uid}/follow: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /users/{uid}/follow: response body should match schema definition (covered 0)
    âœ˜ PUT /users/{uid}/follow: should successfully re-login if needed (covered 0)
    âœ˜ PUT /users/{uid}/follow: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /users/{uid}/follow: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /users/{uid}/follow: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /users/{uid}/follow: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /users/{uid}/follow: should not error out when called (covered 0)
    âœ˜ DELETE /users/{uid}/follow: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /users/{uid}/follow: response body should match schema definition (covered 0)
    âœ˜ DELETE /users/{uid}/follow: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /users/{uid}/follow: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /users/{uid}/ban: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /users/{uid}/ban: should have examples when parameters are present (covered 0)
    âœ˜ PUT /users/{uid}/ban: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /users/{uid}/ban: should not error out when called (covered 0)
    âœ˜ PUT /users/{uid}/ban: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /users/{uid}/ban: response body should match schema definition (covered 0)
    âœ˜ PUT /users/{uid}/ban: should successfully re-login if needed (covered 0)
    âœ˜ PUT /users/{uid}/ban: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /users/{uid}/ban: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /users/{uid}/ban: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /users/{uid}/ban: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /users/{uid}/ban: should not error out when called (covered 0)
    âœ˜ DELETE /users/{uid}/ban: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /users/{uid}/ban: response body should match schema definition (covered 0)
    âœ˜ DELETE /users/{uid}/ban: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /users/{uid}/ban: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /users/{uid}/mute: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /users/{uid}/mute: should have examples when parameters are present (covered 0)
    âœ˜ PUT /users/{uid}/mute: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /users/{uid}/mute: should not error out when called (covered 0)
    âœ˜ PUT /users/{uid}/mute: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /users/{uid}/mute: response body should match schema definition (covered 0)
    âœ˜ PUT /users/{uid}/mute: should successfully re-login if needed (covered 0)
    âœ˜ PUT /users/{uid}/mute: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /users/{uid}/mute: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /users/{uid}/mute: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /users/{uid}/mute: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /users/{uid}/mute: should not error out when called (covered 0)
    âœ˜ DELETE /users/{uid}/mute: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /users/{uid}/mute: response body should match schema definition (covered 0)
    âœ˜ DELETE /users/{uid}/mute: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /users/{uid}/mute: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /users/{uid}/tokens: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /users/{uid}/tokens: should have examples when parameters are present (covered 0)
    âœ˜ POST /users/{uid}/tokens: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ POST /users/{uid}/tokens: should not error out when called (covered 0)
    âœ˜ POST /users/{uid}/tokens: response status code should match one of the schema defined responses (covered 0)
    âœ˜ POST /users/{uid}/tokens: response body should match schema definition (covered 0)
    âœ˜ POST /users/{uid}/tokens: should successfully re-login if needed (covered 0)
    âœ˜ POST /users/{uid}/tokens: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /users/{uid}/tokens/{token}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /users/{uid}/tokens/{token}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /users/{uid}/tokens/{token}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /users/{uid}/tokens/{token}: should not error out when called (covered 0)
    âœ˜ DELETE /users/{uid}/tokens/{token}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /users/{uid}/tokens/{token}: response body should match schema definition (covered 0)
    âœ˜ DELETE /users/{uid}/tokens/{token}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /users/{uid}/tokens/{token}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /users/{uid}/sessions/{uuid}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /users/{uid}/sessions/{uuid}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /users/{uid}/sessions/{uuid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /users/{uid}/sessions/{uuid}: should not error out when called (covered 0)
    âœ˜ DELETE /users/{uid}/sessions/{uuid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /users/{uid}/sessions/{uuid}: response body should match schema definition (covered 0)
    âœ˜ DELETE /users/{uid}/sessions/{uuid}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /users/{uid}/sessions/{uuid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /users/{uid}/invites: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /users/{uid}/invites: should have examples when parameters are present (covered 0)
    âœ˜ POST /users/{uid}/invites: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ POST /users/{uid}/invites: should not error out when called (covered 0)
    âœ˜ POST /users/{uid}/invites: response status code should match one of the schema defined responses (covered 0)
    âœ˜ POST /users/{uid}/invites: response body should match schema definition (covered 0)
    âœ˜ POST /users/{uid}/invites: should successfully re-login if needed (covered 0)
    âœ˜ POST /users/{uid}/invites: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /users/{uid}/invites/groups: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /users/{uid}/invites/groups: should have examples when parameters are present (covered 0)
    âœ˜ GET /users/{uid}/invites/groups: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ GET /users/{uid}/invites/groups: should not error out when called (covered 0)
    âœ˜ GET /users/{uid}/invites/groups: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /users/{uid}/invites/groups: response body should match schema definition (covered 0)
    âœ˜ GET /users/{uid}/invites/groups: should successfully re-login if needed (covered 0)
    âœ˜ GET /users/{uid}/invites/groups: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /users/{uid}/emails: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /users/{uid}/emails: should have examples when parameters are present (covered 0)
    âœ˜ GET /users/{uid}/emails: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ GET /users/{uid}/emails: should not error out when called (covered 0)
    âœ˜ GET /users/{uid}/emails: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /users/{uid}/emails: response body should match schema definition (covered 0)
    âœ˜ GET /users/{uid}/emails: should successfully re-login if needed (covered 0)
    âœ˜ GET /users/{uid}/emails: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /users/{uid}/emails/{email}: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /users/{uid}/emails/{email}: should have examples when parameters are present (covered 0)
    âœ˜ GET /users/{uid}/emails/{email}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ GET /users/{uid}/emails/{email}: should not error out when called (covered 0)
    âœ˜ GET /users/{uid}/emails/{email}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /users/{uid}/emails/{email}: response body should match schema definition (covered 0)
    âœ˜ GET /users/{uid}/emails/{email}: should successfully re-login if needed (covered 0)
    âœ˜ GET /users/{uid}/emails/{email}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /users/{uid}/emails/{email}/confirm: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /users/{uid}/emails/{email}/confirm: should have examples when parameters are present (covered 0)
    âœ˜ POST /users/{uid}/emails/{email}/confirm: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ POST /users/{uid}/emails/{email}/confirm: should not error out when called (covered 0)
    âœ˜ POST /users/{uid}/emails/{email}/confirm: response status code should match one of the schema defined responses (covered 0)
    âœ˜ POST /users/{uid}/emails/{email}/confirm: response body should match schema definition (covered 0)
    âœ˜ POST /users/{uid}/emails/{email}/confirm: should successfully re-login if needed (covered 0)
    âœ˜ POST /users/{uid}/emails/{email}/confirm: should back out of a registration interstitial if needed (covered 0)
    âœ˜ HEAD /users/{uid}/exports/{type}: should have each path parameter defined in its context (covered 0)
    âœ˜ HEAD /users/{uid}/exports/{type}: should have examples when parameters are present (covered 0)
    âœ˜ HEAD /users/{uid}/exports/{type}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ HEAD /users/{uid}/exports/{type}: should not error out when called (covered 0)
    âœ˜ HEAD /users/{uid}/exports/{type}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ HEAD /users/{uid}/exports/{type}: response body should match schema definition (covered 0)
    âœ˜ HEAD /users/{uid}/exports/{type}: should successfully re-login if needed (covered 0)
    âœ˜ HEAD /users/{uid}/exports/{type}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /users/{uid}/exports/{type}: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /users/{uid}/exports/{type}: should have examples when parameters are present (covered 0)
    âœ˜ GET /users/{uid}/exports/{type}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ GET /users/{uid}/exports/{type}: should not error out when called (covered 0)
    âœ˜ GET /users/{uid}/exports/{type}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /users/{uid}/exports/{type}: response body should match schema definition (covered 0)
    âœ˜ GET /users/{uid}/exports/{type}: should successfully re-login if needed (covered 0)
    âœ˜ GET /users/{uid}/exports/{type}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /users/{uid}/exports/{type}: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /users/{uid}/exports/{type}: should have examples when parameters are present (covered 0)
    âœ˜ POST /users/{uid}/exports/{type}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ POST /users/{uid}/exports/{type}: should not error out when called (covered 0)
    âœ˜ POST /users/{uid}/exports/{type}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ POST /users/{uid}/exports/{type}: response body should match schema definition (covered 0)
    âœ˜ POST /users/{uid}/exports/{type}: should successfully re-login if needed (covered 0)
    âœ˜ POST /users/{uid}/exports/{type}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /groups/: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /groups/: should have examples when parameters are present (covered 0)
    âœ˜ POST /groups/: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ POST /groups/: should not error out when called (covered 0)
    âœ˜ POST /groups/: response status code should match one of the schema defined responses (covered 0)
    âœ˜ POST /groups/: response body should match schema definition (covered 0)
    âœ˜ POST /groups/: should successfully re-login if needed (covered 0)
    âœ˜ POST /groups/: should back out of a registration interstitial if needed (covered 0)
    âœ˜ HEAD /groups/{slug}: should have each path parameter defined in its context (covered 0)
    âœ˜ HEAD /groups/{slug}: should have examples when parameters are present (covered 0)
    âœ˜ HEAD /groups/{slug}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ HEAD /groups/{slug}: should not error out when called (covered 0)
    âœ˜ HEAD /groups/{slug}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ HEAD /groups/{slug}: response body should match schema definition (covered 0)
    âœ˜ HEAD /groups/{slug}: should successfully re-login if needed (covered 0)
    âœ˜ HEAD /groups/{slug}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /groups/{slug}: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /groups/{slug}: should have examples when parameters are present (covered 0)
    âœ˜ PUT /groups/{slug}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /groups/{slug}: should not error out when called (covered 0)
    âœ˜ PUT /groups/{slug}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /groups/{slug}: response body should match schema definition (covered 0)
    âœ˜ PUT /groups/{slug}: should successfully re-login if needed (covered 0)
    âœ˜ PUT /groups/{slug}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /groups/{slug}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /groups/{slug}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /groups/{slug}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /groups/{slug}: should not error out when called (covered 0)
    âœ˜ DELETE /groups/{slug}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /groups/{slug}: response body should match schema definition (covered 0)
    âœ˜ DELETE /groups/{slug}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /groups/{slug}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /groups/{slug}/membership/{uid}: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /groups/{slug}/membership/{uid}: should have examples when parameters are present (covered 0)
    âœ˜ PUT /groups/{slug}/membership/{uid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /groups/{slug}/membership/{uid}: should not error out when called (covered 0)
    âœ˜ PUT /groups/{slug}/membership/{uid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /groups/{slug}/membership/{uid}: response body should match schema definition (covered 0)
    âœ˜ PUT /groups/{slug}/membership/{uid}: should successfully re-login if needed (covered 0)
    âœ˜ PUT /groups/{slug}/membership/{uid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /groups/{slug}/membership/{uid}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /groups/{slug}/membership/{uid}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /groups/{slug}/membership/{uid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /groups/{slug}/membership/{uid}: should not error out when called (covered 0)
    âœ˜ DELETE /groups/{slug}/membership/{uid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /groups/{slug}/membership/{uid}: response body should match schema definition (covered 0)
    âœ˜ DELETE /groups/{slug}/membership/{uid}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /groups/{slug}/membership/{uid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /groups/{slug}/ownership/{uid}: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /groups/{slug}/ownership/{uid}: should have examples when parameters are present (covered 0)
    âœ˜ PUT /groups/{slug}/ownership/{uid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /groups/{slug}/ownership/{uid}: should not error out when called (covered 0)
    âœ˜ PUT /groups/{slug}/ownership/{uid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /groups/{slug}/ownership/{uid}: response body should match schema definition (covered 0)
    âœ˜ PUT /groups/{slug}/ownership/{uid}: should successfully re-login if needed (covered 0)
    âœ˜ PUT /groups/{slug}/ownership/{uid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /groups/{slug}/ownership/{uid}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /groups/{slug}/ownership/{uid}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /groups/{slug}/ownership/{uid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /groups/{slug}/ownership/{uid}: should not error out when called (covered 0)
    âœ˜ DELETE /groups/{slug}/ownership/{uid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /groups/{slug}/ownership/{uid}: response body should match schema definition (covered 0)
    âœ˜ DELETE /groups/{slug}/ownership/{uid}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /groups/{slug}/ownership/{uid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /categories/: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /categories/: should have examples when parameters are present (covered 0)
    âœ˜ POST /categories/: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ POST /categories/: should not error out when called (covered 0)
    âœ˜ POST /categories/: response status code should match one of the schema defined responses (covered 0)
    âœ˜ POST /categories/: response body should match schema definition (covered 0)
    âœ˜ POST /categories/: should successfully re-login if needed (covered 0)
    âœ˜ POST /categories/: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /categories/{cid}: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /categories/{cid}: should have examples when parameters are present (covered 0)
    âœ˜ GET /categories/{cid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ GET /categories/{cid}: should not error out when called (covered 0)
    âœ˜ GET /categories/{cid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /categories/{cid}: response body should match schema definition (covered 0)
    âœ˜ GET /categories/{cid}: should successfully re-login if needed (covered 0)
    âœ˜ GET /categories/{cid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /categories/{cid}: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /categories/{cid}: should have examples when parameters are present (covered 0)
    âœ˜ PUT /categories/{cid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /categories/{cid}: should not error out when called (covered 0)
    âœ˜ PUT /categories/{cid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /categories/{cid}: response body should match schema definition (covered 0)
    âœ˜ PUT /categories/{cid}: should successfully re-login if needed (covered 0)
    âœ˜ PUT /categories/{cid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /categories/{cid}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /categories/{cid}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /categories/{cid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /categories/{cid}: should not error out when called (covered 0)
    âœ˜ DELETE /categories/{cid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /categories/{cid}: response body should match schema definition (covered 0)
    âœ˜ DELETE /categories/{cid}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /categories/{cid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /categories/{cid}/privileges: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /categories/{cid}/privileges: should have examples when parameters are present (covered 0)
    âœ˜ GET /categories/{cid}/privileges: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ GET /categories/{cid}/privileges: should not error out when called (covered 0)
    âœ˜ GET /categories/{cid}/privileges: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /categories/{cid}/privileges: response body should match schema definition (covered 0)
    âœ˜ GET /categories/{cid}/privileges: should successfully re-login if needed (covered 0)
    âœ˜ GET /categories/{cid}/privileges: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /categories/{cid}/privileges/{privilege}: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /categories/{cid}/privileges/{privilege}: should have examples when parameters are present (covered 0)
    âœ˜ PUT /categories/{cid}/privileges/{privilege}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /categories/{cid}/privileges/{privilege}: should not error out when called (covered 0)
    âœ˜ PUT /categories/{cid}/privileges/{privilege}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /categories/{cid}/privileges/{privilege}: response body should match schema definition (covered 0)
    âœ˜ PUT /categories/{cid}/privileges/{privilege}: should successfully re-login if needed (covered 0)
    âœ˜ PUT /categories/{cid}/privileges/{privilege}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /categories/{cid}/privileges/{privilege}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /categories/{cid}/privileges/{privilege}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /categories/{cid}/privileges/{privilege}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /categories/{cid}/privileges/{privilege}: should not error out when called (covered 0)
    âœ˜ DELETE /categories/{cid}/privileges/{privilege}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /categories/{cid}/privileges/{privilege}: response body should match schema definition (covered 0)
    âœ˜ DELETE /categories/{cid}/privileges/{privilege}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /categories/{cid}/privileges/{privilege}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /categories/{cid}/moderator/{uid}: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /categories/{cid}/moderator/{uid}: should have examples when parameters are present (covered 0)
    âœ˜ PUT /categories/{cid}/moderator/{uid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /categories/{cid}/moderator/{uid}: should not error out when called (covered 0)
    âœ˜ PUT /categories/{cid}/moderator/{uid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /categories/{cid}/moderator/{uid}: response body should match schema definition (covered 0)
    âœ˜ PUT /categories/{cid}/moderator/{uid}: should successfully re-login if needed (covered 0)
    âœ˜ PUT /categories/{cid}/moderator/{uid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /categories/{cid}/moderator/{uid}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /categories/{cid}/moderator/{uid}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /categories/{cid}/moderator/{uid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /categories/{cid}/moderator/{uid}: should not error out when called (covered 0)
    âœ˜ DELETE /categories/{cid}/moderator/{uid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /categories/{cid}/moderator/{uid}: response body should match schema definition (covered 0)
    âœ˜ DELETE /categories/{cid}/moderator/{uid}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /categories/{cid}/moderator/{uid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /topics/: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /topics/: should have examples when parameters are present (covered 0)
    âœ˜ POST /topics/: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ POST /topics/: should not error out when called (covered 834)
    âœ˜ POST /topics/: response status code should match one of the schema defined responses (covered 0)
    âœ˜ POST /topics/: response body should match schema definition (covered 0)
    âœ˜ POST /topics/: should successfully re-login if needed (covered 0)
    âœ˜ POST /topics/: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /topics/{tid}: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /topics/{tid}: should have examples when parameters are present (covered 0)
    âœ˜ GET /topics/{tid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ GET /topics/{tid}: should not error out when called (covered 100)
    âœ˜ GET /topics/{tid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /topics/{tid}: response body should match schema definition (covered 0)
    âœ˜ GET /topics/{tid}: should successfully re-login if needed (covered 0)
    âœ˜ GET /topics/{tid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /topics/{tid}: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /topics/{tid}: should have examples when parameters are present (covered 0)
    âœ˜ POST /topics/{tid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ POST /topics/{tid}: should not error out when called (covered 388)
    âœ˜ POST /topics/{tid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ POST /topics/{tid}: response body should match schema definition (covered 0)
    âœ˜ POST /topics/{tid}: should successfully re-login if needed (covered 0)
    âœ˜ POST /topics/{tid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /topics/{tid}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /topics/{tid}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /topics/{tid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ DELETE /topics/{tid}: should not error out when called (covered 313)
    âœ˜ DELETE /topics/{tid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /topics/{tid}: response body should match schema definition (covered 0)
    âœ˜ DELETE /topics/{tid}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /topics/{tid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /topics/{tid}/state: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /topics/{tid}/state: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /topics/{tid}/state: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ DELETE /topics/{tid}/state: should not error out when called (covered 259)
    âœ˜ DELETE /topics/{tid}/state: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /topics/{tid}/state: response body should match schema definition (covered 0)
    âœ˜ DELETE /topics/{tid}/state: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /topics/{tid}/state: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /topics/{tid}/state: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /topics/{tid}/state: should have examples when parameters are present (covered 0)
    âœ˜ PUT /topics/{tid}/state: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ PUT /topics/{tid}/state: should not error out when called (covered 276)
    âœ˜ PUT /topics/{tid}/state: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /topics/{tid}/state: response body should match schema definition (covered 0)
    âœ˜ PUT /topics/{tid}/state: should successfully re-login if needed (covered 0)
    âœ˜ PUT /topics/{tid}/state: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /topics/{tid}/lock: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /topics/{tid}/lock: should have examples when parameters are present (covered 0)
    âœ˜ PUT /topics/{tid}/lock: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ PUT /topics/{tid}/lock: should not error out when called (covered 180)
    âœ˜ PUT /topics/{tid}/lock: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /topics/{tid}/lock: response body should match schema definition (covered 0)
    âœ˜ PUT /topics/{tid}/lock: should successfully re-login if needed (covered 0)
    âœ˜ PUT /topics/{tid}/lock: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /topics/{tid}/lock: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /topics/{tid}/lock: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /topics/{tid}/lock: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ DELETE /topics/{tid}/lock: should not error out when called (covered 180)
    âœ˜ DELETE /topics/{tid}/lock: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /topics/{tid}/lock: response body should match schema definition (covered 0)
    âœ˜ DELETE /topics/{tid}/lock: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /topics/{tid}/lock: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /topics/{tid}/pin: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /topics/{tid}/pin: should have examples when parameters are present (covered 0)
    âœ˜ PUT /topics/{tid}/pin: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ PUT /topics/{tid}/pin: should not error out when called (covered 223)
    âœ˜ PUT /topics/{tid}/pin: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /topics/{tid}/pin: response body should match schema definition (covered 0)
    âœ˜ PUT /topics/{tid}/pin: should successfully re-login if needed (covered 0)
    âœ˜ PUT /topics/{tid}/pin: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /topics/{tid}/pin: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /topics/{tid}/pin: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /topics/{tid}/pin: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ DELETE /topics/{tid}/pin: should not error out when called (covered 233)
    âœ˜ DELETE /topics/{tid}/pin: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /topics/{tid}/pin: response body should match schema definition (covered 0)
    âœ˜ DELETE /topics/{tid}/pin: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /topics/{tid}/pin: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /topics/{tid}/follow: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /topics/{tid}/follow: should have examples when parameters are present (covered 0)
    âœ˜ PUT /topics/{tid}/follow: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ PUT /topics/{tid}/follow: should not error out when called (covered 24)
    âœ˜ PUT /topics/{tid}/follow: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /topics/{tid}/follow: response body should match schema definition (covered 0)
    âœ˜ PUT /topics/{tid}/follow: should successfully re-login if needed (covered 0)
    âœ˜ PUT /topics/{tid}/follow: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /topics/{tid}/follow: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /topics/{tid}/follow: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /topics/{tid}/follow: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ DELETE /topics/{tid}/follow: should not error out when called (covered 23)
    âœ˜ DELETE /topics/{tid}/follow: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /topics/{tid}/follow: response body should match schema definition (covered 0)
    âœ˜ DELETE /topics/{tid}/follow: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /topics/{tid}/follow: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /topics/{tid}/ignore: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /topics/{tid}/ignore: should have examples when parameters are present (covered 0)
    âœ˜ PUT /topics/{tid}/ignore: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ PUT /topics/{tid}/ignore: should not error out when called (covered 24)
    âœ˜ PUT /topics/{tid}/ignore: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /topics/{tid}/ignore: response body should match schema definition (covered 0)
    âœ˜ PUT /topics/{tid}/ignore: should successfully re-login if needed (covered 0)
    âœ˜ PUT /topics/{tid}/ignore: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /topics/{tid}/ignore: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /topics/{tid}/ignore: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /topics/{tid}/ignore: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ DELETE /topics/{tid}/ignore: should not error out when called (covered 23)
    âœ˜ DELETE /topics/{tid}/ignore: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /topics/{tid}/ignore: response body should match schema definition (covered 0)
    âœ˜ DELETE /topics/{tid}/ignore: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /topics/{tid}/ignore: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /topics/{tid}/tags: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /topics/{tid}/tags: should have examples when parameters are present (covered 0)
    âœ˜ PUT /topics/{tid}/tags: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ PUT /topics/{tid}/tags: should not error out when called (covered 223)
    âœ˜ PUT /topics/{tid}/tags: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /topics/{tid}/tags: response body should match schema definition (covered 0)
    âœ˜ PUT /topics/{tid}/tags: should successfully re-login if needed (covered 0)
    âœ˜ PUT /topics/{tid}/tags: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /topics/{tid}/tags: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /topics/{tid}/tags: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /topics/{tid}/tags: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ DELETE /topics/{tid}/tags: should not error out when called (covered 133)
    âœ˜ DELETE /topics/{tid}/tags: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /topics/{tid}/tags: response body should match schema definition (covered 0)
    âœ˜ DELETE /topics/{tid}/tags: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /topics/{tid}/tags: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /topics/{tid}/thumbs: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /topics/{tid}/thumbs: should have examples when parameters are present (covered 0)
    âœ˜ GET /topics/{tid}/thumbs: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ GET /topics/{tid}/thumbs: should not error out when called (covered 95)
    âœ˜ GET /topics/{tid}/thumbs: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /topics/{tid}/thumbs: response body should match schema definition (covered 0)
    âœ˜ GET /topics/{tid}/thumbs: should successfully re-login if needed (covered 0)
    âœ˜ GET /topics/{tid}/thumbs: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /topics/{tid}/thumbs: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /topics/{tid}/thumbs: should have examples when parameters are present (covered 0)
    âœ˜ POST /topics/{tid}/thumbs: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ POST /topics/{tid}/thumbs: should not error out when called (covered 87)
    ~ POST /topics/{tid}/thumbs: response status code should match one of the schema defined responses (covered 3)
    ~ POST /topics/{tid}/thumbs: response body should match schema definition (covered 26)
    ~ POST /topics/{tid}/thumbs: should successfully re-login if needed (covered 50)
    âœ˜ POST /topics/{tid}/thumbs: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /topics/{tid}/thumbs: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /topics/{tid}/thumbs: should have examples when parameters are present (covered 0)
    âœ˜ PUT /topics/{tid}/thumbs: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ PUT /topics/{tid}/thumbs: should not error out when called (covered 76)
    âœ˜ PUT /topics/{tid}/thumbs: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /topics/{tid}/thumbs: response body should match schema definition (covered 0)
    âœ˜ PUT /topics/{tid}/thumbs: should successfully re-login if needed (covered 0)
    âœ˜ PUT /topics/{tid}/thumbs: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /topics/{tid}/thumbs: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /topics/{tid}/thumbs: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /topics/{tid}/thumbs: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ DELETE /topics/{tid}/thumbs: should not error out when called (covered 136)
    âœ˜ DELETE /topics/{tid}/thumbs: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /topics/{tid}/thumbs: response body should match schema definition (covered 0)
    âœ˜ DELETE /topics/{tid}/thumbs: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /topics/{tid}/thumbs: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /topics/{tid}/thumbs/order: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /topics/{tid}/thumbs/order: should have examples when parameters are present (covered 0)
    âœ˜ PUT /topics/{tid}/thumbs/order: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ PUT /topics/{tid}/thumbs/order: should not error out when called (covered 112)
    âœ˜ PUT /topics/{tid}/thumbs/order: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /topics/{tid}/thumbs/order: response body should match schema definition (covered 0)
    âœ˜ PUT /topics/{tid}/thumbs/order: should successfully re-login if needed (covered 0)
    âœ˜ PUT /topics/{tid}/thumbs/order: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /topics/{tid}/events: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /topics/{tid}/events: should have examples when parameters are present (covered 0)
    âœ˜ GET /topics/{tid}/events: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ GET /topics/{tid}/events: should not error out when called (covered 152)
    âœ˜ GET /topics/{tid}/events: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /topics/{tid}/events: response body should match schema definition (covered 0)
    âœ˜ GET /topics/{tid}/events: should successfully re-login if needed (covered 0)
    âœ˜ GET /topics/{tid}/events: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /topics/{tid}/events/{eventId}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /topics/{tid}/events/{eventId}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /topics/{tid}/events/{eventId}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ DELETE /topics/{tid}/events/{eventId}: should not error out when called (covered 74)
    âœ˜ DELETE /topics/{tid}/events/{eventId}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /topics/{tid}/events/{eventId}: response body should match schema definition (covered 0)
    âœ˜ DELETE /topics/{tid}/events/{eventId}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /topics/{tid}/events/{eventId}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /posts/{pid}: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /posts/{pid}: should have examples when parameters are present (covered 0)
    âœ˜ GET /posts/{pid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ GET /posts/{pid}: should not error out when called (covered 57)
    âœ˜ GET /posts/{pid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /posts/{pid}: response body should match schema definition (covered 0)
    âœ˜ GET /posts/{pid}: should successfully re-login if needed (covered 0)
    âœ˜ GET /posts/{pid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /posts/{pid}: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /posts/{pid}: should have examples when parameters are present (covered 0)
    âœ˜ PUT /posts/{pid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ PUT /posts/{pid}: should not error out when called (covered 192)
    âœ˜ PUT /posts/{pid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /posts/{pid}: response body should match schema definition (covered 0)
    âœ˜ PUT /posts/{pid}: should successfully re-login if needed (covered 0)
    âœ˜ PUT /posts/{pid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /posts/{pid}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /posts/{pid}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /posts/{pid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ DELETE /posts/{pid}: should not error out when called (covered 341)
    âœ˜ DELETE /posts/{pid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /posts/{pid}: response body should match schema definition (covered 0)
    âœ˜ DELETE /posts/{pid}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /posts/{pid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /posts/{pid}/state: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /posts/{pid}/state: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /posts/{pid}/state: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ DELETE /posts/{pid}/state: should not error out when called (covered 160)
    âœ˜ DELETE /posts/{pid}/state: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /posts/{pid}/state: response body should match schema definition (covered 0)
    âœ˜ DELETE /posts/{pid}/state: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /posts/{pid}/state: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /posts/{pid}/state: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /posts/{pid}/state: should have examples when parameters are present (covered 0)
    âœ˜ PUT /posts/{pid}/state: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ PUT /posts/{pid}/state: should not error out when called (covered 160)
    âœ˜ PUT /posts/{pid}/state: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /posts/{pid}/state: response body should match schema definition (covered 0)
    âœ˜ PUT /posts/{pid}/state: should successfully re-login if needed (covered 0)
    âœ˜ PUT /posts/{pid}/state: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /posts/{pid}/move: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /posts/{pid}/move: should have examples when parameters are present (covered 0)
    âœ˜ PUT /posts/{pid}/move: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ PUT /posts/{pid}/move: should not error out when called (covered 290)
    âœ˜ PUT /posts/{pid}/move: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /posts/{pid}/move: response body should match schema definition (covered 0)
    âœ˜ PUT /posts/{pid}/move: should successfully re-login if needed (covered 0)
    âœ˜ PUT /posts/{pid}/move: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /posts/{pid}/vote: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /posts/{pid}/vote: should have examples when parameters are present (covered 0)
    âœ˜ PUT /posts/{pid}/vote: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ PUT /posts/{pid}/vote: should not error out when called (covered 78)
    âœ˜ PUT /posts/{pid}/vote: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /posts/{pid}/vote: response body should match schema definition (covered 0)
    âœ˜ PUT /posts/{pid}/vote: should successfully re-login if needed (covered 0)
    âœ˜ PUT /posts/{pid}/vote: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /posts/{pid}/vote: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /posts/{pid}/vote: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /posts/{pid}/vote: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ DELETE /posts/{pid}/vote: should not error out when called (covered 61)
    âœ˜ DELETE /posts/{pid}/vote: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /posts/{pid}/vote: response body should match schema definition (covered 0)
    âœ˜ DELETE /posts/{pid}/vote: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /posts/{pid}/vote: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /posts/{pid}/bookmark: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /posts/{pid}/bookmark: should have examples when parameters are present (covered 0)
    âœ˜ PUT /posts/{pid}/bookmark: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /posts/{pid}/bookmark: should not error out when called (covered 0)
    âœ˜ PUT /posts/{pid}/bookmark: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /posts/{pid}/bookmark: response body should match schema definition (covered 0)
    âœ˜ PUT /posts/{pid}/bookmark: should successfully re-login if needed (covered 0)
    âœ˜ PUT /posts/{pid}/bookmark: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /posts/{pid}/bookmark: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /posts/{pid}/bookmark: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /posts/{pid}/bookmark: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /posts/{pid}/bookmark: should not error out when called (covered 0)
    âœ˜ DELETE /posts/{pid}/bookmark: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /posts/{pid}/bookmark: response body should match schema definition (covered 0)
    âœ˜ DELETE /posts/{pid}/bookmark: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /posts/{pid}/bookmark: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /posts/{pid}/diffs: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /posts/{pid}/diffs: should have examples when parameters are present (covered 0)
    âœ˜ GET /posts/{pid}/diffs: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ GET /posts/{pid}/diffs: should not error out when called (covered 61)
    âœ˜ GET /posts/{pid}/diffs: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /posts/{pid}/diffs: response body should match schema definition (covered 0)
    âœ˜ GET /posts/{pid}/diffs: should successfully re-login if needed (covered 0)
    âœ˜ GET /posts/{pid}/diffs: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /posts/{pid}/diffs/{since}: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /posts/{pid}/diffs/{since}: should have examples when parameters are present (covered 0)
    âœ˜ GET /posts/{pid}/diffs/{since}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ GET /posts/{pid}/diffs/{since}: should not error out when called (covered 86)
    âœ˜ GET /posts/{pid}/diffs/{since}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /posts/{pid}/diffs/{since}: response body should match schema definition (covered 0)
    âœ˜ GET /posts/{pid}/diffs/{since}: should successfully re-login if needed (covered 0)
    âœ˜ GET /posts/{pid}/diffs/{since}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /posts/{pid}/diffs/{since}: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /posts/{pid}/diffs/{since}: should have examples when parameters are present (covered 0)
    âœ˜ PUT /posts/{pid}/diffs/{since}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ PUT /posts/{pid}/diffs/{since}: should not error out when called (covered 191)
    âœ˜ PUT /posts/{pid}/diffs/{since}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /posts/{pid}/diffs/{since}: response body should match schema definition (covered 0)
    âœ˜ PUT /posts/{pid}/diffs/{since}: should successfully re-login if needed (covered 0)
    âœ˜ PUT /posts/{pid}/diffs/{since}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /posts/{pid}/diffs/{timestamp}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /posts/{pid}/diffs/{timestamp}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /posts/{pid}/diffs/{timestamp}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ DELETE /posts/{pid}/diffs/{timestamp}: should not error out when called (covered 90)
    âœ˜ DELETE /posts/{pid}/diffs/{timestamp}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /posts/{pid}/diffs/{timestamp}: response body should match schema definition (covered 0)
    âœ˜ DELETE /posts/{pid}/diffs/{timestamp}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /posts/{pid}/diffs/{timestamp}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /chats/: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /chats/: should have examples when parameters are present (covered 0)
    âœ˜ GET /chats/: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ GET /chats/: should not error out when called (covered 0)
    âœ˜ GET /chats/: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /chats/: response body should match schema definition (covered 0)
    âœ˜ GET /chats/: should successfully re-login if needed (covered 0)
    âœ˜ GET /chats/: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /chats/: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /chats/: should have examples when parameters are present (covered 0)
    âœ˜ POST /chats/: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ POST /chats/: should not error out when called (covered 0)
    âœ˜ POST /chats/: response status code should match one of the schema defined responses (covered 0)
    âœ˜ POST /chats/: response body should match schema definition (covered 0)
    âœ˜ POST /chats/: should successfully re-login if needed (covered 0)
    âœ˜ POST /chats/: should back out of a registration interstitial if needed (covered 0)
    âœ˜ HEAD /chats/{roomId}: should have each path parameter defined in its context (covered 0)
    âœ˜ HEAD /chats/{roomId}: should have examples when parameters are present (covered 0)
    âœ˜ HEAD /chats/{roomId}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ HEAD /chats/{roomId}: should not error out when called (covered 0)
    âœ˜ HEAD /chats/{roomId}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ HEAD /chats/{roomId}: response body should match schema definition (covered 0)
    âœ˜ HEAD /chats/{roomId}: should successfully re-login if needed (covered 0)
    âœ˜ HEAD /chats/{roomId}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /chats/{roomId}: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /chats/{roomId}: should have examples when parameters are present (covered 0)
    âœ˜ GET /chats/{roomId}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ GET /chats/{roomId}: should not error out when called (covered 0)
    âœ˜ GET /chats/{roomId}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /chats/{roomId}: response body should match schema definition (covered 0)
    âœ˜ GET /chats/{roomId}: should successfully re-login if needed (covered 0)
    âœ˜ GET /chats/{roomId}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /chats/{roomId}: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /chats/{roomId}: should have examples when parameters are present (covered 0)
    âœ˜ POST /chats/{roomId}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ POST /chats/{roomId}: should not error out when called (covered 0)
    âœ˜ POST /chats/{roomId}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ POST /chats/{roomId}: response body should match schema definition (covered 0)
    âœ˜ POST /chats/{roomId}: should successfully re-login if needed (covered 0)
    âœ˜ POST /chats/{roomId}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /chats/{roomId}: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /chats/{roomId}: should have examples when parameters are present (covered 0)
    âœ˜ PUT /chats/{roomId}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /chats/{roomId}: should not error out when called (covered 0)
    âœ˜ PUT /chats/{roomId}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /chats/{roomId}: response body should match schema definition (covered 0)
    âœ˜ PUT /chats/{roomId}: should successfully re-login if needed (covered 0)
    âœ˜ PUT /chats/{roomId}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /chats/{roomId}/users: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /chats/{roomId}/users: should have examples when parameters are present (covered 0)
    âœ˜ GET /chats/{roomId}/users: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ GET /chats/{roomId}/users: should not error out when called (covered 0)
    âœ˜ GET /chats/{roomId}/users: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /chats/{roomId}/users: response body should match schema definition (covered 0)
    âœ˜ GET /chats/{roomId}/users: should successfully re-login if needed (covered 0)
    âœ˜ GET /chats/{roomId}/users: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /chats/{roomId}/users: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /chats/{roomId}/users: should have examples when parameters are present (covered 0)
    âœ˜ POST /chats/{roomId}/users: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ POST /chats/{roomId}/users: should not error out when called (covered 0)
    âœ˜ POST /chats/{roomId}/users: response status code should match one of the schema defined responses (covered 0)
    âœ˜ POST /chats/{roomId}/users: response body should match schema definition (covered 0)
    âœ˜ POST /chats/{roomId}/users: should successfully re-login if needed (covered 0)
    âœ˜ POST /chats/{roomId}/users: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /chats/{roomId}/users: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /chats/{roomId}/users: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /chats/{roomId}/users: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /chats/{roomId}/users: should not error out when called (covered 0)
    âœ˜ DELETE /chats/{roomId}/users: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /chats/{roomId}/users: response body should match schema definition (covered 0)
    âœ˜ DELETE /chats/{roomId}/users: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /chats/{roomId}/users: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /chats/{roomId}/users/{uid}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /chats/{roomId}/users/{uid}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /chats/{roomId}/users/{uid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /chats/{roomId}/users/{uid}: should not error out when called (covered 0)
    âœ˜ DELETE /chats/{roomId}/users/{uid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /chats/{roomId}/users/{uid}: response body should match schema definition (covered 0)
    âœ˜ DELETE /chats/{roomId}/users/{uid}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /chats/{roomId}/users/{uid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /chats/{roomId}/messages: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /chats/{roomId}/messages: should have examples when parameters are present (covered 0)
    âœ˜ GET /chats/{roomId}/messages: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ GET /chats/{roomId}/messages: should not error out when called (covered 0)
    âœ˜ GET /chats/{roomId}/messages: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /chats/{roomId}/messages: response body should match schema definition (covered 0)
    âœ˜ GET /chats/{roomId}/messages: should successfully re-login if needed (covered 0)
    âœ˜ GET /chats/{roomId}/messages: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /chats/{roomId}/messages/{mid}: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /chats/{roomId}/messages/{mid}: should have examples when parameters are present (covered 0)
    âœ˜ GET /chats/{roomId}/messages/{mid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ GET /chats/{roomId}/messages/{mid}: should not error out when called (covered 0)
    âœ˜ GET /chats/{roomId}/messages/{mid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /chats/{roomId}/messages/{mid}: response body should match schema definition (covered 0)
    âœ˜ GET /chats/{roomId}/messages/{mid}: should successfully re-login if needed (covered 0)
    âœ˜ GET /chats/{roomId}/messages/{mid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /chats/{roomId}/messages/{mid}: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /chats/{roomId}/messages/{mid}: should have examples when parameters are present (covered 0)
    âœ˜ PUT /chats/{roomId}/messages/{mid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /chats/{roomId}/messages/{mid}: should not error out when called (covered 0)
    âœ˜ PUT /chats/{roomId}/messages/{mid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /chats/{roomId}/messages/{mid}: response body should match schema definition (covered 0)
    âœ˜ PUT /chats/{roomId}/messages/{mid}: should successfully re-login if needed (covered 0)
    âœ˜ PUT /chats/{roomId}/messages/{mid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /chats/{roomId}/messages/{mid}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /chats/{roomId}/messages/{mid}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /chats/{roomId}/messages/{mid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /chats/{roomId}/messages/{mid}: should not error out when called (covered 0)
    âœ˜ DELETE /chats/{roomId}/messages/{mid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /chats/{roomId}/messages/{mid}: response body should match schema definition (covered 0)
    âœ˜ DELETE /chats/{roomId}/messages/{mid}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /chats/{roomId}/messages/{mid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /chats/{roomId}/messages/{mid}: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /chats/{roomId}/messages/{mid}: should have examples when parameters are present (covered 0)
    âœ˜ POST /chats/{roomId}/messages/{mid}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ POST /chats/{roomId}/messages/{mid}: should not error out when called (covered 0)
    âœ˜ POST /chats/{roomId}/messages/{mid}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ POST /chats/{roomId}/messages/{mid}: response body should match schema definition (covered 0)
    âœ˜ POST /chats/{roomId}/messages/{mid}: should successfully re-login if needed (covered 0)
    âœ˜ POST /chats/{roomId}/messages/{mid}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /flags/: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /flags/: should have examples when parameters are present (covered 0)
    âœ˜ POST /flags/: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ POST /flags/: should not error out when called (covered 164)
    âœ˜ POST /flags/: response status code should match one of the schema defined responses (covered 0)
    âœ˜ POST /flags/: response body should match schema definition (covered 0)
    âœ˜ POST /flags/: should successfully re-login if needed (covered 0)
    âœ˜ POST /flags/: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /flags/{flagId}: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /flags/{flagId}: should have examples when parameters are present (covered 0)
    âœ˜ GET /flags/{flagId}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ GET /flags/{flagId}: should not error out when called (covered 61)
    âœ˜ GET /flags/{flagId}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /flags/{flagId}: response body should match schema definition (covered 0)
    âœ˜ GET /flags/{flagId}: should successfully re-login if needed (covered 0)
    âœ˜ GET /flags/{flagId}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /flags/{flagId}: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /flags/{flagId}: should have examples when parameters are present (covered 0)
    âœ˜ PUT /flags/{flagId}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ PUT /flags/{flagId}: should not error out when called (covered 61)
    âœ˜ PUT /flags/{flagId}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /flags/{flagId}: response body should match schema definition (covered 0)
    âœ˜ PUT /flags/{flagId}: should successfully re-login if needed (covered 0)
    âœ˜ PUT /flags/{flagId}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /flags/{flagId}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /flags/{flagId}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /flags/{flagId}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ DELETE /flags/{flagId}: should not error out when called (covered 61)
    âœ˜ DELETE /flags/{flagId}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /flags/{flagId}: response body should match schema definition (covered 0)
    âœ˜ DELETE /flags/{flagId}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /flags/{flagId}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ POST /flags/{flagId}/notes: should have each path parameter defined in its context (covered 0)
    âœ˜ POST /flags/{flagId}/notes: should have examples when parameters are present (covered 0)
    âœ˜ POST /flags/{flagId}/notes: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ POST /flags/{flagId}/notes: should not error out when called (covered 61)
    âœ˜ POST /flags/{flagId}/notes: response status code should match one of the schema defined responses (covered 0)
    âœ˜ POST /flags/{flagId}/notes: response body should match schema definition (covered 0)
    âœ˜ POST /flags/{flagId}/notes: should successfully re-login if needed (covered 0)
    âœ˜ POST /flags/{flagId}/notes: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /flags/{flagId}/notes/{datetime}: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /flags/{flagId}/notes/{datetime}: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /flags/{flagId}/notes/{datetime}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    ~ DELETE /flags/{flagId}/notes/{datetime}: should not error out when called (covered 61)
    âœ˜ DELETE /flags/{flagId}/notes/{datetime}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /flags/{flagId}/notes/{datetime}: response body should match schema definition (covered 0)
    âœ˜ DELETE /flags/{flagId}/notes/{datetime}: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /flags/{flagId}/notes/{datetime}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /admin/settings/{setting}: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /admin/settings/{setting}: should have examples when parameters are present (covered 0)
    âœ˜ PUT /admin/settings/{setting}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /admin/settings/{setting}: should not error out when called (covered 0)
    âœ˜ PUT /admin/settings/{setting}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /admin/settings/{setting}: response body should match schema definition (covered 0)
    âœ˜ PUT /admin/settings/{setting}: should successfully re-login if needed (covered 0)
    âœ˜ PUT /admin/settings/{setting}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /admin/analytics: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /admin/analytics: should have examples when parameters are present (covered 0)
    âœ˜ GET /admin/analytics: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ GET /admin/analytics: should not error out when called (covered 0)
    âœ˜ GET /admin/analytics: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /admin/analytics: response body should match schema definition (covered 0)
    âœ˜ GET /admin/analytics: should successfully re-login if needed (covered 0)
    âœ˜ GET /admin/analytics: should back out of a registration interstitial if needed (covered 0)
    âœ˜ GET /admin/analytics/{set}: should have each path parameter defined in its context (covered 0)
    âœ˜ GET /admin/analytics/{set}: should have examples when parameters are present (covered 0)
    âœ˜ GET /admin/analytics/{set}: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ GET /admin/analytics/{set}: should not error out when called (covered 0)
    âœ˜ GET /admin/analytics/{set}: response status code should match one of the schema defined responses (covered 0)
    âœ˜ GET /admin/analytics/{set}: response body should match schema definition (covered 0)
    âœ˜ GET /admin/analytics/{set}: should successfully re-login if needed (covered 0)
    âœ˜ GET /admin/analytics/{set}: should back out of a registration interstitial if needed (covered 0)
    âœ˜ DELETE /files/: should have each path parameter defined in its context (covered 0)
    âœ˜ DELETE /files/: should have examples when parameters are present (covered 0)
    âœ˜ DELETE /files/: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ DELETE /files/: should not error out when called (covered 0)
    âœ˜ DELETE /files/: response status code should match one of the schema defined responses (covered 0)
    âœ˜ DELETE /files/: response body should match schema definition (covered 0)
    âœ˜ DELETE /files/: should successfully re-login if needed (covered 0)
    âœ˜ DELETE /files/: should back out of a registration interstitial if needed (covered 0)
    âœ˜ PUT /files/folder: should have each path parameter defined in its context (covered 0)
    âœ˜ PUT /files/folder: should have examples when parameters are present (covered 0)
    âœ˜ PUT /files/folder: should contain a valid request body (if present) with application/json or multipart/form-data type if POST/PUT/DELETE (covered 0)
    âœ˜ PUT /files/folder: should not error out when called (covered 0)
    âœ˜ PUT /files/folder: response status code should match one of the schema defined responses (covered 0)
    âœ˜ PUT /files/folder: response body should match schema definition (covered 0)
    âœ˜ PUT /files/folder: should successfully re-login if needed (covered 0)
    âœ˜ PUT /files/folder: should back out of a registration interstitial if needed (covered 0)
    âœ˜ User should get admins and mods (covered 0)
    âœ˜ User should allow user to login even if password is weak (covered 0)
    âœ˜ User .create(), when created should be created properly (covered 0)
    âœ˜ User .create(), when created should have a valid email, if using an email (covered 0)
    âœ˜ User .create(), when created should error with invalid password (covered 0)
    âœ˜ User .create(), when created should error with a too long password (covered 0)
    âœ˜ User .create(), when created should error if username is already taken or rename user (covered 0)
    âœ˜ User .create(), when created should create student account properly (covered 0)
    âœ˜ User .create(), when created should create instructor account properly (covered 0)
    âœ˜ User .create(), when created should error if email is already taken (covered 0)
    âœ˜ User .uniqueUsername() should deal with collisions (covered 0)
    âœ˜ User .isModerator() should return false (covered 0)
    âœ˜ User .isModerator() should return two false results (covered 0)
    âœ˜ User .getModeratorUids() should retrieve all users with moderator bit in category privilege (covered 0)
    ~ User .isReadyToPost() should error when a user makes two posts in quick succession (covered 774)
    ~ User .isReadyToPost() should allow a post if the last post time is > 10 seconds (covered 774)
    ~ User .isReadyToPost() should error when a new user posts if the last post time is 10 < 30 seconds (covered 122)
    ~ User .isReadyToPost() should not error if a non-newbie user posts if the last post time is 10 < 30 seconds (covered 774)
    ~ User .isReadyToPost() should only post 1 topic out of 10 (covered 777)
    âœ˜ User .search() should return an object containing an array of matching users (covered 0)
    âœ˜ User .search() should search user (covered 0)
    âœ˜ User .search() should error for guest (covered 0)
    âœ˜ User .search() should error with invalid data (covered 0)
    âœ˜ User .search() should error for unprivileged user (covered 0)
    âœ˜ User .search() should search users by ip (covered 0)
    âœ˜ User .search() should search users by uid (covered 0)
    âœ˜ User .search() should search users by fullname (covered 0)
    âœ˜ User .search() should return empty array if query is empty (covered 0)
    âœ˜ User .search() should filter users (covered 0)
    âœ˜ User .search() should sort results by username (covered 0)
    âœ˜ User .delete() should delete a user account (covered 0)
    ~ User .delete() should not re-add user to users:postcount if post is purged after user account deletion (covered 793)
    ~ User .delete() should not re-add user to users:reputation if post is upvoted after user account deletion (covered 776)
    âœ˜ User .delete() should delete user even if they started a chat (covered 0)
    âœ˜ User passwordReset .generate() should generate a new reset code (covered 0)
    âœ˜ User passwordReset .generate() should invalidate a previous generated reset code (covered 0)
    âœ˜ User passwordReset .validate() should ensure that this new code is valid (covered 0)
    âœ˜ User passwordReset .validate() should correctly identify an invalid code (covered 0)
    âœ˜ User passwordReset .send() should create a new reset code and reset password (covered 0)
    âœ˜ User passwordReset .commit() should update the user's password and confirm their email (covered 0)
    âœ˜ User passwordReset .should error if same password is used for reset (covered 0)
    âœ˜ User passwordReset should not validate email if password reset is due to expiry (covered 0)
    âœ˜ User hash methods should return uid from email (covered 0)
    âœ˜ User hash methods should return uid from username (covered 0)
    âœ˜ User hash methods should return uid from userslug (covered 0)
    âœ˜ User hash methods should get user data even if one uid is NaN (covered 0)
    âœ˜ User hash methods should not return private user data (covered 0)
    âœ˜ User hash methods should not return password even if explicitly requested (covered 0)
    âœ˜ User hash methods should not modify the fields array passed in (covered 0)
    âœ˜ User hash methods should return an icon text and valid background if username and picture is explicitly requested (covered 0)
    âœ˜ User hash methods should return a valid background, even if an invalid background colour is set (covered 0)
    âœ˜ User hash methods should return private data if field is whitelisted (covered 0)
    âœ˜ User hash methods should return 0 as uid if username is falsy (covered 0)
    âœ˜ User hash methods should get username by userslug (covered 0)
    âœ˜ User hash methods should get uids by emails (covered 0)
    âœ˜ User hash methods should not get groupTitle for guests (covered 0)
    âœ˜ User hash methods should load guest data (covered 0)
    âœ˜ User profile methods should return error if not logged in (covered 0)
    âœ˜ User profile methods should return error if data is invalid (covered 0)
    âœ˜ User profile methods should return error if data is missing uid (covered 0)
    âœ˜ User profile methods should change a user's password (covered 0)
    âœ˜ User profile methods should not let user change another user's password (covered 0)
    âœ˜ User profile methods should not let user change admin's password (covered 0)
    âœ˜ User profile methods should let admin change another users password (covered 0)
    âœ˜ User profile methods should not let admin change their password if current password is incorrect (covered 0)
    âœ˜ User profile methods should change username (covered 0)
    âœ˜ User profile methods should not let setting an empty username (covered 0)
    âœ˜ User profile methods should let updating profile if current username is above max length and it is not being changed (covered 0)
    âœ˜ User profile methods should not update a user's username if it did not change (covered 0)
    âœ˜ User profile methods should not update a user's username if a password is not supplied (covered 0)
    âœ˜ User profile methods should send validation email (covered 0)
    âœ˜ User profile methods should update cover image (covered 0)
    âœ˜ User profile methods should remove cover image (covered 0)
    âœ˜ User profile methods should set user status (covered 0)
    âœ˜ User profile methods should fail for invalid status (covered 0)
    âœ˜ User profile methods should get user status (covered 0)
    âœ˜ User profile methods should change user picture (covered 0)
    âœ˜ User profile methods should let you set an external image (covered 0)
    âœ˜ User profile methods should fail to change user picture with invalid data (covered 0)
    âœ˜ User profile methods should fail to change user picture with invalid uid (covered 0)
    âœ˜ User profile methods should set user picture to uploaded (covered 0)
    âœ˜ User profile methods should return error if profile image uploads disabled (covered 0)
    âœ˜ User profile methods should return error if profile image has no mime type (covered 0)
    âœ˜ User profile methods should load profile page (covered 0)
    âœ˜ User profile methods should load settings page (covered 0)
    âœ˜ User profile methods should load edit page (covered 0)
    âœ˜ User profile methods should load edit/email page (covered 0)
    âœ˜ User profile methods should load user's groups page (covered 0)
    âœ˜ User profile methods .updateProfile() should update a user's profile (covered 0)
    âœ˜ User profile methods .updateProfile() should also generate an email confirmation code for the changed email (covered 0)
    âœ˜ User profile methods user.uploadCroppedPicture should upload cropped profile picture (covered 0)
    âœ˜ User profile methods user.uploadCroppedPicture should upload cropped profile picture in chunks (covered 0)
    âœ˜ User profile methods user.uploadCroppedPicture should error if both file and imageData are missing (covered 0)
    âœ˜ User profile methods user.uploadCroppedPicture should error if file size is too big (covered 0)
    âœ˜ User profile methods user.uploadCroppedPicture should not allow image data with bad MIME type to be passed in (covered 0)
    âœ˜ User profile methods user.uploadCroppedPicture should get profile pictures (covered 0)
    âœ˜ User profile methods user.uploadCroppedPicture should get default profile avatar (covered 0)
    âœ˜ User profile methods user.uploadCroppedPicture should fail to get profile pictures with invalid data (covered 0)
    âœ˜ User profile methods user.uploadCroppedPicture should remove uploaded picture (covered 0)
    âœ˜ User profile methods user.uploadCroppedPicture should fail to remove uploaded picture with invalid-data (covered 0)
    âœ˜ User user info should return error if there is no ban reason (covered 0)
    âœ˜ User user info should get history from set (covered 0)
    ~ User user info should return the correct ban reason (covered 8)
    âœ˜ User user info should ban user permanently (covered 0)
    âœ˜ User user info should ban user temporarily (covered 0)
    âœ˜ User user info should error if until is NaN (covered 0)
    âœ˜ User user info should be member of "banned-users" system group only after a ban (covered 0)
    âœ˜ User user info should restore system group memberships after an unban (for an unverified user) (covered 0)
    âœ˜ User user info should restore system group memberships after an unban (for a verified user) (covered 0)
    ~ User user info should be able to post in category for banned users (covered 776)
    âœ˜ User Digest.getSubscribers should accurately build digest list given ACP default "null" (not set) (covered 0)
    âœ˜ User Digest.getSubscribers should accurately build digest list given ACP default "day" (covered 0)
    âœ˜ User Digest.getSubscribers should accurately build digest list given ACP default "week" (covered 0)
    âœ˜ User Digest.getSubscribers should accurately build digest list given ACP default "off" (covered 0)
    ~ User digests should send digests (covered 569)
    âœ˜ User digests should not send digests (covered 0)
    âœ˜ User digests should get delivery times (covered 0)
    âœ˜ User digests unsubscribe via POST should unsubscribe from digest if one-click unsubscribe is POSTed (covered 0)
    âœ˜ User digests unsubscribe via POST should unsubscribe from notifications if one-click unsubscribe is POSTed (covered 0)
    âœ˜ User digests unsubscribe via POST should return errors on missing template in token (covered 0)
    âœ˜ User digests unsubscribe via POST should return errors on wrong template in token (covered 0)
    ~ User digests unsubscribe via POST should return errors on missing token (covered 31)
    âœ˜ User digests unsubscribe via POST should return errors on token signed with wrong secret (verify-failure) (covered 0)
    âœ˜ User socket methods should fail with invalid data (covered 0)
    âœ˜ User socket methods should return true if user/group exists (covered 0)
    âœ˜ User socket methods should return false if user/group does not exists (covered 0)
    âœ˜ User socket methods should delete user (covered 0)
    âœ˜ User socket methods should clean profile images after account deletion (covered 0)
    âœ˜ User socket methods should fail to delete user with wrong password (covered 0)
    âœ˜ User socket methods should delete user with correct password (covered 0)
    âœ˜ User socket methods should fail to delete user if account deletion is not allowed (covered 0)
    âœ˜ User socket methods should send reset email (covered 0)
    âœ˜ User socket methods should return invalid-data error (covered 0)
    âœ˜ User socket methods should not error (covered 0)
    âœ˜ User socket methods should commit reset (covered 0)
    âœ˜ User socket methods should save user settings (covered 0)
    âœ˜ User socket methods should properly escape homePageRoute (covered 0)
    âœ˜ User socket methods should error if language is invalid (covered 0)
    âœ˜ User socket methods should set moderation note (covered 0)
    âœ˜ User socket methods should get unread count 0 for guest (covered 0)
    ~ User socket methods should get unread count for user (covered 251)
    âœ˜ User socket methods should get unread chat count 0 for guest (covered 0)
    âœ˜ User socket methods should get unread chat count for user (covered 0)
    âœ˜ User socket methods should get unread counts 0 for guest (covered 0)
    ~ User socket methods should get unread counts for user (covered 241)
    âœ˜ User socket methods should get user data by uid (covered 0)
    âœ˜ User socket methods should get user data by username (covered 0)
    âœ˜ User socket methods should get user data by email (covered 0)
    âœ˜ User socket methods should check/consent gdpr status (covered 0)
    âœ˜ User approval queue should add user to approval queue (covered 0)
    âœ˜ User approval queue should fail to add user to queue if username is taken (covered 0)
    âœ˜ User approval queue should fail to add user to queue if email is taken (covered 0)
    âœ˜ User approval queue should reject user registration (covered 0)
    âœ˜ User approval queue should accept user registration (covered 0)
    âœ˜ User approval queue should trim username and add user to registration queue (covered 0)
    âœ˜ User invites when inviter is not an admin and does not have invite privilege should error if user does not have invite privilege (covered 0)
    âœ˜ User invites when inviter is not an admin and does not have invite privilege should error out if user tries to use an inviter's uid via the API (covered 0)
    âœ˜ User invites when inviter has invite privilege should error with invalid data (covered 0)
    âœ˜ User invites when inviter has invite privilege should error if user is not admin and type is admin-invite-only (covered 0)
    âœ˜ User invites when inviter has invite privilege should send invitation email (without groups to be joined) (covered 0)
    âœ˜ User invites when inviter has invite privilege should send multiple invitation emails (with a public group to be joined) (covered 0)
    âœ˜ User invites when inviter has invite privilege should error if the user has not permission to invite to the group (covered 0)
    âœ˜ User invites when inviter has invite privilege should error if a non-admin tries to invite to the administrators group (covered 0)
    âœ˜ User invites when inviter has invite privilege should to invite to own private group (covered 0)
    âœ˜ User invites when inviter has invite privilege should to invite to multiple groups (covered 0)
    âœ˜ User invites when inviter has invite privilege should error if tries to invite to hidden group (covered 0)
    âœ˜ User invites when inviter has invite privilege should error if ouf of invitations (covered 0)
    âœ˜ User invites when inviter has invite privilege should send invitation email after maximumInvites increased (covered 0)
    âœ˜ User invites when inviter has invite privilege should error if invite is sent via API with a different UID (covered 0)
    âœ˜ User invites when inviter has invite privilege should succeed if email exists but not actually send an invite (covered 0)
    âœ˜ User invites when inviter is an admin should escape email (covered 0)
    âœ˜ User invites when inviter is an admin should invite to the administrators group if inviter is an admin (covered 0)
    âœ˜ User invites after invites checks should get user's invites (covered 0)
    âœ˜ User invites after invites checks should get all invites (covered 0)
    âœ˜ User invites after invites checks should fail to verify invitation with invalid data (covered 0)
    âœ˜ User invites after invites checks should fail to verify invitation with invalid email (covered 0)
    âœ˜ User invites after invites checks should verify installation with no errors (covered 0)
    âœ˜ User invites after invites checks should error with invalid username (covered 0)
    âœ˜ User invites after invites checks should delete invitation (covered 0)
    âœ˜ User invites after invites checks should delete invitation key (covered 0)
    âœ˜ User invites after invites checks should joined the groups from invitation after registration (covered 0)
    âœ˜ User invites invite groups should show a list of groups for adding to an invite (covered 0)
    âœ˜ User invites invite groups should error out if you request invite groups for another uid (covered 0)
    âœ˜ User email confirm should error with invalid code (covered 0)
    âœ˜ User email confirm should confirm email of user (covered 0)
    âœ˜ User email confirm should confirm email of user by uid (covered 0)
    âœ˜ User email confirm should remove the email from a different account if the email is already in use (covered 0)
    âœ˜ User user jobs should start user jobs (covered 0)
    âœ˜ User user jobs should stop user jobs (covered 0)
    âœ˜ User user jobs should send digest (covered 0)
    âœ˜ User hideEmail/hideFullname should hide unconfirmed emails on profile pages (covered 0)
    âœ˜ User hideEmail/hideFullname should hide from guests by default (covered 0)
    âœ˜ User hideEmail/hideFullname should hide from unprivileged users by default (covered 0)
    âœ˜ User hideEmail/hideFullname should be visible to self by default (covered 0)
    âœ˜ User hideEmail/hideFullname should be visible to privileged users by default (covered 0)
    âœ˜ User hideEmail/hideFullname should hide from guests (system-wide: hide, by-user: hide) (covered 0)
    âœ˜ User hideEmail/hideFullname should hide from unprivileged users (system-wide: hide, by-user: hide) (covered 0)
    âœ˜ User hideEmail/hideFullname should be visible to self (system-wide: hide, by-user: hide) (covered 0)
    âœ˜ User hideEmail/hideFullname should be visible to privileged users (system-wide: hide, by-user: hide) (covered 0)
    âœ˜ User hideEmail/hideFullname should hide from guests (system-wide: show, by-user: hide) (covered 0)
    âœ˜ User hideEmail/hideFullname should hide from unprivileged users (system-wide: show, by-user: hide) (covered 0)
    âœ˜ User hideEmail/hideFullname should be visible to self (system-wide: show, by-user: hide) (covered 0)
    âœ˜ User hideEmail/hideFullname should be visible to privileged users (system-wide: show, by-user: hide) (covered 0)
    âœ˜ User hideEmail/hideFullname should be visible to guests (system-wide: show, by-user: show) (covered 0)
    âœ˜ User hideEmail/hideFullname should be visible to unprivileged users (system-wide: show, by-user: show) (covered 0)
    âœ˜ User hideEmail/hideFullname should hide from guests (system-wide: hide, by-user: show) (covered 0)
    âœ˜ User hideEmail/hideFullname should hide from unprivileged users (system-wide: hide, by-user: show) (covered 0)
    âœ˜ User hideEmail/hideFullname should be visible to self (system-wide: hide, by-user: show) (covered 0)
    âœ˜ User hideEmail/hideFullname should be visible to privileged users (system-wide: hide, by-user: show) (covered 0)
    âœ˜ User hideEmail/hideFullname should handle array of user data (system-wide: hide) (covered 0)
    ~ User hideEmail/hideFullname should hide fullname in topic list and topic (covered 1249)
    âœ˜ User user blocking methods .toggle() should toggle block (covered 0)
    âœ˜ User user blocking methods .add() should block a uid (covered 0)
    âœ˜ User user blocking methods .add() should automatically increment corresponding user field (covered 0)
    âœ˜ User user blocking methods .add() should error if you try to block the same uid again (covered 0)
    âœ˜ User user blocking methods .remove() should unblock a uid (covered 0)
    âœ˜ User user blocking methods .remove() should automatically decrement corresponding user field (covered 0)
    âœ˜ User user blocking methods .remove() should error if you try to unblock the same uid again (covered 0)
    âœ˜ User user blocking methods .is() should return a Boolean with blocked status for the queried uid (covered 0)
    âœ˜ User user blocking methods .list() should return a list of blocked uids (covered 0)
    âœ˜ User user blocking methods .filter() should remove entries by blocked uids and return filtered set (covered 0)
    âœ˜ User user blocking methods .filter() should allow property argument to be passed in to customise checked property (covered 0)
    âœ˜ User user blocking methods .filter() should not process invalid sets (covered 0)
    âœ˜ User user blocking methods .filter() should process plain sets that just contain uids (covered 0)
    âœ˜ User user blocking methods .filter() should filter uids that are blocking targetUid (covered 0)
    âœ˜ User status/online should return offline if user is guest (covered 0)
    âœ˜ User status/online should return true (covered 0)
    âœ˜ User isPrivilegedOrSelf should return not error if self (covered 0)
    âœ˜ User isPrivilegedOrSelf should not error if privileged (covered 0)
    âœ˜ User isPrivilegedOrSelf should error if not privileged (covered 0)
    âœ˜ User User's subfolder tests (covered 0)
    âœ˜ GET /api/ should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/users/ should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/users/ should be defined in schema docs (covered 0)
    âœ˜ HEAD /api/v3/users/{uid} should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/users/{uid} should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/users/{uid} should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/users/{uid} should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/users/{uid}/picture should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/users/{uid}/content should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/users/{uid}/account should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/users/{uid}/settings should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/users/{uid}/password should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/users/{uid}/follow should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/users/{uid}/follow should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/users/{uid}/ban should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/users/{uid}/ban should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/users/{uid}/mute should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/users/{uid}/mute should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/users/{uid}/tokens should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/users/{uid}/tokens/{token} should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/users/{uid}/sessions/{uuid} should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/users/{uid}/invites should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/users/{uid}/invites/groups should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/users/{uid}/emails should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/users/{uid}/emails/{email} should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/users/{uid}/emails/{email}/confirm should be defined in schema docs (covered 0)
    âœ˜ HEAD /api/v3/users/{uid}/exports/{type} should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/users/{uid}/exports/{type} should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/users/{uid}/exports/{type} should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/groups/ should be defined in schema docs (covered 0)
    âœ˜ HEAD /api/v3/groups/{slug} should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/groups/{slug} should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/groups/{slug} should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/groups/{slug}/membership/{uid} should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/groups/{slug}/membership/{uid} should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/groups/{slug}/ownership/{uid} should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/groups/{slug}/ownership/{uid} should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/categories/ should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/categories/{cid} should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/categories/{cid} should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/categories/{cid} should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/categories/{cid}/privileges should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/categories/{cid}/privileges/{privilege} should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/categories/{cid}/privileges/{privilege} should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/categories/{cid}/moderator/{uid} should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/categories/{cid}/moderator/{uid} should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/topics/ should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/topics/{tid} should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/topics/{tid} should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/topics/{tid} should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/topics/{tid}/state should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/topics/{tid}/state should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/topics/{tid}/pin should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/topics/{tid}/pin should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/topics/{tid}/lock should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/topics/{tid}/lock should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/topics/{tid}/follow should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/topics/{tid}/follow should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/topics/{tid}/ignore should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/topics/{tid}/ignore should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/topics/{tid}/tags should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/topics/{tid}/tags should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/topics/{tid}/thumbs should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/topics/{tid}/thumbs should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/topics/{tid}/thumbs should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/topics/{tid}/thumbs should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/topics/{tid}/thumbs/order should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/topics/{tid}/events should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/topics/{tid}/events/{eventId} should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/posts/{pid} should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/posts/{pid} should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/posts/{pid} should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/posts/{pid}/state should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/posts/{pid}/state should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/posts/{pid}/move should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/posts/{pid}/vote should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/posts/{pid}/vote should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/posts/{pid}/bookmark should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/posts/{pid}/bookmark should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/posts/{pid}/diffs should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/posts/{pid}/diffs/{since} should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/posts/{pid}/diffs/{since} should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/posts/{pid}/diffs/{timestamp} should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/chats/ should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/chats/ should be defined in schema docs (covered 0)
    âœ˜ HEAD /api/v3/chats/{roomId} should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/chats/{roomId} should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/chats/{roomId} should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/chats/{roomId} should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/chats/{roomId}/users should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/chats/{roomId}/users should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/chats/{roomId}/users should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/chats/{roomId}/users/{uid} should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/chats/{roomId}/messages should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/chats/{roomId}/messages/{mid} should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/chats/{roomId}/messages/{mid} should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/chats/{roomId}/messages/{mid} should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/chats/{roomId}/messages/{mid} should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/flags/ should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/flags/{flagId} should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/flags/{flagId} should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/flags/{flagId} should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/flags/{flagId}/notes should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/flags/{flagId}/notes/{datetime} should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/admin/settings/{setting} should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/admin/analytics should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/admin/analytics/{set} should be defined in schema docs (covered 0)
    âœ˜ DELETE /api/v3/files/ should be defined in schema docs (covered 0)
    âœ˜ PUT /api/v3/files/folder should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/utilities/login should be defined in schema docs (covered 0)
    âœ˜ GET /api/v3/ping should be defined in schema docs (covered 0)
    âœ˜ POST /api/v3/ping should be defined in schema docs (covered 0)
    âœ˜ GET /api/config should be defined in schema docs (covered 0)
    âœ˜ GET /api/self should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/uid/{uid} should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/username/{username} should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/email/{email} should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/export/posts should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/export/uploads should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/export/profile should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/uid/{userslug}/export/{type} should be defined in schema docs (covered 0)
    âœ˜ GET /api/categories/{cid}/moderators should be defined in schema docs (covered 0)
    âœ˜ GET /api/recent/posts/{term?} should be defined in schema docs (covered 0)
    âœ˜ GET /api/unread/total should be defined in schema docs (covered 0)
    âœ˜ GET /api/topic/teaser/{topic_id} should be defined in schema docs (covered 0)
    âœ˜ GET /api/topic/pagination/{topic_id} should be defined in schema docs (covered 0)
    âœ˜ POST /api/post/upload should be defined in schema docs (covered 0)
    âœ˜ POST /api/user/{userslug}/uploadpicture should be defined in schema docs (covered 0)
    âœ˜ GET /api/login should be defined in schema docs (covered 0)
    âœ˜ GET /api/register should be defined in schema docs (covered 0)
    âœ˜ GET /api/register/complete should be defined in schema docs (covered 0)
    âœ˜ GET /api/confirm/{code} should be defined in schema docs (covered 0)
    âœ˜ GET /api/outgoing should be defined in schema docs (covered 0)
    âœ˜ GET /api/search should be defined in schema docs (covered 0)
    âœ˜ GET /api/reset/{code?} should be defined in schema docs (covered 0)
    âœ˜ GET /api/tos should be defined in schema docs (covered 0)
    âœ˜ GET /api/email/unsubscribe/{token} should be defined in schema docs (covered 0)
    âœ˜ GET /api/flags should be defined in schema docs (covered 0)
    âœ˜ GET /api/flags/{flagId} should be defined in schema docs (covered 0)
    âœ˜ GET /api/post-queue/{id?} should be defined in schema docs (covered 0)
    âœ˜ GET /api/ip-blacklist should be defined in schema docs (covered 0)
    âœ˜ GET /api/registration-queue should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/dashboard should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/dashboard/logins should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/dashboard/users should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/dashboard/topics should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/dashboard/searches should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/manage/categories should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/manage/categories/{category_id} should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/manage/categories/{category_id}/analytics should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/manage/privileges/{cid?} should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/manage/tags should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/manage/users should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/manage/registration should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/manage/admins-mods should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/manage/groups should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/manage/groups/{name} should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/manage/uploads should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/manage/digest should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/settings/email should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/settings/user should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/settings/post should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/settings/advanced should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/settings/languages should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/settings/navigation should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/settings/homepage should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/settings/social should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/settings/{term?} should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/appearance/{term?} should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/extend/plugins should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/extend/widgets should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/extend/rewards should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/advanced/database should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/advanced/events should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/advanced/hooks should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/advanced/logs should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/advanced/errors should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/advanced/errors/export should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/advanced/cache should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/development/logger should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/development/info should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/users/csv should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/groups/{groupname}/csv should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/analytics should be defined in schema docs (covered 0)
    âœ˜ GET /api/admin/advanced/cache/dump should be defined in schema docs (covered 0)
    âœ˜ POST /api/admin/category/uploadpicture should be defined in schema docs (covered 0)
    âœ˜ POST /api/admin/uploadfavicon should be defined in schema docs (covered 0)
    âœ˜ POST /api/admin/uploadTouchIcon should be defined in schema docs (covered 0)
    âœ˜ POST /api/admin/uploadMaskableIcon should be defined in schema docs (covered 0)
    âœ˜ POST /api/admin/uploadlogo should be defined in schema docs (covered 0)
    âœ˜ POST /api/admin/uploadOgImage should be defined in schema docs (covered 0)
    âœ˜ POST /api/admin/upload/file should be defined in schema docs (covered 0)
    âœ˜ POST /api/admin/uploadDefaultAvatar should be defined in schema docs (covered 0)
    âœ˜ GET /api/categories should be defined in schema docs (covered 0)
    âœ˜ GET /api/popular should be defined in schema docs (covered 0)
    âœ˜ GET /api/recent should be defined in schema docs (covered 0)
    âœ˜ GET /api/top should be defined in schema docs (covered 0)
    âœ˜ GET /api/unread should be defined in schema docs (covered 0)
    âœ˜ GET /api/category/{category_id}/{slug}/{topic_index} should be defined in schema docs (covered 0)
    âœ˜ GET /api/category/{category_id}/{slug?} should be defined in schema docs (covered 0)
    âœ˜ GET /api/topic/{topic_id}/{slug}/{post_index?} should be defined in schema docs (covered 0)
    âœ˜ GET /api/topic/{topic_id}/{slug?} should be defined in schema docs (covered 0)
    âœ˜ GET /api/post/{pid} should be defined in schema docs (covered 0)
    âœ˜ GET /api/users should be defined in schema docs (covered 0)
    âœ˜ GET /api/me should be defined in schema docs (covered 0)
    âœ˜ GET /api/me/* should be defined in schema docs (covered 0)
    âœ˜ GET /api/uid/{uid*} should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug} should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/following should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/followers should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/posts should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/topics should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/best should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/controversial should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/groups should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/categories should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/bookmarks should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/watched should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/ignored should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/upvoted should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/downvoted should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/edit should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/edit/username should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/edit/email should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/edit/password should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/info should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/settings should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/uploads should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/consent should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/blocks should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/sessions should be defined in schema docs (covered 0)
    âœ˜ GET /api/notifications should be defined in schema docs (covered 0)
    âœ˜ GET /api/user/{userslug}/chats/{roomid?} should be defined in schema docs (covered 0)
    âœ˜ GET /api/chats/{roomid?} should be defined in schema docs (covered 0)
    âœ˜ GET /api/groups should be defined in schema docs (covered 0)
    âœ˜ GET /api/groups/{slug} should be defined in schema docs (covered 0)
    âœ˜ GET /api/groups/{slug}/members should be defined in schema docs (covered 0)
    âœ˜ GET /api/tags/{tag} should be defined in schema docs (covered 0)
    âœ˜ GET /api/tags should be defined in schema docs (covered 0)
    âœ˜ GET /api/career should be defined in schema docs (covered 0)
    âœ˜ source language file structure should only contain valid JSON files (covered 0)
    âœ˜ "ar" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "ar" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "ar" file contents should contain only valid JSON files (covered 0)
    âœ˜ "ar" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "bg" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "bg" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "bg" file contents should contain only valid JSON files (covered 0)
    âœ˜ "bg" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "bn" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "bn" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "bn" file contents should contain only valid JSON files (covered 0)
    âœ˜ "bn" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "cs" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "cs" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "cs" file contents should contain only valid JSON files (covered 0)
    âœ˜ "cs" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "da" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "da" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "da" file contents should contain only valid JSON files (covered 0)
    âœ˜ "da" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "de" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "de" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "de" file contents should contain only valid JSON files (covered 0)
    âœ˜ "de" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "el" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "el" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "el" file contents should contain only valid JSON files (covered 0)
    âœ˜ "el" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "en-GB" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "en-GB" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "en-GB" file contents should contain only valid JSON files (covered 0)
    âœ˜ "en-GB" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "en-US" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "en-US" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "en-US" file contents should contain only valid JSON files (covered 0)
    âœ˜ "en-US" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "en-x-pirate" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "en-x-pirate" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "en-x-pirate" file contents should contain only valid JSON files (covered 0)
    âœ˜ "en-x-pirate" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "es" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "es" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "es" file contents should contain only valid JSON files (covered 0)
    âœ˜ "es" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "et" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "et" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "et" file contents should contain only valid JSON files (covered 0)
    âœ˜ "et" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "fa-IR" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "fa-IR" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "fa-IR" file contents should contain only valid JSON files (covered 0)
    âœ˜ "fa-IR" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "fi" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "fi" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "fi" file contents should contain only valid JSON files (covered 0)
    âœ˜ "fi" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "fr" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "fr" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "fr" file contents should contain only valid JSON files (covered 0)
    âœ˜ "fr" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "gl" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "gl" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "gl" file contents should contain only valid JSON files (covered 0)
    âœ˜ "gl" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "he" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "he" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "he" file contents should contain only valid JSON files (covered 0)
    âœ˜ "he" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "hr" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "hr" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "hr" file contents should contain only valid JSON files (covered 0)
    âœ˜ "hr" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "hu" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "hu" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "hu" file contents should contain only valid JSON files (covered 0)
    âœ˜ "hu" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "hy" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "hy" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "hy" file contents should contain only valid JSON files (covered 0)
    âœ˜ "hy" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "id" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "id" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "id" file contents should contain only valid JSON files (covered 0)
    âœ˜ "id" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "it" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "it" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "it" file contents should contain only valid JSON files (covered 0)
    âœ˜ "it" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "ja" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "ja" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "ja" file contents should contain only valid JSON files (covered 0)
    âœ˜ "ja" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "ko" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "ko" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "ko" file contents should contain only valid JSON files (covered 0)
    âœ˜ "ko" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "lt" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "lt" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "lt" file contents should contain only valid JSON files (covered 0)
    âœ˜ "lt" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "lv" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "lv" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "lv" file contents should contain only valid JSON files (covered 0)
    âœ˜ "lv" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "ms" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "ms" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "ms" file contents should contain only valid JSON files (covered 0)
    âœ˜ "ms" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "nb" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "nb" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "nb" file contents should contain only valid JSON files (covered 0)
    âœ˜ "nb" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "nl" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "nl" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "nl" file contents should contain only valid JSON files (covered 0)
    âœ˜ "nl" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "pl" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "pl" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "pl" file contents should contain only valid JSON files (covered 0)
    âœ˜ "pl" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "pt-BR" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "pt-BR" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "pt-BR" file contents should contain only valid JSON files (covered 0)
    âœ˜ "pt-BR" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "pt-PT" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "pt-PT" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "pt-PT" file contents should contain only valid JSON files (covered 0)
    âœ˜ "pt-PT" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "ro" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "ro" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "ro" file contents should contain only valid JSON files (covered 0)
    âœ˜ "ro" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "ru" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "ru" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "ru" file contents should contain only valid JSON files (covered 0)
    âœ˜ "ru" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "rw" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "rw" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "rw" file contents should contain only valid JSON files (covered 0)
    âœ˜ "rw" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "sc" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "sc" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "sc" file contents should contain only valid JSON files (covered 0)
    âœ˜ "sc" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "sk" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "sk" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "sk" file contents should contain only valid JSON files (covered 0)
    âœ˜ "sk" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "sl" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "sl" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "sl" file contents should contain only valid JSON files (covered 0)
    âœ˜ "sl" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "sq-AL" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "sq-AL" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "sq-AL" file contents should contain only valid JSON files (covered 0)
    âœ˜ "sq-AL" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "sr" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "sr" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "sr" file contents should contain only valid JSON files (covered 0)
    âœ˜ "sr" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "sv" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "sv" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "sv" file contents should contain only valid JSON files (covered 0)
    âœ˜ "sv" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "th" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "th" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "th" file contents should contain only valid JSON files (covered 0)
    âœ˜ "th" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "tr" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "tr" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "tr" file contents should contain only valid JSON files (covered 0)
    âœ˜ "tr" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "uk" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "uk" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "uk" file contents should contain only valid JSON files (covered 0)
    âœ˜ "uk" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "vi" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "vi" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "vi" file contents should contain only valid JSON files (covered 0)
    âœ˜ "vi" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "zh-CN" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "zh-CN" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "zh-CN" file contents should contain only valid JSON files (covered 0)
    âœ˜ "zh-CN" file contents should contain every translation key contained in its source counterpart (covered 0)
    âœ˜ "zh-TW" file structure translations should contain every language file contained in the source language directory (covered 0)
    âœ˜ "zh-TW" file structure should not contain any extraneous files not included in the source language directory (covered 0)
    âœ˜ "zh-TW" file contents should contain only valid JSON files (covered 0)
    ~ "zh-TW" file contents should contain every translation key contained in its source counterpart (covered 773)
    ~ upload methods .sync() should properly add new images to the post's zset (covered 89)
    ~ upload methods .sync() should remove an image if it is edited out of the post (covered 183)
    âœ˜ upload methods .list() should display the uploaded files for a specific post (covered 0)
    âœ˜ upload methods .isOrphan() should return false if upload is not an orphan (covered 0)
    âœ˜ upload methods .isOrphan() should return true if upload is an orphan (covered 0)
    âœ˜ upload methods .associate() should add an image to the post's maintained list of uploads (covered 0)
    âœ˜ upload methods .associate() should allow arrays to be passed in (covered 0)
    âœ˜ upload methods .associate() should save a reverse association of md5sum to pid (covered 0)
    âœ˜ upload methods .associate() should not associate a file that does not exist on the local disk (covered 0)
    âœ˜ upload methods .dissociate() should remove an image from the post's maintained list of uploads (covered 0)
    âœ˜ upload methods .dissociate() should allow arrays to be passed in (covered 0)
    âœ˜ upload methods .dissociate() should remove the image's user association, if present (covered 0)
    âœ˜ upload methods .dissociateAll() should remove all images from a post's maintained list of uploads (covered 0)
    ~ upload methods Dissociation on purge should not dissociate images on post deletion (covered 131)
    ~ upload methods Dissociation on purge should dissociate images on post purge (covered 131)
    ~ upload methods Deletion from disk on purge should purge the images from disk if the post is purged (covered 921)
    ~ upload methods Deletion from disk on purge should leave the images behind if `preserveOrphanedUploads` is enabled (covered 921)
    ~ upload methods Deletion from disk on purge should leave images behind if they are used in another post (covered 921)
    âœ˜ upload methods .deleteFromDisk() should work if you pass in a string path (covered 0)
    âœ˜ upload methods .deleteFromDisk() should throw an error if a non-string or non-array is passed (covered 0)
    âœ˜ upload methods .deleteFromDisk() should delete the files passed in, from disk (covered 0)
    âœ˜ upload methods .deleteFromDisk() should not delete files if they are not in `uploads/files/` (path traversal) (covered 0)
    ~ upload methods .deleteFromDisk() should delete files even if they are not orphans (covered 859)
    ~ post uploads management should automatically sync uploads on topic create and reply (covered 10)
    ~ post uploads management should automatically sync uploads on post edit (covered 795)
    ~ Topic Events .init() should allow a plugin to expose new event types (covered 3)
    ~ Topic Events .log() should log and return a set of new events in the topic (covered 81)
    ~ Topic Events .get() should get a topic's events (covered 74)
    ~ Topic Events .purge() should purge topic's events from the database (covered 784)
    ~ Topic thumbs should return bool for whether a thumb exists (covered 3)
    ~ Topic thumbs .get() should return an array of thumbs (covered 36)
    ~ Topic thumbs .get() should return an array of an array of thumbs if multiple tids are passed in (covered 799)
    ~ Topic thumbs .associate() should add an uploaded file to a zset (covered 94)
    ~ Topic thumbs .associate() should also work with UUIDs (covered 18)
    ~ Topic thumbs .associate() should also work with a URL (covered 19)
    âœ˜ Topic thumbs .associate() should have a score equal to the number of thumbs prior to addition (covered 0)
    ~ Topic thumbs .associate() should update the relevant topic hash with the number of thumbnails (covered 61)
    ~ Topic thumbs .associate() should successfully associate a thumb with a topic even if it already contains that thumbnail (updates score) (covered 94)
    ~ Topic thumbs .associate() should update the score to be passed in as the third argument (covered 94)
    âœ˜ Topic thumbs .associate() should associate the thumbnail with that topic's main pid's uploads (covered 0)
    ~ Topic thumbs .associate() should maintain state in the topic's main pid's uploads if posts.uploads.sync() is called (covered 93)
    ~ Topic thumbs .associate() should combine the thumbs uploaded to a UUID zset and combine it with a topic's thumb zset (covered 135)
    ~ Topic thumbs .delete() should remove a file from sorted set (covered 131)
    ~ Topic thumbs .delete() should no longer be associated with that topic's main pid's uploads (covered 69)
    ~ Topic thumbs .delete() should also work with UUIDs (covered 49)
    ~ Topic thumbs .delete() should also work with URLs (covered 43)
    ~ Topic thumbs .delete() should not delete the file from disk if not associated with the tid (covered 26)
    ~ Topic thumbs .delete() should handle an array of relative paths (covered 132)
    âœ˜ Topic thumbs .delete() should have no more thumbs left (covered 0)
    ~ Topic thumbs .delete() should decrement numThumbs if dissociated one by one (covered 132)
    âœ˜ Topic thumbs .deleteAll() should have thumbs prior to tests (covered 0)
    ~ Topic thumbs .deleteAll() should not error out (covered 111)
    âœ˜ Topic thumbs .deleteAll() should remove all associated thumbs with that topic (covered 0)
    âœ˜ Topic thumbs .deleteAll() should no longer have a :thumbs zset (covered 0)
    ~ Topic thumbs HTTP calls to topic thumb routes should succeed with a valid tid (covered 104)
    ~ Topic thumbs HTTP calls to topic thumb routes should succeed with a uuid (covered 90)
    ~ Topic thumbs HTTP calls to topic thumb routes should succeed with uploader plugins (covered 15)
    ~ Topic thumbs HTTP calls to topic thumb routes should fail with a non-existant tid (covered 2)
    âœ˜ Topic thumbs HTTP calls to topic thumb routes should fail when garbage is passed in (covered 0)
    ~ Topic thumbs HTTP calls to topic thumb routes should fail when calling user cannot edit the tid (covered 72)
    âœ˜ Topic thumbs HTTP calls to topic thumb routes should fail if thumbnails are not enabled (covered 0)
    ~ Topic thumbs HTTP calls to topic thumb routes should fail if file is not image (covered 954)
    âœ˜ Topic thumbs behaviour on topic purge should no longer have a :thumbs zset (covered 0)
    âœ˜ Topic thumbs behaviour on topic purge should not leave post upload associations behind (covered 0)
    âœ˜ email confirmation (library methods) isValidationPending should return false if user did not request email validation (covered 0)
    âœ˜ email confirmation (library methods) isValidationPending should return false if user did not request email validation (w/ email checking) (covered 0)
    âœ˜ email confirmation (library methods) isValidationPending should return true if user requested email validation (covered 0)
    âœ˜ email confirmation (library methods) isValidationPending should return true if user requested email validation (w/ email checking) (covered 0)
    âœ˜ email confirmation (library methods) getValidationExpiry should return null if there is no validation available (covered 0)
    âœ˜ email confirmation (library methods) getValidationExpiry should return a number smaller than configured expiry if validation available (covered 0)
    âœ˜ email confirmation (library methods) expireValidation should invalidate any confirmation in-progress (covered 0)
    âœ˜ email confirmation (library methods) canSendValidation should return true if no validation is pending (covered 0)
    âœ˜ email confirmation (library methods) canSendValidation should return false if it has been too soon to re-send confirmation (covered 0)
    âœ˜ email confirmation (library methods) canSendValidation should return true if it has been long enough to re-send confirmation (covered 0)
    âœ˜ email confirmation (v3 api) should have a pending validation (covered 0)
    âœ˜ email confirmation (v3 api) should not list their email (covered 0)
    âœ˜ email confirmation (v3 api) should not allow confirmation if they are not an admin (covered 0)
    âœ˜ email confirmation (v3 api) should not confirm an email that is not pending or set (covered 0)
    âœ˜ email confirmation (v3 api) should confirm their email (using the pending validation) (covered 0)
    âœ˜ email confirmation (v3 api) should still confirm the email (as email is set in user hash) (covered 0)
    âœ˜ uploads.js .associateUpload() should associate an uploaded file to a user (covered 0)
    âœ˜ uploads.js .associateUpload() should throw an error if the path is invalid (covered 0)
    âœ˜ uploads.js .associateUpload() should guard against path traversal (covered 0)
    âœ˜ uploads.js .deleteUpload should remove the upload from the user's uploads zset (covered 0)
    âœ˜ uploads.js .deleteUpload should delete the file from disk (covered 0)
    âœ˜ uploads.js .deleteUpload should clean up references to it from the database (covered 0)
    âœ˜ uploads.js .deleteUpload should accept multiple paths (covered 0)
    âœ˜ uploads.js .deleteUpload should throw an error on a non-existant file (covered 0)
    âœ˜ uploads.js .deleteUpload should guard against path traversal (covered 0)
    ~ uploads.js .deleteUpload should remove the post association as well, if present (covered 774)

[NoCoverage] BlockStatement
src/topics/bookmarks.js:54:45
-               if (bookmark === data.bookmark) {
-                   return;
-               }
+               if (bookmark === data.bookmark) {}

[NoCoverage] BlockStatement
src/topics/bookmarks.js:59:58
-               if (settings.topicPostSort === 'most_votes') {
-                   return;
-               }
+               if (settings.topicPostSort === 'most_votes') {}

[NoCoverage] StringLiteral
src/topics/create.js:31:52
-               slug: `${tid}/${slugify(data.title) || 'topic'}`,
+               slug: `${tid}/${slugify(data.title) || ""}`,

[NoCoverage] BlockStatement
src/topics/create.js:128:55
-           if (!Array.isArray(topics) || !topics.length) {
-               throw new Error('[[error:no-topic]]');
-           }
+           if (!Array.isArray(topics) || !topics.length) {}

[NoCoverage] StringLiteral
src/topics/create.js:129:29
-               throw new Error('[[error:no-topic]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/create.js:188:54
-           if (uid > 0 && settings.followTopicsOnReply) {
-               await Topics.follow(postData.tid, uid);
-           }
+           if (uid > 0 && settings.followTopicsOnReply) {}

[NoCoverage] BlockStatement
src/topics/create.js:264:53
-           } else if (item.length > parseInt(max, 10)) {
-               throw new Error(`[[error:${maxError}, ${max}]]`);
-           }
+           } else if (item.length > parseInt(max, 10)) {}

[NoCoverage] StringLiteral
src/topics/create.js:265:29
-               throw new Error(`[[error:${maxError}, ${max}]]`);
+               throw new Error(``);

[NoCoverage] BlockStatement
src/topics/create.js:271:73
-               if (data.handle.length > meta.config.maximumUsernameLength) {
-                   throw new Error('[[error:guest-handle-invalid]]');
-               }
+               if (data.handle.length > meta.config.maximumUsernameLength) {}

[NoCoverage] StringLiteral
src/topics/create.js:272:33
-                   throw new Error('[[error:guest-handle-invalid]]');
+                   throw new Error("");

[NoCoverage] BlockStatement
src/topics/create.js:275:25
-               if (exists) {
-                   throw new Error('[[error:username-taken]]');
-               }
+               if (exists) {}

[NoCoverage] StringLiteral
src/topics/create.js:276:33
-                   throw new Error('[[error:username-taken]]');
+                   throw new Error("");

[NoCoverage] BooleanLiteral
src/topics/create.js:294:23
-           if (locked && !isAdminOrMod) {
+           if (locked && isAdminOrMod) {

[NoCoverage] BlockStatement
src/topics/create.js:294:38
-           if (locked && !isAdminOrMod) {
-               throw new Error('[[error:topic-locked]]');
-           }
+           if (locked && !isAdminOrMod) {}

[NoCoverage] StringLiteral
src/topics/create.js:295:29
-               throw new Error('[[error:topic-locked]]');
+               throw new Error("");

[NoCoverage] BooleanLiteral
src/topics/create.js:298:38
-           if (!scheduled && deleted && !isAdminOrMod) {
+           if (!scheduled && deleted && isAdminOrMod) {

[NoCoverage] BlockStatement
src/topics/create.js:298:53
-           if (!scheduled && deleted && !isAdminOrMod) {
-               throw new Error('[[error:topic-deleted]]');
-           }
+           if (!scheduled && deleted && !isAdminOrMod) {}

[NoCoverage] StringLiteral
src/topics/create.js:299:29
-               throw new Error('[[error:topic-deleted]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/create.js:302:40
-           if (scheduled && !canSchedule) {
-               throw new Error('[[error:no-privileges]]');
-           }
+           if (scheduled && !canSchedule) {}

[NoCoverage] StringLiteral
src/topics/create.js:303:29
-               throw new Error('[[error:no-privileges]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/data.js:60:51
-       Topics.getCategoryData = async function (tid) {
-           const cid = await Topics.getTopicField(tid, 'cid');
-           return await categories.getCategoryData(cid);
-       };
+       Topics.getCategoryData = async function (tid) {};

[NoCoverage] StringLiteral
src/topics/data.js:61:53
-           const cid = await Topics.getTopicField(tid, 'cid');
+           const cid = await Topics.getTopicField(tid, "");

[NoCoverage] BlockStatement
src/topics/delete.js:56:74
-           await batch.processSortedSet(`tid:${tid}:posts`, async (pids) => {
-               await posts.purge(pids, uid);
-           }, { alwaysStartAt: 0, batch: 500 });
+           await batch.processSortedSet(`tid:${tid}:posts`, async (pids) => {}, { alwaysStartAt: 0, batch: 500 });

[NoCoverage] BlockStatement
src/topics/delete.js:68:28
-           if (!deletedTopic) {
-               return;
-           }
+           if (!deletedTopic) {}

[NoCoverage] StringLiteral
src/topics/delete.js:107:49
-           const ignorerKeys = ignorers.map(uid => `uid:${uid}ignored_tids`);
+           const ignorerKeys = ignorers.map(uid => ``);

[NoCoverage] BlockStatement
src/topics/events.js:78:36
-       if (!await topics.exists(tid)) {
-           throw new Error('[[error:no-topic]]');
-       }
+       if (!await topics.exists(tid)) {}

[NoCoverage] StringLiteral
src/topics/events.js:79:25
-           throw new Error('[[error:no-topic]]');
+           throw new Error("");

[NoCoverage] ObjectLiteral
src/topics/events.js:116:49
-           events.push(...queuedPosts.map(item => ({
-               type: 'post-queue',
-               timestamp: item.data.timestamp || Date.now(),
-               uid: item.data.uid,
-           })));
+           events.push(...queuedPosts.map(item => ({})));

[NoCoverage] StringLiteral
src/topics/events.js:117:19
-               type: 'post-queue',
+               type: "",

[NoCoverage] ConditionalExpression
src/topics/events.js:118:24
-               timestamp: item.data.timestamp || Date.now(),
+               timestamp: true,

[NoCoverage] ConditionalExpression
src/topics/events.js:118:24
-               timestamp: item.data.timestamp || Date.now(),
+               timestamp: false,

[NoCoverage] LogicalOperator
src/topics/events.js:118:24
-               timestamp: item.data.timestamp || Date.now(),
+               timestamp: item.data.timestamp && Date.now(),

[NoCoverage] BlockStatement
src/topics/events.js:121:39
-           queuedPosts.forEach((item) => {
-               timestamps.push(item.data.timestamp || Date.now());
-           });
+           queuedPosts.forEach((item) => {});

[NoCoverage] ConditionalExpression
src/topics/events.js:122:29
-               timestamps.push(item.data.timestamp || Date.now());
+               timestamps.push(true);

[NoCoverage] ConditionalExpression
src/topics/events.js:122:29
-               timestamps.push(item.data.timestamp || Date.now());
+               timestamps.push(false);

[NoCoverage] LogicalOperator
src/topics/events.js:122:29
-               timestamps.push(item.data.timestamp || Date.now());
+               timestamps.push(item.data.timestamp && Date.now());

[NoCoverage] StringLiteral
src/topics/events.js:153:61
-               event.user = users.get(event.uid === 'system' ? 'system' : parseInt(event.uid, 10));
+               event.user = users.get(event.uid === 'system' ? "" : parseInt(event.uid, 10));

[NoCoverage] BlockStatement
src/topics/events.js:174:46
-       if (!Events._types.hasOwnProperty(type)) {
-           throw new Error(`[[error:topic-event-unrecognized, ${type}]]`);
-       } else if (!await topics.exists(tid)) {
+       if (!Events._types.hasOwnProperty(type)) {} else if (!await topics.exists(tid)) {

[NoCoverage] StringLiteral
src/topics/events.js:175:25
-           throw new Error(`[[error:topic-event-unrecognized, ${type}]]`);
+           throw new Error(``);

[NoCoverage] BlockStatement
src/topics/events.js:176:43
-       } else if (!await topics.exists(tid)) {
-           throw new Error('[[error:no-topic]]');
-       }
+       } else if (!await topics.exists(tid)) {}

[NoCoverage] StringLiteral
src/topics/events.js:177:25
-           throw new Error('[[error:no-topic]]');
+           throw new Error("");

[NoCoverage] BlockStatement
src/topics/follow.js:13:22
-           if (!exists) {
-               throw new Error('[[error:no-topic]]');
-           }
+           if (!exists) {}

[NoCoverage] StringLiteral
src/topics/follow.js:14:29
-               throw new Error('[[error:no-topic]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/follow.js:17:29
-           if (isFollowing[0]) {
-               await Topics.unfollow(tid, uid);
-           } else {
+           if (isFollowing[0]) {} else {

[NoCoverage] BlockStatement
src/topics/follow.js:85:35
-           if (!Array.isArray(tids)) {
-               return;
-           }
+           if (!Array.isArray(tids)) {}

[NoCoverage] BlockStatement
src/topics/follow.js:107:35
-           if (!Array.isArray(tids)) {
-               return;
-           }
+           if (!Array.isArray(tids)) {}

[NoCoverage] BlockStatement
src/topics/follow.js:121:47
-       Topics.getIgnorers = async function (tid) {
-           return await db.getSetMembers(`tid:${tid}:ignorers`);
-       };
+       Topics.getIgnorers = async function (tid) {};

[NoCoverage] StringLiteral
src/topics/follow.js:122:39
-           return await db.getSetMembers(`tid:${tid}:ignorers`);
+           return await db.getSetMembers(``);

[NoCoverage] BlockStatement
src/topics/follow.js:131:59
-       Topics.filterWatchedTids = async function (tids, uid) {
-           if (parseInt(uid, 10) <= 0) {
-               return [];
-           }
-           const scores = await db.sortedSetScores(`uid:${uid}:followed_tids`, tids);
-           return tids.filter((tid, index) => tid && !!scores[index]);
-       };
+       Topics.filterWatchedTids = async function (tids, uid) {};

[NoCoverage] ConditionalExpression
src/topics/follow.js:132:13
-           if (parseInt(uid, 10) <= 0) {
+           if (true) {

[NoCoverage] ConditionalExpression
src/topics/follow.js:132:13
-           if (parseInt(uid, 10) <= 0) {
+           if (false) {

[NoCoverage] EqualityOperator
src/topics/follow.js:132:13
-           if (parseInt(uid, 10) <= 0) {
+           if (parseInt(uid, 10) < 0) {

[NoCoverage] EqualityOperator
src/topics/follow.js:132:13
-           if (parseInt(uid, 10) <= 0) {
+           if (parseInt(uid, 10) > 0) {

[NoCoverage] BlockStatement
src/topics/follow.js:132:37
-           if (parseInt(uid, 10) <= 0) {
-               return [];
-           }
+           if (parseInt(uid, 10) <= 0) {}

[NoCoverage] ArrayDeclaration
src/topics/follow.js:133:20
-               return [];
+               return ["Stryker was here"];

[NoCoverage] StringLiteral
src/topics/follow.js:135:49
-           const scores = await db.sortedSetScores(`uid:${uid}:followed_tids`, tids);
+           const scores = await db.sortedSetScores(``, tids);

[NoCoverage] MethodExpression
src/topics/follow.js:136:16
-           return tids.filter((tid, index) => tid && !!scores[index]);
+           return tids;

[NoCoverage] ArrowFunction
src/topics/follow.js:136:28
-           return tids.filter((tid, index) => tid && !!scores[index]);
+           return tids.filter(() => undefined);

[NoCoverage] ConditionalExpression
src/topics/follow.js:136:44
-           return tids.filter((tid, index) => tid && !!scores[index]);
+           return tids.filter((tid, index) => true);

[NoCoverage] ConditionalExpression
src/topics/follow.js:136:44
-           return tids.filter((tid, index) => tid && !!scores[index]);
+           return tids.filter((tid, index) => false);

[NoCoverage] LogicalOperator
src/topics/follow.js:136:44
-           return tids.filter((tid, index) => tid && !!scores[index]);
+           return tids.filter((tid, index) => tid || !!scores[index]);

[NoCoverage] BooleanLiteral
src/topics/follow.js:136:51
-           return tids.filter((tid, index) => tid && !!scores[index]);
+           return tids.filter((tid, index) => tid && !scores[index]);

[NoCoverage] BooleanLiteral
src/topics/follow.js:136:52
-           return tids.filter((tid, index) => tid && !!scores[index]);
+           return tids.filter((tid, index) => tid && !scores[index]);

[NoCoverage] BlockStatement
src/topics/fork.js:17:60
-           if (title.length < meta.config.minimumTitleLength) {
-               throw new Error(`[[error:title-too-short, ${meta.config.minimumTitleLength}]]`);
-           } else if (title.length > meta.config.maximumTitleLength) {
+           if (title.length < meta.config.minimumTitleLength) {} else if (title.length > meta.config.maximumTitleLength) {

[NoCoverage] StringLiteral
src/topics/fork.js:18:29
-               throw new Error(`[[error:title-too-short, ${meta.config.minimumTitleLength}]]`);
+               throw new Error(``);

[NoCoverage] BlockStatement
src/topics/fork.js:19:67
-           } else if (title.length > meta.config.maximumTitleLength) {
-               throw new Error(`[[error:title-too-long, ${meta.config.maximumTitleLength}]]`);
-           }
+           } else if (title.length > meta.config.maximumTitleLength) {}

[NoCoverage] StringLiteral
src/topics/fork.js:20:29
-               throw new Error(`[[error:title-too-long, ${meta.config.maximumTitleLength}]]`);
+               throw new Error(``);

[NoCoverage] BlockStatement
src/topics/fork.js:23:36
-           if (!pids || !pids.length) {
-               throw new Error('[[error:invalid-pid]]');
-           }
+           if (!pids || !pids.length) {}

[NoCoverage] StringLiteral
src/topics/fork.js:24:29
-               throw new Error('[[error:invalid-pid]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/fork.js:37:28
-           if (!isAdminOrMod) {
-               throw new Error('[[error:no-privileges]]');
-           }
+           if (!isAdminOrMod) {}

[NoCoverage] StringLiteral
src/topics/fork.js:38:29
-               throw new Error('[[error:no-privileges]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/fork.js:59:32
-               if (!canEdit.flag) {
-                   throw new Error(canEdit.message);
-               }
+               if (!canEdit.flag) {}

[NoCoverage] ArithmeticOperator
src/topics/fork.js:65:59
-           await Topics.updateLastPostTime(tid, scheduled ? (postData.timestamp + 1) : Date.now());
+           await Topics.updateLastPostTime(tid, scheduled ? (postData.timestamp - 1) : Date.now());

[NoCoverage] BlockStatement
src/topics/fork.js:84:29
-           if (!topicData.tid) {
-               throw new Error('[[error:no-topic]]');
-           }
+           if (!topicData.tid) {}

[NoCoverage] StringLiteral
src/topics/fork.js:85:29
-               throw new Error('[[error:no-topic]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/fork.js:87:53
-           if (!forceScheduled && topicData.scheduled) {
-               throw new Error('[[error:cant-move-posts-to-scheduled]]');
-           }
+           if (!forceScheduled && topicData.scheduled) {}

[NoCoverage] StringLiteral
src/topics/fork.js:88:29
-               throw new Error('[[error:cant-move-posts-to-scheduled]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/fork.js:91:41
-           if (!postData || !postData.tid) {
-               throw new Error('[[error:no-post]]');
-           }
+           if (!postData || !postData.tid) {}

[NoCoverage] StringLiteral
src/topics/fork.js:92:29
-               throw new Error('[[error:no-post]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/fork.js:96:56
-           if (!forceScheduled && isSourceTopicScheduled) {
-               throw new Error('[[error:cant-move-from-scheduled-to-existing]]');
-           }
+           if (!forceScheduled && isSourceTopicScheduled) {}

[NoCoverage] StringLiteral
src/topics/fork.js:97:29
-               throw new Error('[[error:cant-move-from-scheduled-to-existing]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/fork.js:100:35
-           if (postData.tid === tid) {
-               throw new Error('[[error:cant-move-to-same-topic]]');
-           }
+           if (postData.tid === tid) {}

[NoCoverage] StringLiteral
src/topics/fork.js:101:29
-               throw new Error('[[error:cant-move-to-same-topic]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/fork.js:123:53
-           if (!topicData[0].cid || !topicData[1].cid) {
-               return;
-           }
+           if (!topicData[0].cid || !topicData[1].cid) {}

[NoCoverage] BlockStatement
src/topics/fork.js:149:55
-           if (postData.votes > 0 || postData.votes < 0) {
-               tasks.push(db.sortedSetAdd(`cid:${topicData[1].cid}:uid:${postData.uid}:pids:votes`, postData.votes, postData.pid));
-           }
+           if (postData.votes > 0 || postData.votes < 0) {}

[NoCoverage] StringLiteral
src/topics/fork.js:150:40
-               tasks.push(db.sortedSetAdd(`cid:${topicData[1].cid}:uid:${postData.uid}:pids:votes`, postData.votes, postData.pid));
+               tasks.push(db.sortedSetAdd(``, postData.votes, postData.pid));

[NoCoverage] BlockStatement
src/topics/index.js:44:66
-   Topics.getTopicsFromSet = async function (set, uid, start, stop) {
-       const tids = await db.getSortedSetRevRange(set, start, stop);
-       const topics = await Topics.getTopics(tids, uid);
-       Topics.calculateTopicIndices(topics, start);
-       return { topics: topics, nextStart: stop + 1 };
-   };
+   Topics.getTopicsFromSet = async function (set, uid, start, stop) {};

[NoCoverage] ObjectLiteral
src/topics/index.js:48:12
-       return { topics: topics, nextStart: stop + 1 };
+       return {};

[NoCoverage] ArithmeticOperator
src/topics/index.js:48:41
-       return { topics: topics, nextStart: stop + 1 };
+       return { topics: topics, nextStart: stop - 1 };

[NoCoverage] MethodExpression
src/topics/index.js:142:17
-                   Math.max(1, topic.postcount + 2 - bookmarks[i]) :
+                   Math.min(1, topic.postcount + 2 - bookmarks[i]) :

[NoCoverage] ArithmeticOperator
src/topics/index.js:142:29
-                   Math.max(1, topic.postcount + 2 - bookmarks[i]) :
+                   Math.max(1, topic.postcount + 2 + bookmarks[i]) :

[NoCoverage] ArithmeticOperator
src/topics/index.js:142:29
-                   Math.max(1, topic.postcount + 2 - bookmarks[i]) :
+                   Math.max(1, topic.postcount - 2 - bookmarks[i]) :

[NoCoverage] ConditionalExpression
src/topics/index.js:190:22
-               event => event.timestamp >= p.eventStart && event.timestamp < p.eventEnd
+               event => true

[NoCoverage] ConditionalExpression
src/topics/index.js:190:22
-               event => event.timestamp >= p.eventStart && event.timestamp < p.eventEnd
+               event => false

[NoCoverage] LogicalOperator
src/topics/index.js:190:22
-               event => event.timestamp >= p.eventStart && event.timestamp < p.eventEnd
+               event => event.timestamp >= p.eventStart || event.timestamp < p.eventEnd

[NoCoverage] ConditionalExpression
src/topics/index.js:190:22
-               event => event.timestamp >= p.eventStart && event.timestamp < p.eventEnd
+               event => true && event.timestamp < p.eventEnd

[NoCoverage] EqualityOperator
src/topics/index.js:190:22
-               event => event.timestamp >= p.eventStart && event.timestamp < p.eventEnd
+               event => event.timestamp > p.eventStart && event.timestamp < p.eventEnd

[NoCoverage] EqualityOperator
src/topics/index.js:190:22
-               event => event.timestamp >= p.eventStart && event.timestamp < p.eventEnd
+               event => event.timestamp < p.eventStart && event.timestamp < p.eventEnd

[NoCoverage] ConditionalExpression
src/topics/index.js:190:57
-               event => event.timestamp >= p.eventStart && event.timestamp < p.eventEnd
+               event => event.timestamp >= p.eventStart && true

[NoCoverage] EqualityOperator
src/topics/index.js:190:57
-               event => event.timestamp >= p.eventStart && event.timestamp < p.eventEnd
+               event => event.timestamp >= p.eventStart && event.timestamp <= p.eventEnd

[NoCoverage] EqualityOperator
src/topics/index.js:190:57
-               event => event.timestamp >= p.eventStart && event.timestamp < p.eventEnd
+               event => event.timestamp >= p.eventStart && event.timestamp >= p.eventEnd

[NoCoverage] ArrayDeclaration
src/topics/index.js:212:36
-       topicData.related = related || [];
+       topicData.related = related || ["Stryker was here"];

[NoCoverage] BlockStatement
src/topics/merge.js:11:48
-           if (topicsData.some(t => t.scheduled)) {
-               throw new Error('[[error:cant-merge-scheduled]]');
-           }
+           if (topicsData.some(t => t.scheduled)) {}

[NoCoverage] StringLiteral
src/topics/merge.js:12:29
-               throw new Error('[[error:cant-merge-scheduled]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/posts.js:61:50
-           if (allPosts.length !== postData.length) {
-               const includedPids = new Set(postData.map(p => p.pid));
-               allPosts.reverse().forEach((p, index) => {
-                   if (!includedPids.has(p.pid) && allPosts[index + 1] && !reverse) {
-                       allPosts[index + 1].eventEnd = p.eventEnd;
-                   }
-               });
-           }
+           if (allPosts.length !== postData.length) {}

[NoCoverage] ArrowFunction
src/topics/posts.js:62:55
-               const includedPids = new Set(postData.map(p => p.pid));
+               const includedPids = new Set(postData.map(() => undefined));

[NoCoverage] MethodExpression
src/topics/posts.js:63:13
-               allPosts.reverse().forEach((p, index) => {
+               allPosts.forEach((p, index) => {

[NoCoverage] BlockStatement
src/topics/posts.js:63:54
-               allPosts.reverse().forEach((p, index) => {
-                   if (!includedPids.has(p.pid) && allPosts[index + 1] && !reverse) {
-                       allPosts[index + 1].eventEnd = p.eventEnd;
-                   }
-               });
+               allPosts.reverse().forEach((p, index) => {});

[NoCoverage] ConditionalExpression
src/topics/posts.js:64:21
-                   if (!includedPids.has(p.pid) && allPosts[index + 1] && !reverse) {
+                   if (true) {

[NoCoverage] ConditionalExpression
src/topics/posts.js:64:21
-                   if (!includedPids.has(p.pid) && allPosts[index + 1] && !reverse) {
+                   if (false) {

[NoCoverage] LogicalOperator
src/topics/posts.js:64:21
-                   if (!includedPids.has(p.pid) && allPosts[index + 1] && !reverse) {
+                   if (!includedPids.has(p.pid) && allPosts[index + 1] || !reverse) {

[NoCoverage] ConditionalExpression
src/topics/posts.js:64:21
-                   if (!includedPids.has(p.pid) && allPosts[index + 1] && !reverse) {
+                   if (true && !reverse) {

[NoCoverage] LogicalOperator
src/topics/posts.js:64:21
-                   if (!includedPids.has(p.pid) && allPosts[index + 1] && !reverse) {
+                   if (!includedPids.has(p.pid) || allPosts[index + 1] && !reverse) {

[NoCoverage] BooleanLiteral
src/topics/posts.js:64:21
-                   if (!includedPids.has(p.pid) && allPosts[index + 1] && !reverse) {
+                   if (includedPids.has(p.pid) && allPosts[index + 1] && !reverse) {

[NoCoverage] ArithmeticOperator
src/topics/posts.js:64:58
-                   if (!includedPids.has(p.pid) && allPosts[index + 1] && !reverse) {
+                   if (!includedPids.has(p.pid) && allPosts[index - 1] && !reverse) {

[NoCoverage] BooleanLiteral
src/topics/posts.js:64:72
-                   if (!includedPids.has(p.pid) && allPosts[index + 1] && !reverse) {
+                   if (!includedPids.has(p.pid) && allPosts[index + 1] && reverse) {

[NoCoverage] BlockStatement
src/topics/posts.js:64:82
-                   if (!includedPids.has(p.pid) && allPosts[index + 1] && !reverse) {
-                       allPosts[index + 1].eventEnd = p.eventEnd;
-                   }
+                   if (!includedPids.has(p.pid) && allPosts[index + 1] && !reverse) {}

[NoCoverage] ArithmeticOperator
src/topics/posts.js:65:30
-                       allPosts[index + 1].eventEnd = p.eventEnd;
+                       allPosts[index - 1].eventEnd = p.eventEnd;

[NoCoverage] BlockStatement
src/topics/posts.js:79:31
-           if (!postData.length) {
-               return;
-           }
+           if (!postData.length) {}

[NoCoverage] ConditionalExpression
src/topics/posts.js:144:54
-                   if (meta.config.allowGuestHandles && postObj.uid === 0 && postObj.handle) {
+                   if (meta.config.allowGuestHandles && true && postObj.handle) {

[NoCoverage] EqualityOperator
src/topics/posts.js:144:54
-                   if (meta.config.allowGuestHandles && postObj.uid === 0 && postObj.handle) {
+                   if (meta.config.allowGuestHandles && postObj.uid !== 0 && postObj.handle) {

[NoCoverage] BlockStatement
src/topics/posts.js:144:91
-                   if (meta.config.allowGuestHandles && postObj.uid === 0 && postObj.handle) {
-                       postObj.user.username = validator.escape(String(postObj.handle));
-                       postObj.user.displayname = postObj.user.username;
-                   }
+                   if (meta.config.allowGuestHandles && postObj.uid === 0 && postObj.handle) {}

[NoCoverage] StringLiteral
src/topics/posts.js:163:109
-                   post.display_edit_tools = topicPrivileges.isAdminOrMod || (post.selfPost && topicPrivileges['posts:edit']);
+                   post.display_edit_tools = topicPrivileges.isAdminOrMod || (post.selfPost && topicPrivileges[""]);

[NoCoverage] StringLiteral
src/topics/posts.js:164:111
-                   post.display_delete_tools = topicPrivileges.isAdminOrMod || (post.selfPost && topicPrivileges['posts:delete']);
+                   post.display_delete_tools = topicPrivileges.isAdminOrMod || (post.selfPost && topicPrivileges[""]);

[NoCoverage] ConditionalExpression
src/topics/posts.js:169:26
-                           ((!topicData.locked && !post.deleted) ||
-                           (post.deleted && parseInt(post.deleterUid, 10) === parseInt(topicPrivileges.uid, 10)))) ||
+                           (true)) ||

[NoCoverage] LogicalOperator
src/topics/posts.js:169:26
-                           ((!topicData.locked && !post.deleted) ||
-                           (post.deleted && parseInt(post.deleterUid, 10) === parseInt(topicPrivileges.uid, 10)))) ||
+                           (!topicData.locked && !post.deleted && post.deleted && parseInt(post.deleterUid, 10) === parseInt(topicPrivileges.uid, 10))) ||

[NoCoverage] ConditionalExpression
src/topics/posts.js:169:27
-                           ((!topicData.locked && !post.deleted) ||
+                           ((false) ||

[NoCoverage] LogicalOperator
src/topics/posts.js:169:27
-                           ((!topicData.locked && !post.deleted) ||
+                           ((!topicData.locked || !post.deleted) ||

[NoCoverage] BooleanLiteral
src/topics/posts.js:169:27
-                           ((!topicData.locked && !post.deleted) ||
+                           ((topicData.locked && !post.deleted) ||

[NoCoverage] BooleanLiteral
src/topics/posts.js:169:48
-                           ((!topicData.locked && !post.deleted) ||
+                           ((!topicData.locked && post.deleted) ||

[NoCoverage] ConditionalExpression
src/topics/posts.js:170:26
-                           (post.deleted && parseInt(post.deleterUid, 10) === parseInt(topicPrivileges.uid, 10)))) ||
+                           (false))) ||

[NoCoverage] LogicalOperator
src/topics/posts.js:170:26
-                           (post.deleted && parseInt(post.deleterUid, 10) === parseInt(topicPrivileges.uid, 10)))) ||
+                           (post.deleted || parseInt(post.deleterUid, 10) === parseInt(topicPrivileges.uid, 10)))) ||

[NoCoverage] ConditionalExpression
src/topics/posts.js:170:42
-                           (post.deleted && parseInt(post.deleterUid, 10) === parseInt(topicPrivileges.uid, 10)))) ||
+                           (post.deleted && true))) ||

[NoCoverage] EqualityOperator
src/topics/posts.js:170:42
-                           (post.deleted && parseInt(post.deleterUid, 10) === parseInt(topicPrivileges.uid, 10)))) ||
+                           (post.deleted && parseInt(post.deleterUid, 10) !== parseInt(topicPrivileges.uid, 10)))) ||

[NoCoverage] ConditionalExpression
src/topics/posts.js:331:49
-           const uids = replyData.map(replyData => replyData && replyData.uid);
+           const uids = replyData.map(replyData => true);

[NoCoverage] ConditionalExpression
src/topics/posts.js:331:49
-           const uids = replyData.map(replyData => replyData && replyData.uid);
+           const uids = replyData.map(replyData => false);

[NoCoverage] LogicalOperator
src/topics/posts.js:331:49
-           const uids = replyData.map(replyData => replyData && replyData.uid);
+           const uids = replyData.map(replyData => replyData || replyData.uid);

[NoCoverage] StringLiteral
src/topics/posts.js:346:46
-                   text: replyPids.length > 1 ? `[[topic:replies_to_this_post, ${replyPids.length}]]` : '[[topic:one_reply_to_this_post]]',
+                   text: replyPids.length > 1 ? `` : '[[topic:one_reply_to_this_post]]',

[NoCoverage] ArithmeticOperator
src/topics/posts.js:351:38
-               replyPids.sort((a, b) => parseInt(a, 10) - parseInt(b, 10));
+               replyPids.sort((a, b) => parseInt(a, 10) + parseInt(b, 10));

[NoCoverage] BlockStatement
src/topics/posts.js:353:45
-               replyPids.forEach((replyPid) => {
-                   const replyData = pidMap[replyPid];
-                   if (!uidsUsed[replyData.uid] && currentData.users.length < 6) {
-                       currentData.users.push(uidMap[replyData.uid]);
-                       uidsUsed[replyData.uid] = true;
-                   }
-               });
+               replyPids.forEach((replyPid) => {});

[NoCoverage] ConditionalExpression
src/topics/posts.js:355:21
-                   if (!uidsUsed[replyData.uid] && currentData.users.length < 6) {
+                   if (true) {

[NoCoverage] ConditionalExpression
src/topics/posts.js:355:21
-                   if (!uidsUsed[replyData.uid] && currentData.users.length < 6) {
+                   if (false) {

[NoCoverage] LogicalOperator
src/topics/posts.js:355:21
-                   if (!uidsUsed[replyData.uid] && currentData.users.length < 6) {
+                   if (!uidsUsed[replyData.uid] || currentData.users.length < 6) {

[NoCoverage] BooleanLiteral
src/topics/posts.js:355:21
-                   if (!uidsUsed[replyData.uid] && currentData.users.length < 6) {
+                   if (uidsUsed[replyData.uid] && currentData.users.length < 6) {

[NoCoverage] ConditionalExpression
src/topics/posts.js:355:49
-                   if (!uidsUsed[replyData.uid] && currentData.users.length < 6) {
+                   if (!uidsUsed[replyData.uid] && true) {

[NoCoverage] EqualityOperator
src/topics/posts.js:355:49
-                   if (!uidsUsed[replyData.uid] && currentData.users.length < 6) {
+                   if (!uidsUsed[replyData.uid] && currentData.users.length <= 6) {

[NoCoverage] EqualityOperator
src/topics/posts.js:355:49
-                   if (!uidsUsed[replyData.uid] && currentData.users.length < 6) {
+                   if (!uidsUsed[replyData.uid] && currentData.users.length >= 6) {

[NoCoverage] BlockStatement
src/topics/posts.js:355:79
-                   if (!uidsUsed[replyData.uid] && currentData.users.length < 6) {
-                       currentData.users.push(uidMap[replyData.uid]);
-                       uidsUsed[replyData.uid] = true;
-                   }
+                   if (!uidsUsed[replyData.uid] && currentData.users.length < 6) {}

[NoCoverage] BooleanLiteral
src/topics/posts.js:357:47
-                       uidsUsed[replyData.uid] = true;
+                       uidsUsed[replyData.uid] = false;

[NoCoverage] BlockStatement
src/topics/posts.js:361:47
-               if (currentData.users.length > 5) {
-                   currentData.users.pop();
-                   currentData.hasMore = true;
-               }
+               if (currentData.users.length > 5) {}

[NoCoverage] BooleanLiteral
src/topics/posts.js:363:39
-                   currentData.hasMore = true;
+                   currentData.hasMore = false;

[NoCoverage] BlockStatement
src/topics/posts.js:379:23
-           if (!matches) {
-               return 0;
-           }
+           if (!matches) {}

[NoCoverage] BlockStatement
src/topics/recent.js:16:77
-       Topics.getRecentTopics = async function (cid, uid, start, stop, filter) {
-           return await Topics.getSortedTopics({
-               cids: cid,
-               uid: uid,
-               start: start,
-               stop: stop,
-               filter: filter,
-               sort: 'recent',
-           });
-       };
+       Topics.getRecentTopics = async function (cid, uid, start, stop, filter) {};

[NoCoverage] ObjectLiteral
src/topics/recent.js:17:45
-           return await Topics.getSortedTopics({
-               cids: cid,
-               uid: uid,
-               start: start,
-               stop: stop,
-               filter: filter,
-               sort: 'recent',
-           });
+           return await Topics.getSortedTopics({});

[NoCoverage] StringLiteral
src/topics/recent.js:23:19
-               sort: 'recent',
+               sort: "",

[NoCoverage] ArithmeticOperator
src/topics/recent.js:41:58
-           const count = parseInt(stop, 10) === -1 ? stop : stop - start + 1;
+           const count = parseInt(stop, 10) === -1 ? stop : stop - start - 1;

[NoCoverage] ArithmeticOperator
src/topics/recent.js:41:58
-           const count = parseInt(stop, 10) === -1 ? stop : stop - start + 1;
+           const count = parseInt(stop, 10) === -1 ? stop : stop + start + 1;

[NoCoverage] BlockStatement
src/topics/recent.js:51:25
-           if (!timestamp) {
-               return;
-           }
+           if (!timestamp) {}

[NoCoverage] BlockStatement
src/topics/recent.js:72:71
-           if (plugins.hooks.hasListeners('filter:topics.updateRecent')) {
-               data = await plugins.hooks.fire('filter:topics.updateRecent', { tid: tid, timestamp: timestamp });
-           }
+           if (plugins.hooks.hasListeners('filter:topics.updateRecent')) {}

[NoCoverage] StringLiteral
src/topics/recent.js:73:45
-               data = await plugins.hooks.fire('filter:topics.updateRecent', { tid: tid, timestamp: timestamp });
+               data = await plugins.hooks.fire("", { tid: tid, timestamp: timestamp });

[NoCoverage] ObjectLiteral
src/topics/recent.js:73:75
-               data = await plugins.hooks.fire('filter:topics.updateRecent', { tid: tid, timestamp: timestamp });
+               data = await plugins.hooks.fire('filter:topics.updateRecent', {});

[NoCoverage] BlockStatement
src/topics/scheduled.js:15:35
-   Scheduled.startJobs = function () {
-       winston.verbose('[scheduled topics] Starting jobs.');
-       new CronJob('*/1 * * * *', Scheduled.handleExpired, null, true);
-   };
+   Scheduled.startJobs = function () {};

[NoCoverage] StringLiteral
src/topics/scheduled.js:16:21
-       winston.verbose('[scheduled topics] Starting jobs.');
+       winston.verbose("");

[NoCoverage] StringLiteral
src/topics/scheduled.js:17:17
-       new CronJob('*/1 * * * *', Scheduled.handleExpired, null, true);
+       new CronJob("", Scheduled.handleExpired, null, true);

[NoCoverage] BooleanLiteral
src/topics/scheduled.js:17:63
-       new CronJob('*/1 * * * *', Scheduled.handleExpired, null, true);
+       new CronJob('*/1 * * * *', Scheduled.handleExpired, null, false);

[NoCoverage] BlockStatement
src/topics/scheduled.js:24:23
-       if (!tids.length) {
-           return;
-       }
+       if (!tids.length) {}

[NoCoverage] StringLiteral
src/topics/sorted.js:22:38
-           params.sort = params.sort || 'recent';
+           params.sort = params.sort || "";

[NoCoverage] BlockStatement
src/topics/sorted.js:24:90
-           if (params.hasOwnProperty('cids') && params.cids && !Array.isArray(params.cids)) {
-               params.cids = [params.cids];
-           }
+           if (params.hasOwnProperty('cids') && params.cids && !Array.isArray(params.cids)) {}

[NoCoverage] ArrayDeclaration
src/topics/sorted.js:25:27
-               params.cids = [params.cids];
+               params.cids = [];

[NoCoverage] BlockStatement
src/topics/sorted.js:28:57
-           if (params.tags && !Array.isArray(params.tags)) {
-               params.tags = [params.tags];
-           }
+           if (params.tags && !Array.isArray(params.tags)) {}

[NoCoverage] ArrayDeclaration
src/topics/sorted.js:29:27
-               params.tags = [params.tags];
+               params.tags = [];

[NoCoverage] BlockStatement
src/topics/sorted.js:41:72
-           if (plugins.hooks.hasListeners('filter:topics.getSortedTids')) {
-               const result = await plugins.hooks.fire('filter:topics.getSortedTids', { params: params, tids: [] });
-               return result.tids;
-           }
+           if (plugins.hooks.hasListeners('filter:topics.getSortedTids')) {}

[NoCoverage] StringLiteral
src/topics/sorted.js:42:53
-               const result = await plugins.hooks.fire('filter:topics.getSortedTids', { params: params, tids: [] });
+               const result = await plugins.hooks.fire("", { params: params, tids: [] });

[NoCoverage] ObjectLiteral
src/topics/sorted.js:42:84
-               const result = await plugins.hooks.fire('filter:topics.getSortedTids', { params: params, tids: [] });
+               const result = await plugins.hooks.fire('filter:topics.getSortedTids', {});

[NoCoverage] ArrayDeclaration
src/topics/sorted.js:42:108
-               const result = await plugins.hooks.fire('filter:topics.getSortedTids', { params: params, tids: [] });
+               const result = await plugins.hooks.fire('filter:topics.getSortedTids', { params: params, tids: ["Stryker was here"] });

[NoCoverage] BlockStatement
src/topics/sorted.js:48:46
-               if (params.filter === 'watched') {
-                   tids = await Topics.filterWatchedTids(tids, params.uid);
-               }
+               if (params.filter === 'watched') {}

[NoCoverage] BlockStatement
src/topics/sorted.js:55:40
-           } else if (params.tags.length) {
-               tids = await getTagTids(params);
-           } else if (params.sort === 'old') {
+           } else if (params.tags.length) {} else if (params.sort === 'old') {

[NoCoverage] BlockStatement
src/topics/sorted.js:57:43
-           } else if (params.sort === 'old') {
-               tids = await db.getSortedSetRange(`topics:recent`, 0, meta.config.recentMaxTopics - 1);
-           } else {
+           } else if (params.sort === 'old') {} else {

[NoCoverage] StringLiteral
src/topics/sorted.js:58:47
-               tids = await db.getSortedSetRange(`topics:recent`, 0, meta.config.recentMaxTopics - 1);
+               tids = await db.getSortedSetRange(``, 0, meta.config.recentMaxTopics - 1);

[NoCoverage] ArithmeticOperator
src/topics/sorted.js:58:67
-               tids = await db.getSortedSetRange(`topics:recent`, 0, meta.config.recentMaxTopics - 1);
+               tids = await db.getSortedSetRange(`topics:recent`, 0, meta.config.recentMaxTopics + 1);

[NoCoverage] BlockStatement
src/topics/sorted.js:66:39
-       async function getTagTids(params) {
-           const sets = [
-               params.sort === 'old' ?
-                   'topics:recent' :
-                   `topics:${params.sort}`,
-               ...params.tags.map(tag => `tag:${tag}:topics`),
-           ];
-           const method = params.sort === 'old' ?
-               'getSortedSetIntersect' :
-               'getSortedSetRevIntersect';
-           return await db[method]({
-               sets: sets,
-               start: 0,
-               stop: meta.config.recentMaxTopics - 1,
-               weights: sets.map((s, index) => (index ? 0 : 1)),
-           });
-       }
+       async function getTagTids(params) {}

[NoCoverage] ArrayDeclaration
src/topics/sorted.js:67:22
-           const sets = [
-               params.sort === 'old' ?
-                   'topics:recent' :
-                   `topics:${params.sort}`,
-               ...params.tags.map(tag => `tag:${tag}:topics`),
-           ];
+           const sets = [];

[NoCoverage] ConditionalExpression
src/topics/sorted.js:68:13
-               params.sort === 'old' ?
+               true ?

[NoCoverage] ConditionalExpression
src/topics/sorted.js:68:13
-               params.sort === 'old' ?
+               false ?

[NoCoverage] EqualityOperator
src/topics/sorted.js:68:13
-               params.sort === 'old' ?
+               params.sort !== 'old' ?

[NoCoverage] StringLiteral
src/topics/sorted.js:68:29
-               params.sort === 'old' ?
+               params.sort === "" ?

[NoCoverage] StringLiteral
src/topics/sorted.js:69:17
-                   'topics:recent' :
+                   "" :

[NoCoverage] StringLiteral
src/topics/sorted.js:70:17
-                   `topics:${params.sort}`,
+                   ``,

[NoCoverage] ArrowFunction
src/topics/sorted.js:71:32
-               ...params.tags.map(tag => `tag:${tag}:topics`),
+               ...params.tags.map(() => undefined),

[NoCoverage] StringLiteral
src/topics/sorted.js:71:39
-               ...params.tags.map(tag => `tag:${tag}:topics`),
+               ...params.tags.map(tag => ``),

[NoCoverage] ConditionalExpression
src/topics/sorted.js:73:24
-           const method = params.sort === 'old' ?
+           const method = true ?

[NoCoverage] ConditionalExpression
src/topics/sorted.js:73:24
-           const method = params.sort === 'old' ?
+           const method = false ?

[NoCoverage] EqualityOperator
src/topics/sorted.js:73:24
-           const method = params.sort === 'old' ?
+           const method = params.sort !== 'old' ?

[NoCoverage] StringLiteral
src/topics/sorted.js:73:40
-           const method = params.sort === 'old' ?
+           const method = params.sort === "" ?

[NoCoverage] StringLiteral
src/topics/sorted.js:74:13
-               'getSortedSetIntersect' :
+               "" :

[NoCoverage] StringLiteral
src/topics/sorted.js:75:13
-               'getSortedSetRevIntersect';
+               "";

[NoCoverage] ObjectLiteral
src/topics/sorted.js:76:33
-           return await db[method]({
-               sets: sets,
-               start: 0,
-               stop: meta.config.recentMaxTopics - 1,
-               weights: sets.map((s, index) => (index ? 0 : 1)),
-           });
+           return await db[method]({});

[NoCoverage] ArithmeticOperator
src/topics/sorted.js:79:19
-               stop: meta.config.recentMaxTopics - 1,
+               stop: meta.config.recentMaxTopics + 1,

[NoCoverage] ArrowFunction
src/topics/sorted.js:80:31
-               weights: sets.map((s, index) => (index ? 0 : 1)),
+               weights: sets.map(() => undefined),

[NoCoverage] BlockStatement
src/topics/sorted.js:85:33
-           if (params.tags.length) {
-               return _.intersection(...await Promise.all(params.tags.map(async (tag) => {
-                   const sets = params.cids.map(cid => `cid:${cid}:tag:${tag}:topics`);
-                   return await db.getSortedSetRevRange(sets, 0, -1);
-               })));
-           }
+           if (params.tags.length) {}

[NoCoverage] BlockStatement
src/topics/sorted.js:86:87
-               return _.intersection(...await Promise.all(params.tags.map(async (tag) => {
-                   const sets = params.cids.map(cid => `cid:${cid}:tag:${tag}:topics`);
-                   return await db.getSortedSetRevRange(sets, 0, -1);
-               })));
+               return _.intersection(...await Promise.all(params.tags.map(async (tag) => {})));

[NoCoverage] ArrowFunction
src/topics/sorted.js:87:46
-                   const sets = params.cids.map(cid => `cid:${cid}:tag:${tag}:topics`);
+                   const sets = params.cids.map(() => undefined);

[NoCoverage] StringLiteral
src/topics/sorted.js:87:53
-                   const sets = params.cids.map(cid => `cid:${cid}:tag:${tag}:topics`);
+                   const sets = params.cids.map(cid => ``);

[NoCoverage] UnaryOperator
src/topics/sorted.js:88:63
-                   return await db.getSortedSetRevRange(sets, 0, -1);
+                   return await db.getSortedSetRevRange(sets, 0, +1);

[NoCoverage] StringLiteral
src/topics/sorted.js:98:79
-                   sets.push(`cid:${cid}:tids${params.sort ? `:${params.sort}` : ''}`);
+                   sets.push(`cid:${cid}:tids${params.sort ? `:${params.sort}` : "Stryker was here!"}`);

[NoCoverage] BlockStatement
src/topics/sorted.js:125:33
-           if (params.floatPinned) {
-               floatPinned(topicData, sortFn);
-           } else {
+           if (params.floatPinned) {} else {

[NoCoverage] BlockStatement
src/topics/sorted.js:134:45
-       function floatPinned(topicData, sortFn) {
-           topicData.sort((a, b) => (a.pinned !== b.pinned ? b.pinned - a.pinned : sortFn(a, b)));
-       }
+       function floatPinned(topicData, sortFn) {}

[NoCoverage] MethodExpression
src/topics/sorted.js:135:9
-           topicData.sort((a, b) => (a.pinned !== b.pinned ? b.pinned - a.pinned : sortFn(a, b)));
+           topicData;

[NoCoverage] ArrowFunction
src/topics/sorted.js:135:24
-           topicData.sort((a, b) => (a.pinned !== b.pinned ? b.pinned - a.pinned : sortFn(a, b)));
+           topicData.sort(() => undefined);

[NoCoverage] ConditionalExpression
src/topics/sorted.js:135:35
-           topicData.sort((a, b) => (a.pinned !== b.pinned ? b.pinned - a.pinned : sortFn(a, b)));
+           topicData.sort((a, b) => (true ? b.pinned - a.pinned : sortFn(a, b)));

[NoCoverage] ConditionalExpression
src/topics/sorted.js:135:35
-           topicData.sort((a, b) => (a.pinned !== b.pinned ? b.pinned - a.pinned : sortFn(a, b)));
+           topicData.sort((a, b) => (false ? b.pinned - a.pinned : sortFn(a, b)));

[NoCoverage] EqualityOperator
src/topics/sorted.js:135:35
-           topicData.sort((a, b) => (a.pinned !== b.pinned ? b.pinned - a.pinned : sortFn(a, b)));
+           topicData.sort((a, b) => (a.pinned === b.pinned ? b.pinned - a.pinned : sortFn(a, b)));

[NoCoverage] ArithmeticOperator
src/topics/sorted.js:135:59
-           topicData.sort((a, b) => (a.pinned !== b.pinned ? b.pinned - a.pinned : sortFn(a, b)));
+           topicData.sort((a, b) => (a.pinned !== b.pinned ? b.pinned + a.pinned : sortFn(a, b)));

[NoCoverage] BlockStatement
src/topics/sorted.js:153:32
-       function sortPopular(a, b) {
-           if (a.postcount !== b.postcount) {
-               return b.postcount - a.postcount;
-           }
-           return b.viewcount - a.viewcount;
-       }
+       function sortPopular(a, b) {}

[NoCoverage] ConditionalExpression
src/topics/sorted.js:154:13
-           if (a.postcount !== b.postcount) {
+           if (true) {

[NoCoverage] ConditionalExpression
src/topics/sorted.js:154:13
-           if (a.postcount !== b.postcount) {
+           if (false) {

[NoCoverage] EqualityOperator
src/topics/sorted.js:154:13
-           if (a.postcount !== b.postcount) {
+           if (a.postcount === b.postcount) {

[NoCoverage] BlockStatement
src/topics/sorted.js:154:42
-           if (a.postcount !== b.postcount) {
-               return b.postcount - a.postcount;
-           }
+           if (a.postcount !== b.postcount) {}

[NoCoverage] ArithmeticOperator
src/topics/sorted.js:155:20
-               return b.postcount - a.postcount;
+               return b.postcount + a.postcount;

[NoCoverage] ArithmeticOperator
src/topics/sorted.js:157:16
-           return b.viewcount - a.viewcount;
+           return b.viewcount + a.viewcount;

[NoCoverage] BlockStatement
src/topics/sorted.js:160:30
-       function sortViews(a, b) {
-           return b.viewcount - a.viewcount;
-       }
+       function sortViews(a, b) {}

[NoCoverage] ArithmeticOperator
src/topics/sorted.js:161:16
-           return b.viewcount - a.viewcount;
+           return b.viewcount + a.viewcount;

[NoCoverage] ArithmeticOperator
src/topics/suggested.js:15:43
-           cutoff = cutoff === 0 ? cutoff : (cutoff * 2592000000);
+           cutoff = cutoff === 0 ? cutoff : (cutoff / 2592000000);

[NoCoverage] ArrowFunction
src/topics/suggested.js:42:59
-               await db.getSortedSetRevRangeByScore(tags.map(tag => `tag:${tag}:topics`), 0, -1, '+inf', Date.now() - cutoff);
+               await db.getSortedSetRevRangeByScore(tags.map(() => undefined), 0, -1, '+inf', Date.now() - cutoff);

[NoCoverage] StringLiteral
src/topics/suggested.js:42:66
-               await db.getSortedSetRevRangeByScore(tags.map(tag => `tag:${tag}:topics`), 0, -1, '+inf', Date.now() - cutoff);
+               await db.getSortedSetRevRangeByScore(tags.map(tag => ``), 0, -1, '+inf', Date.now() - cutoff);

[NoCoverage] UnaryOperator
src/topics/suggested.js:42:91
-               await db.getSortedSetRevRangeByScore(tags.map(tag => `tag:${tag}:topics`), 0, -1, '+inf', Date.now() - cutoff);
+               await db.getSortedSetRevRangeByScore(tags.map(tag => `tag:${tag}:topics`), 0, +1, '+inf', Date.now() - cutoff);

[NoCoverage] StringLiteral
src/topics/suggested.js:42:95
-               await db.getSortedSetRevRangeByScore(tags.map(tag => `tag:${tag}:topics`), 0, -1, '+inf', Date.now() - cutoff);
+               await db.getSortedSetRevRangeByScore(tags.map(tag => `tag:${tag}:topics`), 0, -1, "", Date.now() - cutoff);

[NoCoverage] ArithmeticOperator
src/topics/suggested.js:42:103
-               await db.getSortedSetRevRangeByScore(tags.map(tag => `tag:${tag}:topics`), 0, -1, '+inf', Date.now() - cutoff);
+               await db.getSortedSetRevRangeByScore(tags.map(tag => `tag:${tag}:topics`), 0, -1, '+inf', Date.now() + cutoff);

[NoCoverage] ArithmeticOperator
src/topics/suggested.js:56:39
-               timeRange: cutoff !== 0 ? cutoff / 1000 : 0,
+               timeRange: cutoff !== 0 ? cutoff * 1000 : 0,

[NoCoverage] ConditionalExpression
src/topics/suggested.js:59:46
-           data.tids = data.tids.filter(_tid => _tid !== tid); // remove self
+           data.tids = data.tids.filter(_tid => true); // remove self

[NoCoverage] ConditionalExpression
src/topics/suggested.js:59:46
-           data.tids = data.tids.filter(_tid => _tid !== tid); // remove self
+           data.tids = data.tids.filter(_tid => false); // remove self

[NoCoverage] EqualityOperator
src/topics/suggested.js:59:46
-           data.tids = data.tids.filter(_tid => _tid !== tid); // remove self
+           data.tids = data.tids.filter(_tid => _tid === tid); // remove self

[NoCoverage] StringLiteral
src/topics/suggested.js:67:50
-               await db.getSortedSetRevRangeByScore(`cid:${cid}:tids:lastposttime`, 0, 9, '+inf', Date.now() - cutoff);
+               await db.getSortedSetRevRangeByScore(``, 0, 9, '+inf', Date.now() - cutoff);

[NoCoverage] StringLiteral
src/topics/suggested.js:67:88
-               await db.getSortedSetRevRangeByScore(`cid:${cid}:tids:lastposttime`, 0, 9, '+inf', Date.now() - cutoff);
+               await db.getSortedSetRevRangeByScore(`cid:${cid}:tids:lastposttime`, 0, 9, "", Date.now() - cutoff);

[NoCoverage] ArithmeticOperator
src/topics/suggested.js:67:96
-               await db.getSortedSetRevRangeByScore(`cid:${cid}:tids:lastposttime`, 0, 9, '+inf', Date.now() - cutoff);
+               await db.getSortedSetRevRangeByScore(`cid:${cid}:tids:lastposttime`, 0, 9, '+inf', Date.now() + cutoff);

[NoCoverage] BlockStatement
src/topics/tags.js:67:35
-           if (!Array.isArray(tags)) {
-               throw new Error('[[error:invalid-data]]');
-           }
+           if (!Array.isArray(tags)) {}

[NoCoverage] StringLiteral
src/topics/tags.js:68:29
-               throw new Error('[[error:invalid-data]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/tags.js:92:86
-               removedTags.length && removedTags.some(tag => systemTags.includes(tag))) {
-               throw new Error('[[error:cant-remove-system-tag]]');
-           }
+               removedTags.length && removedTags.some(tag => systemTags.includes(tag))) {}

[NoCoverage] StringLiteral
src/topics/tags.js:93:29
-               throw new Error('[[error:cant-remove-system-tag]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/tags.js:135:48
-           if (!newTagName || tag === newTagName) {
-               return;
-           }
+           if (!newTagName || tag === newTagName) {}

[NoCoverage] BlockStatement
src/topics/tags.js:187:71
-       Topics.getTagTidsByCids = async function (tag, cids, start, stop) {
-           const keys = cids.map(cid => `cid:${cid}:tag:${tag}:topics`);
-           const tids = await db.getSortedSetRevRange(keys, start, stop);
-           const payload = await plugins.hooks.fire('filter:topics.getTagTidsByCids', { tag, cids, start, stop, tids });
-           return payload.tids;
-       };
+       Topics.getTagTidsByCids = async function (tag, cids, start, stop) {};

[NoCoverage] ArrowFunction
src/topics/tags.js:188:31
-           const keys = cids.map(cid => `cid:${cid}:tag:${tag}:topics`);
+           const keys = cids.map(() => undefined);

[NoCoverage] StringLiteral
src/topics/tags.js:188:38
-           const keys = cids.map(cid => `cid:${cid}:tag:${tag}:topics`);
+           const keys = cids.map(cid => ``);

[NoCoverage] StringLiteral
src/topics/tags.js:190:50
-           const payload = await plugins.hooks.fire('filter:topics.getTagTidsByCids', { tag, cids, start, stop, tids });
+           const payload = await plugins.hooks.fire("", { tag, cids, start, stop, tids });

[NoCoverage] ObjectLiteral
src/topics/tags.js:190:84
-           const payload = await plugins.hooks.fire('filter:topics.getTagTidsByCids', { tag, cids, start, stop, tids });
+           const payload = await plugins.hooks.fire('filter:topics.getTagTidsByCids', {});

[NoCoverage] BlockStatement
src/topics/tags.js:196:26
-           if (cids.length) {
-               count = await db.sortedSetsCardSum(
-                   cids.map(cid => `cid:${cid}:tag:${tag}:topics`)
-               );
-           } else {
+           if (cids.length) {} else {

[NoCoverage] ArrowFunction
src/topics/tags.js:198:26
-                   cids.map(cid => `cid:${cid}:tag:${tag}:topics`)
+                   cids.map(() => undefined)

[NoCoverage] StringLiteral
src/topics/tags.js:198:33
-                   cids.map(cid => `cid:${cid}:tag:${tag}:topics`)
+                   cids.map(cid => ``)

[NoCoverage] BlockStatement
src/topics/tags.js:254:34
-           if (Array.isArray(cids)) {
-               return await db.getSortedSetRevUnion({
-                   sets: cids.map(cid => `cid:${cid}:tags`),
-                   start,
-                   stop,
-               });
-           }
+           if (Array.isArray(cids)) {}

[NoCoverage] ObjectLiteral
src/topics/tags.js:255:50
-               return await db.getSortedSetRevUnion({
-                   sets: cids.map(cid => `cid:${cid}:tags`),
-                   start,
-                   stop,
-               });
+               return await db.getSortedSetRevUnion({});

[NoCoverage] ArrowFunction
src/topics/tags.js:256:32
-                   sets: cids.map(cid => `cid:${cid}:tags`),
+                   sets: cids.map(() => undefined),

[NoCoverage] StringLiteral
src/topics/tags.js:256:39
-                   sets: cids.map(cid => `cid:${cid}:tags`),
+                   sets: cids.map(cid => ``),

[NoCoverage] ArrayDeclaration
src/topics/tags.js:315:63
-           return Array.isArray(data) && data.length ? data[0] : [];
+           return Array.isArray(data) && data.length ? data[0] : ["Stryker was here"];

[NoCoverage] BlockStatement
src/topics/tags.js:411:69
-           if (plugins.hooks.hasListeners('filter:topics.searchTags')) {
-               result = await plugins.hooks.fire('filter:topics.searchTags', { data: data });
-           } else {
+           if (plugins.hooks.hasListeners('filter:topics.searchTags')) {} else {

[NoCoverage] StringLiteral
src/topics/tags.js:412:47
-               result = await plugins.hooks.fire('filter:topics.searchTags', { data: data });
+               result = await plugins.hooks.fire("", { data: data });

[NoCoverage] ObjectLiteral
src/topics/tags.js:412:75
-               result = await plugins.hooks.fire('filter:topics.searchTags', { data: data });
+               result = await plugins.hooks.fire('filter:topics.searchTags', {});

[NoCoverage] BlockStatement
src/topics/tags.js:425:75
-           if (plugins.hooks.hasListeners('filter:topics.autocompleteTags')) {
-               result = await plugins.hooks.fire('filter:topics.autocompleteTags', { data: data });
-           } else {
+           if (plugins.hooks.hasListeners('filter:topics.autocompleteTags')) {} else {

[NoCoverage] StringLiteral
src/topics/tags.js:426:47
-               result = await plugins.hooks.fire('filter:topics.autocompleteTags', { data: data });
+               result = await plugins.hooks.fire("", { data: data });

[NoCoverage] ObjectLiteral
src/topics/tags.js:426:81
-               result = await plugins.hooks.fire('filter:topics.autocompleteTags', { data: data });
+               result = await plugins.hooks.fire('filter:topics.autocompleteTags', {});

[NoCoverage] BlockStatement
src/topics/tags.js:433:33
-       async function getAllTags() {
-           const cached = cache.get('tags:topic:count');
-           if (cached !== undefined) {
-               return cached;
-           }
-           const tags = await db.getSortedSetRevRangeWithScores('tags:topic:count', 0, -1);
-           cache.set('tags:topic:count', tags);
-           return tags;
-       }
+       async function getAllTags() {}

[NoCoverage] StringLiteral
src/topics/tags.js:434:34
-           const cached = cache.get('tags:topic:count');
+           const cached = cache.get("");

[NoCoverage] ConditionalExpression
src/topics/tags.js:435:13
-           if (cached !== undefined) {
+           if (true) {

[NoCoverage] ConditionalExpression
src/topics/tags.js:435:13
-           if (cached !== undefined) {
+           if (false) {

[NoCoverage] EqualityOperator
src/topics/tags.js:435:13
-           if (cached !== undefined) {
+           if (cached === undefined) {

[NoCoverage] BlockStatement
src/topics/tags.js:435:35
-           if (cached !== undefined) {
-               return cached;
-           }
+           if (cached !== undefined) {}

[NoCoverage] StringLiteral
src/topics/tags.js:438:62
-           const tags = await db.getSortedSetRevRangeWithScores('tags:topic:count', 0, -1);
+           const tags = await db.getSortedSetRevRangeWithScores("", 0, -1);

[NoCoverage] UnaryOperator
src/topics/tags.js:438:85
-           const tags = await db.getSortedSetRevRangeWithScores('tags:topic:count', 0, -1);
+           const tags = await db.getSortedSetRevRangeWithScores('tags:topic:count', 0, +1);

[NoCoverage] StringLiteral
src/topics/tags.js:439:19
-           cache.set('tags:topic:count', tags);
+           cache.set("", tags);

[NoCoverage] BlockStatement
src/topics/tags.js:446:37
-           if (parseInt(data.cid, 10)) {
-               tagWhitelist = await categories.getTagWhitelist([data.cid]);
-           }
+           if (parseInt(data.cid, 10)) {}

[NoCoverage] ArrayDeclaration
src/topics/tags.js:447:61
-               tagWhitelist = await categories.getTagWhitelist([data.cid]);
+               tagWhitelist = await categories.getTagWhitelist([]);

[NoCoverage] BlockStatement
src/topics/tags.js:450:71
-           if (Array.isArray(tagWhitelist[0]) && tagWhitelist[0].length) {
-               const scores = await db.sortedSetScores(`cid:${data.cid}:tags`, tagWhitelist[0]);
-               tags = tagWhitelist[0].map((tag, index) => ({ value: tag, score: scores[index] }));
-           } else if (data.cids) {
+           if (Array.isArray(tagWhitelist[0]) && tagWhitelist[0].length) {} else if (data.cids) {

[NoCoverage] StringLiteral
src/topics/tags.js:451:53
-               const scores = await db.sortedSetScores(`cid:${data.cid}:tags`, tagWhitelist[0]);
+               const scores = await db.sortedSetScores(``, tagWhitelist[0]);

[NoCoverage] ArrowFunction
src/topics/tags.js:452:40
-               tags = tagWhitelist[0].map((tag, index) => ({ value: tag, score: scores[index] }));
+               tags = tagWhitelist[0].map(() => undefined);

[NoCoverage] ObjectLiteral
src/topics/tags.js:452:57
-               tags = tagWhitelist[0].map((tag, index) => ({ value: tag, score: scores[index] }));
+               tags = tagWhitelist[0].map((tag, index) => ({}));

[NoCoverage] BlockStatement
src/topics/tags.js:460:16
-           } else {
-               tags = await getAllTags();
-           }
+           } else {}

[NoCoverage] BlockStatement
src/topics/tags.js:470:42
-                   if (matches.length > 39) {
-                       break;
-                   }
+                   if (matches.length > 39) {}

[NoCoverage] BlockStatement
src/topics/tags.js:512:74
-           if (plugins.hooks.hasListeners('filter:topic.getRelatedTopics')) {
-               const result = await plugins.hooks.fire('filter:topic.getRelatedTopics', { topic: topicData, uid: uid, topics: [] });
-               return result.topics;
-           }
+           if (plugins.hooks.hasListeners('filter:topic.getRelatedTopics')) {}

[NoCoverage] StringLiteral
src/topics/tags.js:513:53
-               const result = await plugins.hooks.fire('filter:topic.getRelatedTopics', { topic: topicData, uid: uid, topics: [] });
+               const result = await plugins.hooks.fire("", { topic: topicData, uid: uid, topics: [] });

[NoCoverage] ObjectLiteral
src/topics/tags.js:513:86
-               const result = await plugins.hooks.fire('filter:topic.getRelatedTopics', { topic: topicData, uid: uid, topics: [] });
+               const result = await plugins.hooks.fire('filter:topic.getRelatedTopics', {});

[NoCoverage] ArrayDeclaration
src/topics/tags.js:513:124
-               const result = await plugins.hooks.fire('filter:topic.getRelatedTopics', { topic: topicData, uid: uid, topics: [] });
+               const result = await plugins.hooks.fire('filter:topic.getRelatedTopics', { topic: topicData, uid: uid, topics: ["Stryker was here"] });

[NoCoverage] BlockStatement
src/topics/teaser.js:32:49
-                   if (topic.teaserPid === 'null') {
-                       delete topic.teaserPid;
-                   }
+                   if (topic.teaserPid === 'null') {}

[NoCoverage] BlockStatement
src/topics/teaser.js:99:27
-           if (sortNewToOld) {
-               return Math.min(2, postCountInTopic);
-           }
+           if (sortNewToOld) {}

[NoCoverage] MethodExpression
src/topics/teaser.js:100:20
-               return Math.min(2, postCountInTopic);
+               return Math.max(2, postCountInTopic);

[NoCoverage] StringLiteral
src/topics/thumbs.js:20:30
-       const set = `${isDraft ? 'draft' : 'topic'}:${id}:thumbs`;
+       const set = `${isDraft ? "" : 'topic'}:${id}:thumbs`;

[NoCoverage] ArrayDeclaration
src/topics/thumbs.js:30:74
-       return topicData.map(t => (t && t.tid ? (tidToThumbs[t.tid] || []) : []));
+       return topicData.map(t => (t && t.tid ? (tidToThumbs[t.tid] || []) : ["Stryker was here"]));

[NoCoverage] ArrayDeclaration
src/topics/thumbs.js:42:27
-           return singular ? [] : tids.map(() => []);
+           return singular ? ["Stryker was here"] : tids.map(() => []);

[NoCoverage] ArrayDeclaration
src/topics/thumbs.js:42:47
-           return singular ? [] : tids.map(() => []);
+           return singular ? [] : tids.map(() => ["Stryker was here"]);

[NoCoverage] StringLiteral
src/topics/thumbs.js:47:69
-       const sets = tids.map(tid => `${validator.isUUID(String(tid)) ? 'draft' : 'topic'}:${tid}:thumbs`);
+       const sets = tids.map(tid => `${validator.isUUID(String(tid)) ? "" : 'topic'}:${tid}:thumbs`);

[NoCoverage] BlockStatement
src/topics/thumbs.js:117:47
-       } else if (!Array.isArray(relativePaths)) {
-           throw new Error('[[error:invalid-data]]');
-       }
+       } else if (!Array.isArray(relativePaths)) {}

[NoCoverage] StringLiteral
src/topics/thumbs.js:118:25
-           throw new Error('[[error:invalid-data]]');
+           throw new Error("");

[NoCoverage] StringLiteral
src/topics/thumbs.js:158:30
-       const set = `${isDraft ? 'draft' : 'topic'}:${id}:thumbs`;
+       const set = `${isDraft ? "" : 'topic'}:${id}:thumbs`;

[Survived] ObjectLiteral
src/topics/thumbs.js:102:72
-       await Promise.all(thumbs.map(async thumb => await Thumbs.associate({
-           id,
-           path: thumb.value,
-           score: thumb.score,
-       })));
+       await Promise.all(thumbs.map(async thumb => await Thumbs.associate({})));
Tests ran:
    Topic thumbs .associate() should combine the thumbs uploaded to a UUID zset and combine it with a topic's thumb zset


[Survived] StringLiteral
src/topics/thumbs.js:113:30
-       const set = `${isDraft ? 'draft' : 'topic'}:${id}:thumbs`;
+       const set = `${isDraft ? "" : 'topic'}:${id}:thumbs`;
Tests ran:
    Topic thumbs .delete() should also work with UUIDs
    Topic thumbs .delete() should also work with URLs
    Topic thumbs .delete() should not delete the file from disk if not associated with the tid


[Survived] ArrowFunction
src/topics/thumbs.js:142:40
-           await Promise.all(toDelete.map(async absolutePath => file.delete(absolutePath)));
+           await Promise.all(toDelete.map(() => undefined));
Tests ran:
    Topic thumbs .delete() should also work with UUIDs


[NoCoverage] BlockStatement
src/topics/tools.js:28:25
-           if (!topicData) {
-               throw new Error('[[error:no-topic]]');
-           }
+           if (!topicData) {}

[NoCoverage] StringLiteral
src/topics/tools.js:29:29
-               throw new Error('[[error:no-topic]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/tools.js:43:54
-           if (data.topicData.deleted && data.isDelete) {
-               throw new Error('[[error:topic-already-deleted]]');
-           } else if (!data.topicData.deleted && !data.isDelete) {
+           if (data.topicData.deleted && data.isDelete) {} else if (!data.topicData.deleted && !data.isDelete) {

[NoCoverage] StringLiteral
src/topics/tools.js:44:29
-               throw new Error('[[error:topic-already-deleted]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/tools.js:45:63
-           } else if (!data.topicData.deleted && !data.isDelete) {
-               throw new Error('[[error:topic-already-restored]]');
-           }
+           } else if (!data.topicData.deleted && !data.isDelete) {}

[NoCoverage] StringLiteral
src/topics/tools.js:46:29
-               throw new Error('[[error:topic-already-restored]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/tools.js:75:25
-           if (!topicData) {
-               throw new Error('[[error:no-topic]]');
-           }
+           if (!topicData) {}

[NoCoverage] StringLiteral
src/topics/tools.js:76:29
-               throw new Error('[[error:no-topic]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/tools.js:97:43
-           if (!topicData || !topicData.cid) {
-               throw new Error('[[error:no-topic]]');
-           }
+           if (!topicData || !topicData.cid) {}

[NoCoverage] StringLiteral
src/topics/tools.js:98:29
-               throw new Error('[[error:no-topic]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/tools.js:101:28
-           if (!isAdminOrMod) {
-               throw new Error('[[error:no-privileges]]');
-           }
+           if (!isAdminOrMod) {}

[NoCoverage] StringLiteral
src/topics/tools.js:102:29
-               throw new Error('[[error:no-privileges]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/tools.js:121:59
-       topicTools.setPinExpiry = async (tid, expiry, uid) => {
-           if (isNaN(parseInt(expiry, 10)) || expiry <= Date.now()) {
-               throw new Error('[[error:invalid-data]]');
-           }
-           const topicData = await Topics.getTopicFields(tid, ['tid', 'uid', 'cid']);
-           const isAdminOrMod = await privileges.categories.isAdminOrMod(topicData.cid, uid);
-           if (!isAdminOrMod) {
-               throw new Error('[[error:no-privileges]]');
-           }
-           await Topics.setTopicField(tid, 'pinExpiry', expiry);
-           plugins.hooks.fire('action:topic.setPinExpiry', { topic: _.clone(topicData), uid: uid });
-       };
+       topicTools.setPinExpiry = async (tid, expiry, uid) => {};

[NoCoverage] ConditionalExpression
src/topics/tools.js:122:13
-           if (isNaN(parseInt(expiry, 10)) || expiry <= Date.now()) {
+           if (true) {

[NoCoverage] ConditionalExpression
src/topics/tools.js:122:13
-           if (isNaN(parseInt(expiry, 10)) || expiry <= Date.now()) {
+           if (false) {

[NoCoverage] LogicalOperator
src/topics/tools.js:122:13
-           if (isNaN(parseInt(expiry, 10)) || expiry <= Date.now()) {
+           if (isNaN(parseInt(expiry, 10)) && expiry <= Date.now()) {

[NoCoverage] ConditionalExpression
src/topics/tools.js:122:44
-           if (isNaN(parseInt(expiry, 10)) || expiry <= Date.now()) {
+           if (isNaN(parseInt(expiry, 10)) || false) {

[NoCoverage] EqualityOperator
src/topics/tools.js:122:44
-           if (isNaN(parseInt(expiry, 10)) || expiry <= Date.now()) {
+           if (isNaN(parseInt(expiry, 10)) || expiry < Date.now()) {

[NoCoverage] EqualityOperator
src/topics/tools.js:122:44
-           if (isNaN(parseInt(expiry, 10)) || expiry <= Date.now()) {
+           if (isNaN(parseInt(expiry, 10)) || expiry > Date.now()) {

[NoCoverage] BlockStatement
src/topics/tools.js:122:66
-           if (isNaN(parseInt(expiry, 10)) || expiry <= Date.now()) {
-               throw new Error('[[error:invalid-data]]');
-           }
+           if (isNaN(parseInt(expiry, 10)) || expiry <= Date.now()) {}

[NoCoverage] StringLiteral
src/topics/tools.js:123:29
-               throw new Error('[[error:invalid-data]]');
+               throw new Error("");

[NoCoverage] ArrayDeclaration
src/topics/tools.js:126:60
-           const topicData = await Topics.getTopicFields(tid, ['tid', 'uid', 'cid']);
+           const topicData = await Topics.getTopicFields(tid, []);

[NoCoverage] StringLiteral
src/topics/tools.js:126:61
-           const topicData = await Topics.getTopicFields(tid, ['tid', 'uid', 'cid']);
+           const topicData = await Topics.getTopicFields(tid, ["", 'uid', 'cid']);

[NoCoverage] StringLiteral
src/topics/tools.js:126:68
-           const topicData = await Topics.getTopicFields(tid, ['tid', 'uid', 'cid']);
+           const topicData = await Topics.getTopicFields(tid, ['tid', "", 'cid']);

[NoCoverage] StringLiteral
src/topics/tools.js:126:75
-           const topicData = await Topics.getTopicFields(tid, ['tid', 'uid', 'cid']);
+           const topicData = await Topics.getTopicFields(tid, ['tid', 'uid', ""]);

[NoCoverage] BooleanLiteral
src/topics/tools.js:128:13
-           if (!isAdminOrMod) {
+           if (isAdminOrMod) {

[NoCoverage] ConditionalExpression
src/topics/tools.js:128:13
-           if (!isAdminOrMod) {
+           if (true) {

[NoCoverage] ConditionalExpression
src/topics/tools.js:128:13
-           if (!isAdminOrMod) {
+           if (false) {

[NoCoverage] BlockStatement
src/topics/tools.js:128:28
-           if (!isAdminOrMod) {
-               throw new Error('[[error:no-privileges]]');
-           }
+           if (!isAdminOrMod) {}

[NoCoverage] StringLiteral
src/topics/tools.js:129:29
-               throw new Error('[[error:no-privileges]]');
+               throw new Error("");

[NoCoverage] StringLiteral
src/topics/tools.js:132:41
-           await Topics.setTopicField(tid, 'pinExpiry', expiry);
+           await Topics.setTopicField(tid, "", expiry);

[NoCoverage] StringLiteral
src/topics/tools.js:133:28
-           plugins.hooks.fire('action:topic.setPinExpiry', { topic: _.clone(topicData), uid: uid });
+           plugins.hooks.fire("", { topic: _.clone(topicData), uid: uid });

[NoCoverage] ObjectLiteral
src/topics/tools.js:133:57
-           plugins.hooks.fire('action:topic.setPinExpiry', { topic: _.clone(topicData), uid: uid });
+           plugins.hooks.fire('action:topic.setPinExpiry', {});

[NoCoverage] ConditionalExpression
src/topics/tools.js:141:32
-               if (expiry[idx] && parseInt(expiry[idx], 10) <= now) {
+               if (expiry[idx] && true) {

[NoCoverage] EqualityOperator
src/topics/tools.js:141:32
-               if (expiry[idx] && parseInt(expiry[idx], 10) <= now) {
+               if (expiry[idx] && parseInt(expiry[idx], 10) < now) {

[NoCoverage] EqualityOperator
src/topics/tools.js:141:32
-               if (expiry[idx] && parseInt(expiry[idx], 10) <= now) {
+               if (expiry[idx] && parseInt(expiry[idx], 10) > now) {

[NoCoverage] BlockStatement
src/topics/tools.js:141:66
-               if (expiry[idx] && parseInt(expiry[idx], 10) <= now) {
-                   await togglePin(tid, 'system', false);
-                   return null;
-               }
+               if (expiry[idx] && parseInt(expiry[idx], 10) <= now) {}

[NoCoverage] StringLiteral
src/topics/tools.js:142:38
-                   await togglePin(tid, 'system', false);
+                   await togglePin(tid, "", false);

[NoCoverage] BooleanLiteral
src/topics/tools.js:142:48
-                   await togglePin(tid, 'system', false);
+                   await togglePin(tid, 'system', true);

[NoCoverage] BlockStatement
src/topics/tools.js:154:25
-           if (!topicData) {
-               throw new Error('[[error:no-topic]]');
-           }
+           if (!topicData) {}

[NoCoverage] StringLiteral
src/topics/tools.js:155:29
-               throw new Error('[[error:no-topic]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/tools.js:162:82
-           if (uid !== 'system' && !await privileges.topics.isAdminOrMod(tid, uid)) {
-               throw new Error('[[error:no-privileges]]');
-           }
+           if (uid !== 'system' && !await privileges.topics.isAdminOrMod(tid, uid)) {}

[NoCoverage] StringLiteral
src/topics/tools.js:163:29
-               throw new Error('[[error:no-privileges]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/tools.js:206:66
-           if (!cid || !tid || !utils.isNumber(order) || order < 0) {
-               throw new Error('[[error:invalid-data]]');
-           }
+           if (!cid || !tid || !utils.isNumber(order) || order < 0) {}

[NoCoverage] StringLiteral
src/topics/tools.js:207:29
-               throw new Error('[[error:invalid-data]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/tools.js:236:25
-           if (!topicData) {
-               throw new Error('[[error:no-topic]]');
-           }
+           if (!topicData) {}

[NoCoverage] StringLiteral
src/topics/tools.js:237:29
-               throw new Error('[[error:no-topic]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/tools.js:239:36
-           if (cid === topicData.cid) {
-               throw new Error('[[error:cant-move-topic-to-same-category]]');
-           }
+           if (cid === topicData.cid) {}

[NoCoverage] StringLiteral
src/topics/tools.js:240:29
-               throw new Error('[[error:cant-move-topic-to-same-category]]');
+               throw new Error("");

[NoCoverage] BlockStatement
src/topics/tools.js:263:31
-           if (topicData.pinned) {
-               bulk.push([`cid:${cid}:tids:pinned`, Date.now(), tid]);
-           } else {
+           if (topicData.pinned) {} else {

[NoCoverage] ArrayDeclaration
src/topics/tools.js:264:23
-               bulk.push([`cid:${cid}:tids:pinned`, Date.now(), tid]);
+               bulk.push([]);

[NoCoverage] StringLiteral
src/topics/tools.js:264:24
-               bulk.push([`cid:${cid}:tids:pinned`, Date.now(), tid]);
+               bulk.push([``, Date.now(), tid]);

[NoCoverage] BlockStatement
src/topics/unread.js:33:27
-           if (!tids.length) {
-               return unreadTopics;
-           }
+           if (!tids.length) {}

[NoCoverage] ArithmeticOperator
src/topics/unread.js:37:62
-           tids = tids.slice(params.start, params.stop !== -1 ? params.stop + 1 : undefined);
+           tids = tids.slice(params.start, params.stop !== -1 ? params.stop - 1 : undefined);

[NoCoverage] BlockStatement
src/topics/unread.js:40:32
-           if (!topicData.length) {
-               return unreadTopics;
-           }
+           if (!topicData.length) {}

[NoCoverage] BlockStatement
src/topics/unread.js:182:81
-           if (plugins.hooks.hasListeners('filter:topics.unread.getCategoryTids')) {
-               const result = await plugins.hooks.fire('filter:topics.unread.getCategoryTids', { params: params, tids: [] });
-               return result.tids;
-           }
+           if (plugins.hooks.hasListeners('filter:topics.unread.getCategoryTids')) {}

[NoCoverage] StringLiteral
src/topics/unread.js:183:53
-               const result = await plugins.hooks.fire('filter:topics.unread.getCategoryTids', { params: params, tids: [] });
+               const result = await plugins.hooks.fire("", { params: params, tids: [] });

[NoCoverage] ObjectLiteral
src/topics/unread.js:183:93
-               const result = await plugins.hooks.fire('filter:topics.unread.getCategoryTids', { params: params, tids: [] });
+               const result = await plugins.hooks.fire('filter:topics.unread.getCategoryTids', {});

[NoCoverage] ArrayDeclaration
src/topics/unread.js:183:117
-               const result = await plugins.hooks.fire('filter:topics.unread.getCategoryTids', { params: params, tids: [] });
+               const result = await plugins.hooks.fire('filter:topics.unread.getCategoryTids', { params: params, tids: ["Stryker was here"] });

[NoCoverage] BlockStatement
src/topics/unread.js:186:42
-           if (params.filter === 'watched') {
-               return [];
-           }
+           if (params.filter === 'watched') {}

[NoCoverage] ArrayDeclaration
src/topics/unread.js:187:20
-               return [];
+               return ["Stryker was here"];

[NoCoverage] BlockStatement
src/topics/unread.js:252:45
-           if (!uid || parseInt(uid, 10) <= 0) {
-               return;
-           }
+           if (!uid || parseInt(uid, 10) <= 0) {}

[NoCoverage] BlockStatement
src/topics/unread.js:275:27
-           if (!tids.length) {
-               return false;
-           }
+           if (!tids.length) {}

[NoCoverage] BooleanLiteral
src/topics/unread.js:276:20
-               return false;
+               return true;

[NoCoverage] BlockStatement
src/topics/unread.js:356:38
-               if (!hasUnblockedUnread) {
-                   data.read = true;
-               }
+               if (!hasUnblockedUnread) {}

[NoCoverage] BooleanLiteral
src/topics/unread.js:357:29
-                   data.read = true;
+                   data.read = false;

[NoCoverage] BooleanLiteral
src/topics/unread.js:365:72
-           return Array.isArray(hasRead) && hasRead.length ? hasRead[0] : false;
+           return Array.isArray(hasRead) && hasRead.length ? hasRead[0] : true;

[NoCoverage] BlockStatement
src/topics/unread.js:378:37
-           if (parseInt(uid, 10) <= 0) {
-               return [];
-           }
+           if (parseInt(uid, 10) <= 0) {}

[NoCoverage] ArrayDeclaration
src/topics/unread.js:379:20
-               return [];
+               return ["Stryker was here"];

[NoCoverage] BlockStatement
src/topics/user.js:15:43
-       Topics.getUids = async function (tid) {
-           return await db.getSortedSetRevRangeByScore(`tid:${tid}:posters`, 0, -1, '+inf', 1);
-       };
+       Topics.getUids = async function (tid) {};

[NoCoverage] StringLiteral
src/topics/user.js:16:53
-           return await db.getSortedSetRevRangeByScore(`tid:${tid}:posters`, 0, -1, '+inf', 1);
+           return await db.getSortedSetRevRangeByScore(``, 0, -1, '+inf', 1);

[NoCoverage] UnaryOperator
src/topics/user.js:16:78
-           return await db.getSortedSetRevRangeByScore(`tid:${tid}:posters`, 0, -1, '+inf', 1);
+           return await db.getSortedSetRevRangeByScore(`tid:${tid}:posters`, 0, +1, '+inf', 1);

[NoCoverage] StringLiteral
src/topics/user.js:16:82
-           return await db.getSortedSetRevRangeByScore(`tid:${tid}:posters`, 0, -1, '+inf', 1);
+           return await db.getSortedSetRevRangeByScore(`tid:${tid}:posters`, 0, -1, "", 1);

Ran 0.92 tests per mutant on average.
--------------|---------|----------|-----------|------------|----------|----------|
File          | % score | # killed | # timeout | # survived | # no cov | # errors |
--------------|---------|----------|-----------|------------|----------|----------|
All files     |   90.57 |     3523 |         1 |          3 |      364 |        1 |
 bookmarks.js |   96.55 |       55 |         1 |          0 |        2 |        0 |
 create.js    |   93.16 |      245 |         0 |          0 |       18 |        0 |
 data.js      |   98.56 |      137 |         0 |          0 |        2 |        0 |
 delete.js    |   96.91 |       94 |         0 |          0 |        3 |        0 |
 events.js    |   91.62 |      175 |         0 |          0 |       16 |        0 |
 follow.js    |   85.53 |      130 |         0 |          0 |       22 |        0 |
 fork.js      |   85.26 |      133 |         0 |          0 |       23 |        0 |
 index.js     |   93.57 |      233 |         0 |          0 |       16 |        0 |
 merge.js     |   96.00 |       48 |         0 |          0 |        2 |        0 |
 posts.js     |   89.02 |      389 |         0 |          0 |       48 |        1 |
 recent.js    |   84.48 |       49 |         0 |          0 |        9 |        0 |
 scheduled.js |   94.85 |       92 |         0 |          0 |        5 |        0 |
 sorted.js    |   78.87 |      209 |         0 |          0 |       56 |        0 |
 suggested.js |   85.56 |       77 |         0 |          0 |       13 |        0 |
 tags.js      |   91.33 |      474 |         0 |          0 |       45 |        0 |
 teaser.js    |   98.31 |      174 |         0 |          0 |        3 |        0 |
 thumbs.js    |   92.47 |      135 |         0 |          3 |        8 |        0 |
 tools.js     |   81.88 |      235 |         0 |          0 |       52 |        0 |
 unread.js    |   96.17 |      427 |         0 |          0 |       17 |        0 |
 user.js      |   75.00 |       12 |         0 |          0 |        4 |        0 |
--------------|---------|----------|-----------|------------|----------|----------|
[32m06:48:47 (4852) INFO HtmlReporter[39m Your report can be found at: file:///Users/kevinhe/Documents/School/17-313/spring24-nodebb-team-3/reports/mutation/mutation.html
[32m06:48:47 (4852) INFO MutationTestExecutor[39m Done in 6 minutes 45 seconds.
